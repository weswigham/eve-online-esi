/// <reference types="node" />
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import request = require('request');
import http = require('http');
import Promise = require('bluebird');
/**
* Unprocessable entity
*/
export declare class DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdMembersMemberIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdSquadsSquadIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdWingsWingIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden model
*/
export declare class Forbidden {
    /**
    * Forbidden message
    */
    'error': string;
    /**
    * Status code received from SSO
    */
    'ssoStatus': number;
}
/**
* 200 ok object
*/
export declare class GetAlliancesAllianceIdContacts200Ok {
    /**
    * Standing of the contact
    */
    'standing': number;
    /**
    * contact_type string
    */
    'contactType': GetAlliancesAllianceIdContacts200Ok.ContactTypeEnum;
    /**
    * contact_id integer
    */
    'contactId': number;
    /**
    * Custom label of the contact
    */
    'labelId': number;
}
export declare namespace GetAlliancesAllianceIdContacts200Ok {
    enum ContactTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
    }
}
/**
* No image server for this datasource
*/
export declare class GetAlliancesAllianceIdIconsNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetAlliancesAllianceIdIconsOk {
    /**
    * px64x64 string
    */
    'px64x64': string;
    /**
    * px128x128 string
    */
    'px128x128': string;
}
/**
* Not found
*/
export declare class GetAlliancesAllianceIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetAlliancesAllianceIdOk {
    /**
    * the full name of the alliance
    */
    'name': string;
    /**
    * ID of the character that created the alliance
    */
    'creatorId': number;
    /**
    * ID of the corporation that created the alliance
    */
    'creatorCorporationId': number;
    /**
    * the short name of the alliance
    */
    'ticker': string;
    /**
    * the executor corporation ID, if this alliance is not closed
    */
    'executorCorporationId': number;
    /**
    * date_founded string
    */
    'dateFounded': Date;
    /**
    * Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
    */
    'factionId': number;
}
/**
* 200 ok object
*/
export declare class GetAlliancesNames200Ok {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * alliance_name string
    */
    'allianceName': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdAgentsResearch200Ok {
    /**
    * agent_id integer
    */
    'agentId': number;
    /**
    * skill_type_id integer
    */
    'skillTypeId': number;
    /**
    * started_at string
    */
    'startedAt': Date;
    /**
    * points_per_day number
    */
    'pointsPerDay': number;
    /**
    * remainder_points number
    */
    'remainderPoints': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdAssets200Ok {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdAssets200Ok.LocationTypeEnum;
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * location_flag string
    */
    'locationFlag': GetCharactersCharacterIdAssets200Ok.LocationFlagEnum;
    /**
    * is_singleton boolean
    */
    'isSingleton': boolean;
}
export declare namespace GetCharactersCharacterIdAssets200Ok {
    enum LocationTypeEnum {
        Station,
        SolarSystem,
        Other,
    }
    enum LocationFlagEnum {
        AssetSafety,
        AutoFit,
        Cargo,
        CorpseBay,
        Deliveries,
        DroneBay,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        FleetHangar,
        Hangar,
        HangarAll,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        HiddenModifiers,
        Implant,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        Locked,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        QuafeBay,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        ShipHangar,
        Skill,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedFuelBay,
        SpecializedGasHold,
        SpecializedIndustrialShipHold,
        SpecializedLargeShipHold,
        SpecializedMaterialBay,
        SpecializedMediumShipHold,
        SpecializedMineralHold,
        SpecializedOreHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        SubSystemBay,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        Unlocked,
        Wardrobe,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdAttributesOk {
    /**
    * charisma integer
    */
    'charisma': number;
    /**
    * intelligence integer
    */
    'intelligence': number;
    /**
    * memory integer
    */
    'memory': number;
    /**
    * perception integer
    */
    'perception': number;
    /**
    * willpower integer
    */
    'willpower': number;
    /**
    * Number of available bonus character neural remaps
    */
    'bonusRemaps': number;
    /**
    * Datetime of last neural remap, including usage of bonus remaps
    */
    'lastRemapDate': Date;
    /**
    * Neural remapping cooldown after a character uses remap accrued over time
    */
    'accruedRemapCooldownDate': Date;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdBlueprints200Ok {
    /**
    * Unique ID for this item.
    */
    'itemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * References a solar system, station or item_id if this blueprint is located within a container. If the return value is an item_id, then the Character AssetList API must be queried to find the container using the given item_id to determine the correct location of the Blueprint.
    */
    'locationId': number;
    /**
    * Type of the location_id
    */
    'locationFlag': GetCharactersCharacterIdBlueprints200Ok.LocationFlagEnum;
    /**
    * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
    */
    'quantity': number;
    /**
    * Time Efficiency Level of the blueprint.
    */
    'timeEfficiency': number;
    /**
    * Material Efficiency Level of the blueprint.
    */
    'materialEfficiency': number;
    /**
    * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
    */
    'runs': number;
}
export declare namespace GetCharactersCharacterIdBlueprints200Ok {
    enum LocationFlagEnum {
        AutoFit,
        Cargo,
        CorpseBay,
        DroneBay,
        FleetHangar,
        Deliveries,
        HiddenModifiers,
        Hangar,
        HangarAll,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        AssetSafety,
        Locked,
        Unlocked,
        Implant,
        QuafeBay,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        ShipHangar,
        SpecializedFuelBay,
        SpecializedOreHold,
        SpecializedGasHold,
        SpecializedMineralHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        SpecializedMediumShipHold,
        SpecializedLargeShipHold,
        SpecializedIndustrialShipHold,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedMaterialBay,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        Module,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdBookmarks200Ok {
    /**
    * bookmark_id integer
    */
    'bookmarkId': number;
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * created string
    */
    'created': Date;
    /**
    * label string
    */
    'label': string;
    /**
    * notes string
    */
    'notes': string;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * creator_id integer
    */
    'creatorId': number;
    'item': GetCharactersCharacterIdBookmarksItem;
    'coordinates': GetCharactersCharacterIdBookmarksCoordinates;
}
/**
* Optional object that is returned if a bookmark was made on a planet or a random location in space.
*/
export declare class GetCharactersCharacterIdBookmarksCoordinates {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdBookmarksFolders200Ok {
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* Optional object that is returned if a bookmark was made on a particular item.
*/
export declare class GetCharactersCharacterIdBookmarksItem {
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* event
*/
export declare class GetCharactersCharacterIdCalendar200Ok {
    /**
    * event_id integer
    */
    'eventId': number;
    /**
    * event_date string
    */
    'eventDate': Date;
    /**
    * title string
    */
    'title': string;
    /**
    * importance integer
    */
    'importance': number;
    /**
    * event_response string
    */
    'eventResponse': GetCharactersCharacterIdCalendar200Ok.EventResponseEnum;
}
export declare namespace GetCharactersCharacterIdCalendar200Ok {
    enum EventResponseEnum {
        Declined,
        NotResponded,
        Accepted,
        Tentative,
    }
}
/**
* character_id and response of an attendee
*/
export declare class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * event_response string
    */
    'eventResponse': GetCharactersCharacterIdCalendarEventIdAttendees200Ok.EventResponseEnum;
}
export declare namespace GetCharactersCharacterIdCalendarEventIdAttendees200Ok {
    enum EventResponseEnum {
        Declined,
        NotResponded,
        Accepted,
        Tentative,
    }
}
/**
* Full details of a specific event
*/
export declare class GetCharactersCharacterIdCalendarEventIdOk {
    /**
    * event_id integer
    */
    'eventId': number;
    /**
    * owner_id integer
    */
    'ownerId': number;
    /**
    * owner_name string
    */
    'ownerName': string;
    /**
    * date string
    */
    'date': Date;
    /**
    * title string
    */
    'title': string;
    /**
    * Length in minutes
    */
    'duration': number;
    /**
    * importance integer
    */
    'importance': number;
    /**
    * response string
    */
    'response': string;
    /**
    * text string
    */
    'text': string;
    /**
    * owner_type string
    */
    'ownerType': GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum;
}
export declare namespace GetCharactersCharacterIdCalendarEventIdOk {
    enum OwnerTypeEnum {
        EveServer,
        Corporation,
        Faction,
        Character,
        Alliance,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdChatChannels200Ok {
    /**
    * Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don't appear in the API
    */
    'channelId': number;
    /**
    * Displayed name of channel
    */
    'name': string;
    /**
    * owner_id integer
    */
    'ownerId': number;
    /**
    * Normalized, unique string used to compare channel names
    */
    'comparisonKey': string;
    /**
    * If this is a password protected channel
    */
    'hasPassword': boolean;
    /**
    * Message of the day for this channel
    */
    'motd': string;
    /**
    * allowed array
    */
    'allowed': Array<GetCharactersCharacterIdChatChannelsAllowed>;
    /**
    * operators array
    */
    'operators': Array<GetCharactersCharacterIdChatChannelsOperator>;
    /**
    * blocked array
    */
    'blocked': Array<GetCharactersCharacterIdChatChannelsBlocked>;
    /**
    * muted array
    */
    'muted': Array<GetCharactersCharacterIdChatChannelsMuted>;
}
/**
* allowed object
*/
export declare class GetCharactersCharacterIdChatChannelsAllowed {
    /**
    * ID of an allowed channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum;
}
export declare namespace GetCharactersCharacterIdChatChannelsAllowed {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* blocked object
*/
export declare class GetCharactersCharacterIdChatChannelsBlocked {
    /**
    * ID of a blocked channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum;
    /**
    * Reason this accessor is blocked
    */
    'reason': string;
    /**
    * Time at which this accessor will no longer be blocked
    */
    'endAt': Date;
}
export declare namespace GetCharactersCharacterIdChatChannelsBlocked {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* muted object
*/
export declare class GetCharactersCharacterIdChatChannelsMuted {
    /**
    * ID of a muted channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum;
    /**
    * Reason this accessor is muted
    */
    'reason': string;
    /**
    * Time at which this accessor will no longer be muted
    */
    'endAt': Date;
}
export declare namespace GetCharactersCharacterIdChatChannelsMuted {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* operator object
*/
export declare class GetCharactersCharacterIdChatChannelsOperator {
    /**
    * ID of a channel operator
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum;
}
export declare namespace GetCharactersCharacterIdChatChannelsOperator {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* home_location object
*/
export declare class GetCharactersCharacterIdClonesHomeLocation {
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum;
}
export declare namespace GetCharactersCharacterIdClonesHomeLocation {
    enum LocationTypeEnum {
        Station,
        Structure,
    }
}
/**
* jump_clone object
*/
export declare class GetCharactersCharacterIdClonesJumpClone {
    /**
    * jump_clone_id integer
    */
    'jumpCloneId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum;
    /**
    * implants array
    */
    'implants': Array<number>;
}
export declare namespace GetCharactersCharacterIdClonesJumpClone {
    enum LocationTypeEnum {
        Station,
        Structure,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdClonesOk {
    /**
    * last_clone_jump_date string
    */
    'lastCloneJumpDate': Date;
    'homeLocation': GetCharactersCharacterIdClonesHomeLocation;
    /**
    * last_station_change_date string
    */
    'lastStationChangeDate': Date;
    /**
    * jump_clones array
    */
    'jumpClones': Array<GetCharactersCharacterIdClonesJumpClone>;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContacts200Ok {
    /**
    * Standing of the contact
    */
    'standing': number;
    /**
    * contact_type string
    */
    'contactType': GetCharactersCharacterIdContacts200Ok.ContactTypeEnum;
    /**
    * contact_id integer
    */
    'contactId': number;
    /**
    * Whether this contact is being watched
    */
    'isWatched': boolean;
    /**
    * Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
    */
    'isBlocked': boolean;
    /**
    * Custom label of the contact
    */
    'labelId': number;
}
export declare namespace GetCharactersCharacterIdContacts200Ok {
    enum ContactTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContactsLabels200Ok {
    /**
    * label_id integer
    */
    'labelId': number;
    /**
    * label_name string
    */
    'labelName': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContracts200Ok {
    /**
    * contract_id integer
    */
    'contractId': number;
    /**
    * Character ID for the issuer
    */
    'issuerId': number;
    /**
    * Character's corporation ID for the issuer
    */
    'issuerCorporationId': number;
    /**
    * ID to whom the contract is assigned, can be corporation or character ID
    */
    'assigneeId': number;
    /**
    * Who will accept the contract
    */
    'acceptorId': number;
    /**
    * Start location ID (for Couriers contract)
    */
    'startLocationId': number;
    /**
    * End location ID (for Couriers contract)
    */
    'endLocationId': number;
    /**
    * Type of the contract
    */
    'type': GetCharactersCharacterIdContracts200Ok.TypeEnum;
    /**
    * Status of the the contract
    */
    'status': GetCharactersCharacterIdContracts200Ok.StatusEnum;
    /**
    * Title of the contract
    */
    'title': string;
    /**
    * true if the contract was issued on behalf of the issuer's corporation
    */
    'forCorporation': boolean;
    /**
    * To whom the contract is available
    */
    'availability': GetCharactersCharacterIdContracts200Ok.AvailabilityEnum;
    /**
    * Сreation date of the contract
    */
    'dateIssued': Date;
    /**
    * Expiration date of the contract
    */
    'dateExpired': Date;
    /**
    * Date of confirmation of contract
    */
    'dateAccepted': Date;
    /**
    * Number of days to perform the contract
    */
    'daysToComplete': number;
    /**
    * Date of completed of contract
    */
    'dateCompleted': Date;
    /**
    * Price of contract (for ItemsExchange and Auctions)
    */
    'price': number;
    /**
    * Remuneration for contract (for Couriers only)
    */
    'reward': number;
    /**
    * Collateral price (for Couriers only)
    */
    'collateral': number;
    /**
    * Buyout price (for Auctions only)
    */
    'buyout': number;
    /**
    * Volume of items in the contract
    */
    'volume': number;
}
export declare namespace GetCharactersCharacterIdContracts200Ok {
    enum TypeEnum {
        Unknown,
        ItemExchange,
        Auction,
        Courier,
        Loan,
    }
    enum StatusEnum {
        Outstanding,
        InProgress,
        FinishedIssuer,
        FinishedContractor,
        Finished,
        Cancelled,
        Rejected,
        Failed,
        Deleted,
        Reversed,
    }
    enum AvailabilityEnum {
        Public,
        Personal,
        Corporation,
        Alliance,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContractsContractIdBids200Ok {
    /**
    * Unique ID for the bid
    */
    'bidId': number;
    /**
    * Character ID of the bidder
    */
    'bidderId': number;
    /**
    * Datetime when the bid was placed
    */
    'dateBid': Date;
    /**
    * The amount bid, in ISK
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContractsContractIdItems200Ok {
    /**
    * Unique ID for the item
    */
    'recordId': number;
    /**
    * Type ID for item
    */
    'typeId': number;
    /**
    * Number of items in the stack
    */
    'quantity': number;
    /**
    * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
    */
    'rawQuantity': number;
    /**
    * is_singleton boolean
    */
    'isSingleton': boolean;
    /**
    * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract.
    */
    'isIncluded': boolean;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdCorporationhistory200Ok {
    /**
    * start_date string
    */
    'startDate': Date;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * True if the corporation has been deleted
    */
    'isDeleted': boolean;
    /**
    * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
    */
    'recordId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdFatigueOk {
    /**
    * Character's last jump activation
    */
    'lastJumpDate': Date;
    /**
    * Character's jump fatigue expiry
    */
    'jumpFatigueExpireDate': Date;
    /**
    * Character's last jump update
    */
    'lastUpdateDate': Date;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdFittings200Ok {
    /**
    * fitting_id integer
    */
    'fittingId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * items array
    */
    'items': Array<GetCharactersCharacterIdFittingsItem>;
}
/**
* item object
*/
export declare class GetCharactersCharacterIdFittingsItem {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * flag integer
    */
    'flag': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* Not found
*/
export declare class GetCharactersCharacterIdFleetNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdFleetOk {
    /**
    * The character's current fleet ID
    */
    'fleetId': number;
    /**
    * ID of the wing the member is in. If not applicable, will be set to -1
    */
    'wingId': number;
    /**
    * ID of the squad the member is in. If not applicable, will be set to -1
    */
    'squadId': number;
    /**
    * Member’s role in fleet
    */
    'role': GetCharactersCharacterIdFleetOk.RoleEnum;
}
export declare namespace GetCharactersCharacterIdFleetOk {
    enum RoleEnum {
        FleetCommander,
        SquadCommander,
        SquadMember,
        WingCommander,
    }
}
/**
* Summary of kills done by the given character against enemy factions
*/
export declare class GetCharactersCharacterIdFwStatsKills {
    /**
    * Yesterday's total number of kills by a given character against enemy factions
    */
    'yesterday': number;
    /**
    * Last week's total number of kills by a given character against enemy factions
    */
    'lastWeek': number;
    /**
    * Total number of kills by a given character against enemy factions since the character enlisted
    */
    'total': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdFwStatsOk {
    /**
    * The faction the given character is enlisted to fight for. Will not be included if character is not enlisted in faction warfare
    */
    'factionId': number;
    /**
    * The enlistment date of the given character into faction warfare. Will not be included if character is not enlisted in faction warfare
    */
    'enlistedOn': Date;
    /**
    * The given character's current faction rank
    */
    'currentRank': number;
    /**
    * The given character's highest faction rank achieved
    */
    'highestRank': number;
    'kills': GetCharactersCharacterIdFwStatsKills;
    'victoryPoints': GetCharactersCharacterIdFwStatsVictoryPoints;
}
/**
* Summary of victory points gained by the given character for the enlisted faction
*/
export declare class GetCharactersCharacterIdFwStatsVictoryPoints {
    /**
    * Yesterday's victory points gained by the given character
    */
    'yesterday': number;
    /**
    * Last week's victory points gained by the given character
    */
    'lastWeek': number;
    /**
    * Total victory points gained since the given character enlisted
    */
    'total': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdIndustryJobs200Ok {
    /**
    * Unique job ID
    */
    'jobId': number;
    /**
    * ID of the character which installed this job
    */
    'installerId': number;
    /**
    * ID of the facility where this job is running
    */
    'facilityId': number;
    /**
    * ID of the station where industry facility is located
    */
    'stationId': number;
    /**
    * Job activity ID
    */
    'activityId': number;
    /**
    * blueprint_id integer
    */
    'blueprintId': number;
    /**
    * blueprint_type_id integer
    */
    'blueprintTypeId': number;
    /**
    * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
    */
    'blueprintLocationId': number;
    /**
    * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
    */
    'outputLocationId': number;
    /**
    * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
    */
    'runs': number;
    /**
    * The sume of job installation fee and industry facility tax
    */
    'cost': number;
    /**
    * Number of runs blueprint is licensed for
    */
    'licensedRuns': number;
    /**
    * Chance of success for invention
    */
    'probability': number;
    /**
    * Type ID of product (manufactured, copied or invented)
    */
    'productTypeId': number;
    /**
    * status string
    */
    'status': GetCharactersCharacterIdIndustryJobs200Ok.StatusEnum;
    /**
    * Job duration in seconds
    */
    'duration': number;
    /**
    * Date and time when this job started
    */
    'startDate': Date;
    /**
    * Date and time when this job finished
    */
    'endDate': Date;
    /**
    * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
    */
    'pauseDate': Date;
    /**
    * Date and time when this job was completed
    */
    'completedDate': Date;
    /**
    * ID of the character which completed this job
    */
    'completedCharacterId': number;
    /**
    * Number of successful runs for this job. Equal to runs unless this is an invention job
    */
    'successfulRuns': number;
}
export declare namespace GetCharactersCharacterIdIndustryJobs200Ok {
    enum StatusEnum {
        Active,
        Cancelled,
        Delivered,
        Paused,
        Ready,
        Reverted,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdKillmailsRecent200Ok {
    /**
    * ID of this killmail
    */
    'killmailId': number;
    /**
    * A hash of this killmail
    */
    'killmailHash': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdLocationOk {
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * station_id integer
    */
    'stationId': number;
    /**
    * structure_id integer
    */
    'structureId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdLoyaltyPoints200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * loyalty_points integer
    */
    'loyaltyPoints': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMail200Ok {
    /**
    * mail_id integer
    */
    'mailId': number;
    /**
    * Mail subject
    */
    'subject': string;
    /**
    * From whom the mail was sent
    */
    'from': number;
    /**
    * When the mail was sent
    */
    'timestamp': Date;
    /**
    * labels array
    */
    'labels': Array<number>;
    /**
    * Recipients of the mail
    */
    'recipients': Array<GetCharactersCharacterIdMailRecipient>;
    /**
    * is_read boolean
    */
    'isRead': boolean;
}
/**
* label object
*/
export declare class GetCharactersCharacterIdMailLabelsLabel {
    /**
    * unread_count integer
    */
    'unreadCount': number;
    /**
    * label_id integer
    */
    'labelId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * color string
    */
    'color': GetCharactersCharacterIdMailLabelsLabel.ColorEnum;
}
export declare namespace GetCharactersCharacterIdMailLabelsLabel {
    enum ColorEnum {
        _0000fe,
        _006634,
        _0099ff,
        _00ff33,
        _01ffff,
        _349800,
        _660066,
        _666666,
        _999999,
        _99ffff,
        _9a0000,
        Ccff9a,
        E6e6e6,
        Fe0000,
        Ff6600,
        Ffff01,
        Ffffcd,
        Ffffff,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailLabelsOk {
    /**
    * total_unread_count integer
    */
    'totalUnreadCount': number;
    /**
    * labels array
    */
    'labels': Array<GetCharactersCharacterIdMailLabelsLabel>;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailLists200Ok {
    /**
    * Mailing list ID
    */
    'mailingListId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* Not found
*/
export declare class GetCharactersCharacterIdMailMailIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailMailIdOk {
    /**
    * Mail subject
    */
    'subject': string;
    /**
    * From whom the mail was sent
    */
    'from': number;
    /**
    * When the mail was sent
    */
    'timestamp': Date;
    /**
    * Recipients of the mail
    */
    'recipients': Array<GetCharactersCharacterIdMailMailIdRecipient>;
    /**
    * Mail's body
    */
    'body': string;
    /**
    * Labels attached to the mail
    */
    'labels': Array<number>;
    /**
    * Whether the mail is flagged as read
    */
    'read': boolean;
}
/**
* recipient object
*/
export declare class GetCharactersCharacterIdMailMailIdRecipient {
    /**
    * recipient_type string
    */
    'recipientType': GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum;
    /**
    * recipient_id integer
    */
    'recipientId': number;
}
export declare namespace GetCharactersCharacterIdMailMailIdRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* recipient object
*/
export declare class GetCharactersCharacterIdMailRecipient {
    /**
    * recipient_type string
    */
    'recipientType': GetCharactersCharacterIdMailRecipient.RecipientTypeEnum;
    /**
    * recipient_id integer
    */
    'recipientId': number;
}
export declare namespace GetCharactersCharacterIdMailRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMedals200Ok {
    /**
    * medal_id integer
    */
    'medalId': number;
    /**
    * title string
    */
    'title': string;
    /**
    * description string
    */
    'description': string;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * issuer_id integer
    */
    'issuerId': number;
    /**
    * date string
    */
    'date': Date;
    /**
    * reason string
    */
    'reason': string;
    /**
    * status string
    */
    'status': GetCharactersCharacterIdMedals200Ok.StatusEnum;
    /**
    * graphics array
    */
    'graphics': Array<GetCharactersCharacterIdMedalsGraphic>;
}
export declare namespace GetCharactersCharacterIdMedals200Ok {
    enum StatusEnum {
        Public,
        Private,
    }
}
/**
* graphic object
*/
export declare class GetCharactersCharacterIdMedalsGraphic {
    /**
    * part integer
    */
    'part': number;
    /**
    * layer integer
    */
    'layer': number;
    /**
    * graphic string
    */
    'graphic': string;
    /**
    * color integer
    */
    'color': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMining200Ok {
    /**
    * date string
    */
    'date': Date;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* Not found
*/
export declare class GetCharactersCharacterIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdNotifications200Ok {
    /**
    * notification_id integer
    */
    'notificationId': number;
    /**
    * type string
    */
    'type': GetCharactersCharacterIdNotifications200Ok.TypeEnum;
    /**
    * sender_id integer
    */
    'senderId': number;
    /**
    * sender_type string
    */
    'senderType': GetCharactersCharacterIdNotifications200Ok.SenderTypeEnum;
    /**
    * timestamp string
    */
    'timestamp': Date;
    /**
    * is_read boolean
    */
    'isRead': boolean;
    /**
    * text string
    */
    'text': string;
}
export declare namespace GetCharactersCharacterIdNotifications200Ok {
    enum TypeEnum {
        AcceptedAlly,
        AcceptedSurrender,
        AllAnchoringMsg,
        AllMaintenanceBillMsg,
        AllStrucInvulnerableMsg,
        AllStructVulnerableMsg,
        AllWarCorpJoinedAllianceMsg,
        AllWarDeclaredMsg,
        AllWarInvalidatedMsg,
        AllWarRetractedMsg,
        AllWarSurrenderMsg,
        AllianceCapitalChanged,
        AllyContractCancelled,
        AllyJoinedWarAggressorMsg,
        AllyJoinedWarAllyMsg,
        AllyJoinedWarDefenderMsg,
        BattlePunishFriendlyFire,
        BillOutOfMoneyMsg,
        BillPaidCorpAllMsg,
        BountyClaimMsg,
        BountyESSShared,
        BountyESSTaken,
        BountyPlacedAlliance,
        BountyPlacedChar,
        BountyPlacedCorp,
        BountyYourBountyClaimed,
        BuddyConnectContactAdd,
        CharAppAcceptMsg,
        CharAppRejectMsg,
        CharAppWithdrawMsg,
        CharLeftCorpMsg,
        CharMedalMsg,
        CharTerminationMsg,
        CloneActivationMsg,
        CloneActivationMsg2,
        CloneMovedMsg,
        CloneRevokedMsg1,
        CloneRevokedMsg2,
        ContactAdd,
        ContactEdit,
        ContainerPasswordMsg,
        CorpAllBillMsg,
        CorpAppAcceptMsg,
        CorpAppInvitedMsg,
        CorpAppNewMsg,
        CorpAppRejectCustomMsg,
        CorpAppRejectMsg,
        CorpDividendMsg,
        CorpFriendlyFireDisableTimerCompleted,
        CorpFriendlyFireDisableTimerStarted,
        CorpFriendlyFireEnableTimerCompleted,
        CorpFriendlyFireEnableTimerStarted,
        CorpKicked,
        CorpLiquidationMsg,
        CorpNewCEOMsg,
        CorpNewsMsg,
        CorpOfficeExpirationMsg,
        CorpStructLostMsg,
        CorpTaxChangeMsg,
        CorpVoteCEORevokedMsg,
        CorpVoteMsg,
        CorpWarDeclaredMsg,
        CorpWarFightingLegalMsg,
        CorpWarInvalidatedMsg,
        CorpWarRetractedMsg,
        CorpWarSurrenderMsg,
        CustomsMsg,
        DeclareWar,
        DistrictAttacked,
        DustAppAcceptedMsg,
        EntosisCaptureStarted,
        FWAllianceKickMsg,
        FWAllianceWarningMsg,
        FWCharKickMsg,
        FWCharRankGainMsg,
        FWCharRankLossMsg,
        FWCharWarningMsg,
        FWCorpJoinMsg,
        FWCorpKickMsg,
        FWCorpLeaveMsg,
        FWCorpWarningMsg,
        FacWarCorpJoinRequestMsg,
        FacWarCorpJoinWithdrawMsg,
        FacWarCorpLeaveRequestMsg,
        FacWarCorpLeaveWithdrawMsg,
        FacWarLPDisqualifiedEvent,
        FacWarLPDisqualifiedKill,
        FacWarLPPayoutEvent,
        FacWarLPPayoutKill,
        GameTimeAdded,
        GameTimeReceived,
        GameTimeSent,
        GiftReceived,
        IHubDestroyedByBillFailure,
        IncursionCompletedMsg,
        IndustryTeamAuctionLost,
        IndustryTeamAuctionWon,
        InfrastructureHubBillAboutToExpire,
        InsuranceExpirationMsg,
        InsuranceFirstShipMsg,
        InsuranceInvalidatedMsg,
        InsuranceIssuedMsg,
        InsurancePayoutMsg,
        JumpCloneDeletedMsg1,
        JumpCloneDeletedMsg2,
        KillReportFinalBlow,
        KillReportVictim,
        KillRightAvailable,
        KillRightAvailableOpen,
        KillRightEarned,
        KillRightUnavailable,
        KillRightUnavailableOpen,
        KillRightUsed,
        LocateCharMsg,
        MadeWarMutual,
        MercOfferedNegotiationMsg,
        MissionOfferExpirationMsg,
        MissionTimeoutMsg,
        MoonminingAutomaticFracture,
        MoonminingExtractionCancelled,
        MoonminingExtractionFinished,
        MoonminingLaserFired,
        NPCStandingsGained,
        NPCStandingsLost,
        OfferedSurrender,
        OfferedToAlly,
        OldLscMessages,
        OperationFinished,
        OrbitalAttacked,
        OrbitalReinforced,
        OwnershipTransferred,
        ReimbursementMsg,
        ResearchMissionAvailableMsg,
        RetractsWar,
        SeasonalChallengeCompleted,
        SovAllClaimAquiredMsg,
        SovAllClaimLostMsg,
        SovCommandNodeEventStarted,
        SovCorpBillLateMsg,
        SovCorpClaimFailMsg,
        SovDisruptorMsg,
        SovStationEnteredFreeport,
        SovStructureDestroyed,
        SovStructureReinforced,
        SovStructureSelfDestructCancel,
        SovStructureSelfDestructFinished,
        SovStructureSelfDestructRequested,
        SovereigntyIHDamageMsg,
        SovereigntySBUDamageMsg,
        SovereigntyTCUDamageMsg,
        StationAggressionMsg1,
        StationAggressionMsg2,
        StationConquerMsg,
        StationServiceDisabled,
        StationServiceEnabled,
        StationStateChangeMsg,
        StoryLineMissionAvailableMsg,
        StructureAnchoring,
        StructureCourierContractChanged,
        StructureDestroyed,
        StructureFuelAlert,
        StructureItemsDelivered,
        StructureLostArmor,
        StructureLostShields,
        StructureOnline,
        StructureServicesOffline,
        StructureUnanchoring,
        StructureUnderAttack,
        TowerAlertMsg,
        TowerResourceAlertMsg,
        TransactionReversalMsg,
        TutorialMsg,
        WarAllyOfferDeclinedMsg,
        WarSurrenderDeclinedMsg,
        WarSurrenderOfferMsg,
        NotificationTypeMoonminingExtractionStarted,
    }
    enum SenderTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
        Other,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdNotificationsContacts200Ok {
    /**
    * notification_id integer
    */
    'notificationId': number;
    /**
    * send_date string
    */
    'sendDate': Date;
    /**
    * A number representing the standing level the receiver has been added at by the sender. The standing levels are as follows: -10 -> Terrible | -5 -> Bad |  0 -> Neutral |  5 -> Good |  10 -> Excellent
    */
    'standingLevel': number;
    /**
    * message string
    */
    'message': string;
    /**
    * sender_character_id integer
    */
    'senderCharacterId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOk {
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * The character's corporation ID
    */
    'corporationId': number;
    /**
    * The character's alliance ID
    */
    'allianceId': number;
    /**
    * Creation date of the character
    */
    'birthday': Date;
    /**
    * gender string
    */
    'gender': GetCharactersCharacterIdOk.GenderEnum;
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * bloodline_id integer
    */
    'bloodlineId': number;
    /**
    * ancestry_id integer
    */
    'ancestryId': number;
    /**
    * security_status number
    */
    'securityStatus': number;
    /**
    * ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
    */
    'factionId': number;
}
export declare namespace GetCharactersCharacterIdOk {
    enum GenderEnum {
        Female,
        Male,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOnlineOk {
    /**
    * If the character is online
    */
    'online': boolean;
    /**
    * Timestamp of the last login
    */
    'lastLogin': Date;
    /**
    * Timestamp of the last logout
    */
    'lastLogout': Date;
    /**
    * Total number of times the character has logged in
    */
    'logins': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOpportunities200Ok {
    /**
    * task_id integer
    */
    'taskId': number;
    /**
    * completed_at string
    */
    'completedAt': Date;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOrders200Ok {
    /**
    * Unique order ID
    */
    'orderId': number;
    /**
    * The type ID of the item transacted in this order
    */
    'typeId': number;
    /**
    * ID of the region where order was placed
    */
    'regionId': number;
    /**
    * ID of the location where order was placed
    */
    'locationId': number;
    /**
    * Valid order range, numbers are ranges in jumps
    */
    'range': GetCharactersCharacterIdOrders200Ok.RangeEnum;
    /**
    * True for a bid (buy) order. False for an offer (sell) order
    */
    'isBuyOrder': boolean;
    /**
    * Cost per unit for this order
    */
    'price': number;
    /**
    * Quantity of items required or offered at time order was placed
    */
    'volumeTotal': number;
    /**
    * Quantity of items still required or offered
    */
    'volumeRemain': number;
    /**
    * Date and time when this order was issued
    */
    'issued': Date;
    /**
    * Current order state
    */
    'state': GetCharactersCharacterIdOrders200Ok.StateEnum;
    /**
    * For bids (buy orders), the minimum quantity that will be accepted in a matching offer (sell order)
    */
    'minVolume': number;
    /**
    * Wallet division for the buyer or seller of this order. Always 1000 for characters. Currently 1000 through 1006 for corporations
    */
    'accountId': number;
    /**
    * Numer of days for which order is valid (starting from the issued date). An order expires at time issued + duration
    */
    'duration': number;
    /**
    * is_corp boolean
    */
    'isCorp': boolean;
    /**
    * For buy orders, the amount of ISK in escrow
    */
    'escrow': number;
}
export declare namespace GetCharactersCharacterIdOrders200Ok {
    enum RangeEnum {
        _1,
        _10,
        _2,
        _20,
        _3,
        _30,
        _4,
        _40,
        _5,
        Region,
        Solarsystem,
        Station,
    }
    enum StateEnum {
        Cancelled,
        CharacterDeleted,
        Closed,
        Expired,
        Open,
        Pending,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPlanets200Ok {
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * planet_id integer
    */
    'planetId': number;
    /**
    * owner_id integer
    */
    'ownerId': number;
    /**
    * upgrade_level integer
    */
    'upgradeLevel': number;
    /**
    * num_pins integer
    */
    'numPins': number;
    /**
    * last_update string
    */
    'lastUpdate': Date;
    /**
    * planet_type string
    */
    'planetType': GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum;
}
export declare namespace GetCharactersCharacterIdPlanets200Ok {
    enum PlanetTypeEnum {
        Temperate,
        Barren,
        Oceanic,
        Ice,
        Gas,
        Lava,
        Storm,
        Plasma,
    }
}
/**
* content object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdContent {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * amount integer
    */
    'amount': number;
}
/**
* extractor_details object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    /**
    * heads array
    */
    'heads': Array<GetCharactersCharacterIdPlanetsPlanetIdHead>;
    /**
    * product_type_id integer
    */
    'productTypeId': number;
    /**
    * in seconds
    */
    'cycleTime': number;
    /**
    * head_radius number
    */
    'headRadius': number;
    /**
    * qty_per_cycle integer
    */
    'qtyPerCycle': number;
}
/**
* factory_details object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails {
    /**
    * schematic_id integer
    */
    'schematicId': number;
}
/**
* head object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdHead {
    /**
    * head_id integer
    */
    'headId': number;
    /**
    * latitude number
    */
    'latitude': number;
    /**
    * longitude number
    */
    'longitude': number;
}
/**
* link object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdLink {
    /**
    * source_pin_id integer
    */
    'sourcePinId': number;
    /**
    * destination_pin_id integer
    */
    'destinationPinId': number;
    /**
    * link_level integer
    */
    'linkLevel': number;
}
/**
* Colony not found
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdOk {
    /**
    * links array
    */
    'links': Array<GetCharactersCharacterIdPlanetsPlanetIdLink>;
    /**
    * pins array
    */
    'pins': Array<GetCharactersCharacterIdPlanetsPlanetIdPin>;
    /**
    * routes array
    */
    'routes': Array<GetCharactersCharacterIdPlanetsPlanetIdRoute>;
}
/**
* pin object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdPin {
    /**
    * latitude number
    */
    'latitude': number;
    /**
    * longitude number
    */
    'longitude': number;
    /**
    * pin_id integer
    */
    'pinId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * schematic_id integer
    */
    'schematicId': number;
    'extractorDetails': GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails;
    'factoryDetails': GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails;
    /**
    * contents array
    */
    'contents': Array<GetCharactersCharacterIdPlanetsPlanetIdContent>;
    /**
    * install_time string
    */
    'installTime': Date;
    /**
    * expiry_time string
    */
    'expiryTime': Date;
    /**
    * last_cycle_start string
    */
    'lastCycleStart': Date;
}
/**
* route object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdRoute {
    /**
    * route_id integer
    */
    'routeId': number;
    /**
    * source_pin_id integer
    */
    'sourcePinId': number;
    /**
    * destination_pin_id integer
    */
    'destinationPinId': number;
    /**
    * content_type_id integer
    */
    'contentTypeId': number;
    /**
    * quantity number
    */
    'quantity': number;
    /**
    * list of pin ID waypoints
    */
    'waypoints': Array<number>;
}
/**
* No image server for this datasource
*/
export declare class GetCharactersCharacterIdPortraitNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPortraitOk {
    /**
    * px64x64 string
    */
    'px64x64': string;
    /**
    * px128x128 string
    */
    'px128x128': string;
    /**
    * px256x256 string
    */
    'px256x256': string;
    /**
    * px512x512 string
    */
    'px512x512': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdRolesOk {
    /**
    * roles array
    */
    'roles': Array<GetCharactersCharacterIdRolesOk.RolesEnum>;
    /**
    * roles_at_hq array
    */
    'rolesAtHq': Array<GetCharactersCharacterIdRolesOk.RolesAtHqEnum>;
    /**
    * roles_at_base array
    */
    'rolesAtBase': Array<GetCharactersCharacterIdRolesOk.RolesAtBaseEnum>;
    /**
    * roles_at_other array
    */
    'rolesAtOther': Array<GetCharactersCharacterIdRolesOk.RolesAtOtherEnum>;
}
export declare namespace GetCharactersCharacterIdRolesOk {
    enum RolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtHqEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtBaseEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtOtherEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSearchOk {
    /**
    * agent array
    */
    'agent': Array<number>;
    /**
    * alliance array
    */
    'alliance': Array<number>;
    /**
    * character array
    */
    'character': Array<number>;
    /**
    * constellation array
    */
    'constellation': Array<number>;
    /**
    * corporation array
    */
    'corporation': Array<number>;
    /**
    * faction array
    */
    'faction': Array<number>;
    /**
    * inventory_type array
    */
    'inventoryType': Array<number>;
    /**
    * region array
    */
    'region': Array<number>;
    /**
    * solar_system array
    */
    'solarSystem': Array<number>;
    /**
    * station array
    */
    'station': Array<number>;
    /**
    * structure array
    */
    'structure': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdShipOk {
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
    */
    'shipItemId': number;
    /**
    * ship_name string
    */
    'shipName': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSkillqueue200Ok {
    /**
    * skill_id integer
    */
    'skillId': number;
    /**
    * finish_date string
    */
    'finishDate': Date;
    /**
    * start_date string
    */
    'startDate': Date;
    /**
    * finished_level integer
    */
    'finishedLevel': number;
    /**
    * queue_position integer
    */
    'queuePosition': number;
    /**
    * training_start_sp integer
    */
    'trainingStartSp': number;
    /**
    * level_end_sp integer
    */
    'levelEndSp': number;
    /**
    * Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.
    */
    'levelStartSp': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSkillsOk {
    /**
    * skills array
    */
    'skills': Array<GetCharactersCharacterIdSkillsSkill>;
    /**
    * total_sp integer
    */
    'totalSp': number;
    /**
    * Skill points available to be assigned
    */
    'unallocatedSp': number;
}
/**
* skill object
*/
export declare class GetCharactersCharacterIdSkillsSkill {
    /**
    * skill_id integer
    */
    'skillId': number;
    /**
    * skillpoints_in_skill integer
    */
    'skillpointsInSkill': number;
    /**
    * trained_skill_level integer
    */
    'trainedSkillLevel': number;
    /**
    * active_skill_level integer
    */
    'activeSkillLevel': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdStandings200Ok {
    /**
    * from_id integer
    */
    'fromId': number;
    /**
    * from_type string
    */
    'fromType': GetCharactersCharacterIdStandings200Ok.FromTypeEnum;
    /**
    * standing number
    */
    'standing': number;
}
export declare namespace GetCharactersCharacterIdStandings200Ok {
    enum FromTypeEnum {
        Agent,
        NpcCorp,
        Faction,
    }
}
/**
* Aggregate stats for a year
*/
export declare class GetCharactersCharacterIdStats200Ok {
    /**
    * Gregorian year for this set of aggregates
    */
    'year': number;
    'character': GetCharactersCharacterIdStatsCharacter;
    'combat': GetCharactersCharacterIdStatsCombat;
    'industry': GetCharactersCharacterIdStatsIndustry;
    'inventory': GetCharactersCharacterIdStatsInventory;
    'isk': GetCharactersCharacterIdStatsIsk;
    'market': GetCharactersCharacterIdStatsMarket;
    'mining': GetCharactersCharacterIdStatsMining;
    'module': GetCharactersCharacterIdStatsModule;
    'orbital': GetCharactersCharacterIdStatsOrbital;
    'pve': GetCharactersCharacterIdStatsPve;
    'social': GetCharactersCharacterIdStatsSocial;
    'travel': GetCharactersCharacterIdStatsTravel;
}
/**
* character object
*/
export declare class GetCharactersCharacterIdStatsCharacter {
    /**
    * days_of_activity integer
    */
    'daysOfActivity': number;
    /**
    * minutes integer
    */
    'minutes': number;
    /**
    * sessions_started integer
    */
    'sessionsStarted': number;
}
/**
* combat object
*/
export declare class GetCharactersCharacterIdStatsCombat {
    /**
    * cap_drainedby_npc integer
    */
    'capDrainedbyNpc': number;
    /**
    * cap_drainedby_pc integer
    */
    'capDrainedbyPc': number;
    /**
    * cap_draining_pc integer
    */
    'capDrainingPc': number;
    /**
    * criminal_flag_set integer
    */
    'criminalFlagSet': number;
    /**
    * damage_from_np_cs_amount integer
    */
    'damageFromNpCsAmount': number;
    /**
    * damage_from_np_cs_num_shots integer
    */
    'damageFromNpCsNumShots': number;
    /**
    * damage_from_players_bomb_amount integer
    */
    'damageFromPlayersBombAmount': number;
    /**
    * damage_from_players_bomb_num_shots integer
    */
    'damageFromPlayersBombNumShots': number;
    /**
    * damage_from_players_combat_drone_amount integer
    */
    'damageFromPlayersCombatDroneAmount': number;
    /**
    * damage_from_players_combat_drone_num_shots integer
    */
    'damageFromPlayersCombatDroneNumShots': number;
    /**
    * damage_from_players_energy_amount integer
    */
    'damageFromPlayersEnergyAmount': number;
    /**
    * damage_from_players_energy_num_shots integer
    */
    'damageFromPlayersEnergyNumShots': number;
    /**
    * damage_from_players_fighter_bomber_amount integer
    */
    'damageFromPlayersFighterBomberAmount': number;
    /**
    * damage_from_players_fighter_bomber_num_shots integer
    */
    'damageFromPlayersFighterBomberNumShots': number;
    /**
    * damage_from_players_fighter_drone_amount integer
    */
    'damageFromPlayersFighterDroneAmount': number;
    /**
    * damage_from_players_fighter_drone_num_shots integer
    */
    'damageFromPlayersFighterDroneNumShots': number;
    /**
    * damage_from_players_hybrid_amount integer
    */
    'damageFromPlayersHybridAmount': number;
    /**
    * damage_from_players_hybrid_num_shots integer
    */
    'damageFromPlayersHybridNumShots': number;
    /**
    * damage_from_players_missile_amount integer
    */
    'damageFromPlayersMissileAmount': number;
    /**
    * damage_from_players_missile_num_shots integer
    */
    'damageFromPlayersMissileNumShots': number;
    /**
    * damage_from_players_projectile_amount integer
    */
    'damageFromPlayersProjectileAmount': number;
    /**
    * damage_from_players_projectile_num_shots integer
    */
    'damageFromPlayersProjectileNumShots': number;
    /**
    * damage_from_players_smart_bomb_amount integer
    */
    'damageFromPlayersSmartBombAmount': number;
    /**
    * damage_from_players_smart_bomb_num_shots integer
    */
    'damageFromPlayersSmartBombNumShots': number;
    /**
    * damage_from_players_super_amount integer
    */
    'damageFromPlayersSuperAmount': number;
    /**
    * damage_from_players_super_num_shots integer
    */
    'damageFromPlayersSuperNumShots': number;
    /**
    * damage_from_structures_total_amount integer
    */
    'damageFromStructuresTotalAmount': number;
    /**
    * damage_from_structures_total_num_shots integer
    */
    'damageFromStructuresTotalNumShots': number;
    /**
    * damage_to_players_bomb_amount integer
    */
    'damageToPlayersBombAmount': number;
    /**
    * damage_to_players_bomb_num_shots integer
    */
    'damageToPlayersBombNumShots': number;
    /**
    * damage_to_players_combat_drone_amount integer
    */
    'damageToPlayersCombatDroneAmount': number;
    /**
    * damage_to_players_combat_drone_num_shots integer
    */
    'damageToPlayersCombatDroneNumShots': number;
    /**
    * damage_to_players_energy_amount integer
    */
    'damageToPlayersEnergyAmount': number;
    /**
    * damage_to_players_energy_num_shots integer
    */
    'damageToPlayersEnergyNumShots': number;
    /**
    * damage_to_players_fighter_bomber_amount integer
    */
    'damageToPlayersFighterBomberAmount': number;
    /**
    * damage_to_players_fighter_bomber_num_shots integer
    */
    'damageToPlayersFighterBomberNumShots': number;
    /**
    * damage_to_players_fighter_drone_amount integer
    */
    'damageToPlayersFighterDroneAmount': number;
    /**
    * damage_to_players_fighter_drone_num_shots integer
    */
    'damageToPlayersFighterDroneNumShots': number;
    /**
    * damage_to_players_hybrid_amount integer
    */
    'damageToPlayersHybridAmount': number;
    /**
    * damage_to_players_hybrid_num_shots integer
    */
    'damageToPlayersHybridNumShots': number;
    /**
    * damage_to_players_missile_amount integer
    */
    'damageToPlayersMissileAmount': number;
    /**
    * damage_to_players_missile_num_shots integer
    */
    'damageToPlayersMissileNumShots': number;
    /**
    * damage_to_players_projectile_amount integer
    */
    'damageToPlayersProjectileAmount': number;
    /**
    * damage_to_players_projectile_num_shots integer
    */
    'damageToPlayersProjectileNumShots': number;
    /**
    * damage_to_players_smart_bomb_amount integer
    */
    'damageToPlayersSmartBombAmount': number;
    /**
    * damage_to_players_smart_bomb_num_shots integer
    */
    'damageToPlayersSmartBombNumShots': number;
    /**
    * damage_to_players_super_amount integer
    */
    'damageToPlayersSuperAmount': number;
    /**
    * damage_to_players_super_num_shots integer
    */
    'damageToPlayersSuperNumShots': number;
    /**
    * damage_to_structures_total_amount integer
    */
    'damageToStructuresTotalAmount': number;
    /**
    * damage_to_structures_total_num_shots integer
    */
    'damageToStructuresTotalNumShots': number;
    /**
    * deaths_high_sec integer
    */
    'deathsHighSec': number;
    /**
    * deaths_low_sec integer
    */
    'deathsLowSec': number;
    /**
    * deaths_null_sec integer
    */
    'deathsNullSec': number;
    /**
    * deaths_pod_high_sec integer
    */
    'deathsPodHighSec': number;
    /**
    * deaths_pod_low_sec integer
    */
    'deathsPodLowSec': number;
    /**
    * deaths_pod_null_sec integer
    */
    'deathsPodNullSec': number;
    /**
    * deaths_pod_wormhole integer
    */
    'deathsPodWormhole': number;
    /**
    * deaths_wormhole integer
    */
    'deathsWormhole': number;
    /**
    * drone_engage integer
    */
    'droneEngage': number;
    /**
    * dscans integer
    */
    'dscans': number;
    /**
    * duel_requested integer
    */
    'duelRequested': number;
    /**
    * engagement_register integer
    */
    'engagementRegister': number;
    /**
    * kills_assists integer
    */
    'killsAssists': number;
    /**
    * kills_high_sec integer
    */
    'killsHighSec': number;
    /**
    * kills_low_sec integer
    */
    'killsLowSec': number;
    /**
    * kills_null_sec integer
    */
    'killsNullSec': number;
    /**
    * kills_pod_high_sec integer
    */
    'killsPodHighSec': number;
    /**
    * kills_pod_low_sec integer
    */
    'killsPodLowSec': number;
    /**
    * kills_pod_null_sec integer
    */
    'killsPodNullSec': number;
    /**
    * kills_pod_wormhole integer
    */
    'killsPodWormhole': number;
    /**
    * kills_wormhole integer
    */
    'killsWormhole': number;
    /**
    * npc_flag_set integer
    */
    'npcFlagSet': number;
    /**
    * probe_scans integer
    */
    'probeScans': number;
    /**
    * pvp_flag_set integer
    */
    'pvpFlagSet': number;
    /**
    * repair_armor_by_remote_amount integer
    */
    'repairArmorByRemoteAmount': number;
    /**
    * repair_armor_remote_amount integer
    */
    'repairArmorRemoteAmount': number;
    /**
    * repair_armor_self_amount integer
    */
    'repairArmorSelfAmount': number;
    /**
    * repair_capacitor_by_remote_amount integer
    */
    'repairCapacitorByRemoteAmount': number;
    /**
    * repair_capacitor_remote_amount integer
    */
    'repairCapacitorRemoteAmount': number;
    /**
    * repair_capacitor_self_amount integer
    */
    'repairCapacitorSelfAmount': number;
    /**
    * repair_hull_by_remote_amount integer
    */
    'repairHullByRemoteAmount': number;
    /**
    * repair_hull_remote_amount integer
    */
    'repairHullRemoteAmount': number;
    /**
    * repair_hull_self_amount integer
    */
    'repairHullSelfAmount': number;
    /**
    * repair_shield_by_remote_amount integer
    */
    'repairShieldByRemoteAmount': number;
    /**
    * repair_shield_remote_amount integer
    */
    'repairShieldRemoteAmount': number;
    /**
    * repair_shield_self_amount integer
    */
    'repairShieldSelfAmount': number;
    /**
    * self_destructs integer
    */
    'selfDestructs': number;
    /**
    * warp_scramble_pc integer
    */
    'warpScramblePc': number;
    /**
    * warp_scrambledby_npc integer
    */
    'warpScrambledbyNpc': number;
    /**
    * warp_scrambledby_pc integer
    */
    'warpScrambledbyPc': number;
    /**
    * weapon_flag_set integer
    */
    'weaponFlagSet': number;
    /**
    * webifiedby_npc integer
    */
    'webifiedbyNpc': number;
    /**
    * webifiedby_pc integer
    */
    'webifiedbyPc': number;
    /**
    * webifying_pc integer
    */
    'webifyingPc': number;
}
/**
* industry object
*/
export declare class GetCharactersCharacterIdStatsIndustry {
    /**
    * hacking_successes integer
    */
    'hackingSuccesses': number;
    /**
    * jobs_cancelled integer
    */
    'jobsCancelled': number;
    /**
    * jobs_completed_copy_blueprint integer
    */
    'jobsCompletedCopyBlueprint': number;
    /**
    * jobs_completed_invention integer
    */
    'jobsCompletedInvention': number;
    /**
    * jobs_completed_manufacture integer
    */
    'jobsCompletedManufacture': number;
    /**
    * jobs_completed_manufacture_asteroid integer
    */
    'jobsCompletedManufactureAsteroid': number;
    /**
    * jobs_completed_manufacture_asteroid_quantity integer
    */
    'jobsCompletedManufactureAsteroidQuantity': number;
    /**
    * jobs_completed_manufacture_charge integer
    */
    'jobsCompletedManufactureCharge': number;
    /**
    * jobs_completed_manufacture_charge_quantity integer
    */
    'jobsCompletedManufactureChargeQuantity': number;
    /**
    * jobs_completed_manufacture_commodity integer
    */
    'jobsCompletedManufactureCommodity': number;
    /**
    * jobs_completed_manufacture_commodity_quantity integer
    */
    'jobsCompletedManufactureCommodityQuantity': number;
    /**
    * jobs_completed_manufacture_deployable integer
    */
    'jobsCompletedManufactureDeployable': number;
    /**
    * jobs_completed_manufacture_deployable_quantity integer
    */
    'jobsCompletedManufactureDeployableQuantity': number;
    /**
    * jobs_completed_manufacture_drone integer
    */
    'jobsCompletedManufactureDrone': number;
    /**
    * jobs_completed_manufacture_drone_quantity integer
    */
    'jobsCompletedManufactureDroneQuantity': number;
    /**
    * jobs_completed_manufacture_implant integer
    */
    'jobsCompletedManufactureImplant': number;
    /**
    * jobs_completed_manufacture_implant_quantity integer
    */
    'jobsCompletedManufactureImplantQuantity': number;
    /**
    * jobs_completed_manufacture_module integer
    */
    'jobsCompletedManufactureModule': number;
    /**
    * jobs_completed_manufacture_module_quantity integer
    */
    'jobsCompletedManufactureModuleQuantity': number;
    /**
    * jobs_completed_manufacture_other integer
    */
    'jobsCompletedManufactureOther': number;
    /**
    * jobs_completed_manufacture_other_quantity integer
    */
    'jobsCompletedManufactureOtherQuantity': number;
    /**
    * jobs_completed_manufacture_ship integer
    */
    'jobsCompletedManufactureShip': number;
    /**
    * jobs_completed_manufacture_ship_quantity integer
    */
    'jobsCompletedManufactureShipQuantity': number;
    /**
    * jobs_completed_manufacture_structure integer
    */
    'jobsCompletedManufactureStructure': number;
    /**
    * jobs_completed_manufacture_structure_quantity integer
    */
    'jobsCompletedManufactureStructureQuantity': number;
    /**
    * jobs_completed_manufacture_subsystem integer
    */
    'jobsCompletedManufactureSubsystem': number;
    /**
    * jobs_completed_manufacture_subsystem_quantity integer
    */
    'jobsCompletedManufactureSubsystemQuantity': number;
    /**
    * jobs_completed_material_productivity integer
    */
    'jobsCompletedMaterialProductivity': number;
    /**
    * jobs_completed_time_productivity integer
    */
    'jobsCompletedTimeProductivity': number;
    /**
    * jobs_started_copy_blueprint integer
    */
    'jobsStartedCopyBlueprint': number;
    /**
    * jobs_started_invention integer
    */
    'jobsStartedInvention': number;
    /**
    * jobs_started_manufacture integer
    */
    'jobsStartedManufacture': number;
    /**
    * jobs_started_material_productivity integer
    */
    'jobsStartedMaterialProductivity': number;
    /**
    * jobs_started_time_productivity integer
    */
    'jobsStartedTimeProductivity': number;
    /**
    * reprocess_item integer
    */
    'reprocessItem': number;
    /**
    * reprocess_item_quantity integer
    */
    'reprocessItemQuantity': number;
}
/**
* inventory object
*/
export declare class GetCharactersCharacterIdStatsInventory {
    /**
    * abandon_loot_quantity integer
    */
    'abandonLootQuantity': number;
    /**
    * trash_item_quantity integer
    */
    'trashItemQuantity': number;
}
/**
* isk object
*/
export declare class GetCharactersCharacterIdStatsIsk {
    /**
    * in integer
    */
    'in': number;
    /**
    * out integer
    */
    'out': number;
}
/**
* market object
*/
export declare class GetCharactersCharacterIdStatsMarket {
    /**
    * accept_contracts_courier integer
    */
    'acceptContractsCourier': number;
    /**
    * accept_contracts_item_exchange integer
    */
    'acceptContractsItemExchange': number;
    /**
    * buy_orders_placed integer
    */
    'buyOrdersPlaced': number;
    /**
    * cancel_market_order integer
    */
    'cancelMarketOrder': number;
    /**
    * create_contracts_auction integer
    */
    'createContractsAuction': number;
    /**
    * create_contracts_courier integer
    */
    'createContractsCourier': number;
    /**
    * create_contracts_item_exchange integer
    */
    'createContractsItemExchange': number;
    /**
    * deliver_courier_contract integer
    */
    'deliverCourierContract': number;
    /**
    * isk_gained integer
    */
    'iskGained': number;
    /**
    * isk_spent integer
    */
    'iskSpent': number;
    /**
    * modify_market_order integer
    */
    'modifyMarketOrder': number;
    /**
    * search_contracts integer
    */
    'searchContracts': number;
    /**
    * sell_orders_placed integer
    */
    'sellOrdersPlaced': number;
}
/**
* mining object
*/
export declare class GetCharactersCharacterIdStatsMining {
    /**
    * drone_mine integer
    */
    'droneMine': number;
    /**
    * ore_arkonor integer
    */
    'oreArkonor': number;
    /**
    * ore_bistot integer
    */
    'oreBistot': number;
    /**
    * ore_crokite integer
    */
    'oreCrokite': number;
    /**
    * ore_dark_ochre integer
    */
    'oreDarkOchre': number;
    /**
    * ore_gneiss integer
    */
    'oreGneiss': number;
    /**
    * ore_harvestable_cloud integer
    */
    'oreHarvestableCloud': number;
    /**
    * ore_hedbergite integer
    */
    'oreHedbergite': number;
    /**
    * ore_hemorphite integer
    */
    'oreHemorphite': number;
    /**
    * ore_ice integer
    */
    'oreIce': number;
    /**
    * ore_jaspet integer
    */
    'oreJaspet': number;
    /**
    * ore_kernite integer
    */
    'oreKernite': number;
    /**
    * ore_mercoxit integer
    */
    'oreMercoxit': number;
    /**
    * ore_omber integer
    */
    'oreOmber': number;
    /**
    * ore_plagioclase integer
    */
    'orePlagioclase': number;
    /**
    * ore_pyroxeres integer
    */
    'orePyroxeres': number;
    /**
    * ore_scordite integer
    */
    'oreScordite': number;
    /**
    * ore_spodumain integer
    */
    'oreSpodumain': number;
    /**
    * ore_veldspar integer
    */
    'oreVeldspar': number;
}
/**
* module object
*/
export declare class GetCharactersCharacterIdStatsModule {
    /**
    * activations_armor_hardener integer
    */
    'activationsArmorHardener': number;
    /**
    * activations_armor_repair_unit integer
    */
    'activationsArmorRepairUnit': number;
    /**
    * activations_armor_resistance_shift_hardener integer
    */
    'activationsArmorResistanceShiftHardener': number;
    /**
    * activations_automated_targeting_system integer
    */
    'activationsAutomatedTargetingSystem': number;
    /**
    * activations_bastion integer
    */
    'activationsBastion': number;
    /**
    * activations_bomb_launcher integer
    */
    'activationsBombLauncher': number;
    /**
    * activations_capacitor_booster integer
    */
    'activationsCapacitorBooster': number;
    /**
    * activations_cargo_scanner integer
    */
    'activationsCargoScanner': number;
    /**
    * activations_cloaking_device integer
    */
    'activationsCloakingDevice': number;
    /**
    * activations_clone_vat_bay integer
    */
    'activationsCloneVatBay': number;
    /**
    * activations_cynosural_field integer
    */
    'activationsCynosuralField': number;
    /**
    * activations_damage_control integer
    */
    'activationsDamageControl': number;
    /**
    * activations_data_miners integer
    */
    'activationsDataMiners': number;
    /**
    * activations_drone_control_unit integer
    */
    'activationsDroneControlUnit': number;
    /**
    * activations_drone_tracking_modules integer
    */
    'activationsDroneTrackingModules': number;
    /**
    * activations_eccm integer
    */
    'activationsEccm': number;
    /**
    * activations_ecm integer
    */
    'activationsEcm': number;
    /**
    * activations_ecm_burst integer
    */
    'activationsEcmBurst': number;
    /**
    * activations_energy_destabilizer integer
    */
    'activationsEnergyDestabilizer': number;
    /**
    * activations_energy_vampire integer
    */
    'activationsEnergyVampire': number;
    /**
    * activations_energy_weapon integer
    */
    'activationsEnergyWeapon': number;
    /**
    * activations_festival_launcher integer
    */
    'activationsFestivalLauncher': number;
    /**
    * activations_frequency_mining_laser integer
    */
    'activationsFrequencyMiningLaser': number;
    /**
    * activations_fueled_armor_repairer integer
    */
    'activationsFueledArmorRepairer': number;
    /**
    * activations_fueled_shield_booster integer
    */
    'activationsFueledShieldBooster': number;
    /**
    * activations_gang_coordinator integer
    */
    'activationsGangCoordinator': number;
    /**
    * activations_gas_cloud_harvester integer
    */
    'activationsGasCloudHarvester': number;
    /**
    * activations_hull_repair_unit integer
    */
    'activationsHullRepairUnit': number;
    /**
    * activations_hybrid_weapon integer
    */
    'activationsHybridWeapon': number;
    /**
    * activations_industrial_core integer
    */
    'activationsIndustrialCore': number;
    /**
    * activations_interdiction_sphere_launcher integer
    */
    'activationsInterdictionSphereLauncher': number;
    /**
    * activations_micro_jump_drive integer
    */
    'activationsMicroJumpDrive': number;
    /**
    * activations_mining_laser integer
    */
    'activationsMiningLaser': number;
    /**
    * activations_missile_launcher integer
    */
    'activationsMissileLauncher': number;
    /**
    * activations_passive_targeting_system integer
    */
    'activationsPassiveTargetingSystem': number;
    /**
    * activations_probe_launcher integer
    */
    'activationsProbeLauncher': number;
    /**
    * activations_projected_eccm integer
    */
    'activationsProjectedEccm': number;
    /**
    * activations_projectile_weapon integer
    */
    'activationsProjectileWeapon': number;
    /**
    * activations_propulsion_module integer
    */
    'activationsPropulsionModule': number;
    /**
    * activations_remote_armor_repairer integer
    */
    'activationsRemoteArmorRepairer': number;
    /**
    * activations_remote_capacitor_transmitter integer
    */
    'activationsRemoteCapacitorTransmitter': number;
    /**
    * activations_remote_ecm_burst integer
    */
    'activationsRemoteEcmBurst': number;
    /**
    * activations_remote_hull_repairer integer
    */
    'activationsRemoteHullRepairer': number;
    /**
    * activations_remote_sensor_booster integer
    */
    'activationsRemoteSensorBooster': number;
    /**
    * activations_remote_sensor_damper integer
    */
    'activationsRemoteSensorDamper': number;
    /**
    * activations_remote_shield_booster integer
    */
    'activationsRemoteShieldBooster': number;
    /**
    * activations_remote_tracking_computer integer
    */
    'activationsRemoteTrackingComputer': number;
    /**
    * activations_salvager integer
    */
    'activationsSalvager': number;
    /**
    * activations_sensor_booster integer
    */
    'activationsSensorBooster': number;
    /**
    * activations_shield_booster integer
    */
    'activationsShieldBooster': number;
    /**
    * activations_shield_hardener integer
    */
    'activationsShieldHardener': number;
    /**
    * activations_ship_scanner integer
    */
    'activationsShipScanner': number;
    /**
    * activations_siege integer
    */
    'activationsSiege': number;
    /**
    * activations_smart_bomb integer
    */
    'activationsSmartBomb': number;
    /**
    * activations_stasis_web integer
    */
    'activationsStasisWeb': number;
    /**
    * activations_strip_miner integer
    */
    'activationsStripMiner': number;
    /**
    * activations_super_weapon integer
    */
    'activationsSuperWeapon': number;
    /**
    * activations_survey_scanner integer
    */
    'activationsSurveyScanner': number;
    /**
    * activations_target_breaker integer
    */
    'activationsTargetBreaker': number;
    /**
    * activations_target_painter integer
    */
    'activationsTargetPainter': number;
    /**
    * activations_tracking_computer integer
    */
    'activationsTrackingComputer': number;
    /**
    * activations_tracking_disruptor integer
    */
    'activationsTrackingDisruptor': number;
    /**
    * activations_tractor_beam integer
    */
    'activationsTractorBeam': number;
    /**
    * activations_triage integer
    */
    'activationsTriage': number;
    /**
    * activations_warp_disrupt_field_generator integer
    */
    'activationsWarpDisruptFieldGenerator': number;
    /**
    * activations_warp_scrambler integer
    */
    'activationsWarpScrambler': number;
    /**
    * link_weapons integer
    */
    'linkWeapons': number;
    /**
    * overload integer
    */
    'overload': number;
    /**
    * repairs integer
    */
    'repairs': number;
}
/**
* orbital object
*/
export declare class GetCharactersCharacterIdStatsOrbital {
    /**
    * strike_characters_killed integer
    */
    'strikeCharactersKilled': number;
    /**
    * strike_damage_to_players_armor_amount integer
    */
    'strikeDamageToPlayersArmorAmount': number;
    /**
    * strike_damage_to_players_shield_amount integer
    */
    'strikeDamageToPlayersShieldAmount': number;
}
/**
* pve object
*/
export declare class GetCharactersCharacterIdStatsPve {
    /**
    * dungeons_completed_agent integer
    */
    'dungeonsCompletedAgent': number;
    /**
    * dungeons_completed_distribution integer
    */
    'dungeonsCompletedDistribution': number;
    /**
    * missions_succeeded integer
    */
    'missionsSucceeded': number;
    /**
    * missions_succeeded_epic_arc integer
    */
    'missionsSucceededEpicArc': number;
}
/**
* social object
*/
export declare class GetCharactersCharacterIdStatsSocial {
    /**
    * add_contact_bad integer
    */
    'addContactBad': number;
    /**
    * add_contact_good integer
    */
    'addContactGood': number;
    /**
    * add_contact_high integer
    */
    'addContactHigh': number;
    /**
    * add_contact_horrible integer
    */
    'addContactHorrible': number;
    /**
    * add_contact_neutral integer
    */
    'addContactNeutral': number;
    /**
    * add_note integer
    */
    'addNote': number;
    /**
    * added_as_contact_bad integer
    */
    'addedAsContactBad': number;
    /**
    * added_as_contact_good integer
    */
    'addedAsContactGood': number;
    /**
    * added_as_contact_high integer
    */
    'addedAsContactHigh': number;
    /**
    * added_as_contact_horrible integer
    */
    'addedAsContactHorrible': number;
    /**
    * added_as_contact_neutral integer
    */
    'addedAsContactNeutral': number;
    /**
    * calendar_event_created integer
    */
    'calendarEventCreated': number;
    /**
    * chat_messages_alliance integer
    */
    'chatMessagesAlliance': number;
    /**
    * chat_messages_constellation integer
    */
    'chatMessagesConstellation': number;
    /**
    * chat_messages_corporation integer
    */
    'chatMessagesCorporation': number;
    /**
    * chat_messages_fleet integer
    */
    'chatMessagesFleet': number;
    /**
    * chat_messages_region integer
    */
    'chatMessagesRegion': number;
    /**
    * chat_messages_solarsystem integer
    */
    'chatMessagesSolarsystem': number;
    /**
    * chat_messages_warfaction integer
    */
    'chatMessagesWarfaction': number;
    /**
    * chat_total_message_length integer
    */
    'chatTotalMessageLength': number;
    /**
    * direct_trades integer
    */
    'directTrades': number;
    /**
    * fleet_broadcasts integer
    */
    'fleetBroadcasts': number;
    /**
    * fleet_joins integer
    */
    'fleetJoins': number;
    /**
    * mails_received integer
    */
    'mailsReceived': number;
    /**
    * mails_sent integer
    */
    'mailsSent': number;
}
/**
* travel object
*/
export declare class GetCharactersCharacterIdStatsTravel {
    /**
    * acceleration_gate_activations integer
    */
    'accelerationGateActivations': number;
    /**
    * align_to integer
    */
    'alignTo': number;
    /**
    * distance_warped_high_sec integer
    */
    'distanceWarpedHighSec': number;
    /**
    * distance_warped_low_sec integer
    */
    'distanceWarpedLowSec': number;
    /**
    * distance_warped_null_sec integer
    */
    'distanceWarpedNullSec': number;
    /**
    * distance_warped_wormhole integer
    */
    'distanceWarpedWormhole': number;
    /**
    * docks_high_sec integer
    */
    'docksHighSec': number;
    /**
    * docks_low_sec integer
    */
    'docksLowSec': number;
    /**
    * docks_null_sec integer
    */
    'docksNullSec': number;
    /**
    * jumps_stargate_high_sec integer
    */
    'jumpsStargateHighSec': number;
    /**
    * jumps_stargate_low_sec integer
    */
    'jumpsStargateLowSec': number;
    /**
    * jumps_stargate_null_sec integer
    */
    'jumpsStargateNullSec': number;
    /**
    * jumps_wormhole integer
    */
    'jumpsWormhole': number;
    /**
    * warps_high_sec integer
    */
    'warpsHighSec': number;
    /**
    * warps_low_sec integer
    */
    'warpsLowSec': number;
    /**
    * warps_null_sec integer
    */
    'warpsNullSec': number;
    /**
    * warps_to_bookmark integer
    */
    'warpsToBookmark': number;
    /**
    * warps_to_celestial integer
    */
    'warpsToCelestial': number;
    /**
    * warps_to_fleet_member integer
    */
    'warpsToFleetMember': number;
    /**
    * warps_to_scan_result integer
    */
    'warpsToScanResult': number;
    /**
    * warps_wormhole integer
    */
    'warpsWormhole': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdTitles200Ok {
    /**
    * title_id integer
    */
    'titleId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdWalletJournal200Ok {
    /**
    * Date and time of transaction
    */
    'date': Date;
    /**
    * Unique journal reference ID
    */
    'refId': number;
    /**
    * Transaction type, different type of transaction will populate different fields in `extra_info` Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can use the following gist to see string->int mappings: https://gist.github.com/ccp-zoetrope/c03db66d90c2148724c06171bc52e0ec
    */
    'refType': GetCharactersCharacterIdWalletJournal200Ok.RefTypeEnum;
    /**
    * first_party_id integer
    */
    'firstPartyId': number;
    /**
    * first_party_type string
    */
    'firstPartyType': GetCharactersCharacterIdWalletJournal200Ok.FirstPartyTypeEnum;
    /**
    * second_party_id integer
    */
    'secondPartyId': number;
    /**
    * second_party_type string
    */
    'secondPartyType': GetCharactersCharacterIdWalletJournal200Ok.SecondPartyTypeEnum;
    /**
    * Transaction amount. Positive when value transferred to the first party. Negative otherwise
    */
    'amount': number;
    /**
    * Wallet balance after transaction occurred
    */
    'balance': number;
    /**
    * reason string
    */
    'reason': string;
    /**
    * the corporation ID receiving any tax paid
    */
    'taxReceiverId': number;
    /**
    * Tax amount received for tax related transactions
    */
    'tax': number;
    'extraInfo': GetCharactersCharacterIdWalletJournalExtraInfo;
}
export declare namespace GetCharactersCharacterIdWalletJournal200Ok {
    enum RefTypeEnum {
        AccelerationGateFee,
        AdvertisementListingFee,
        AgentDonation,
        AgentLocationServices,
        AgentMiscellaneous,
        AgentMissionCollateralPaid,
        AgentMissionCollateralRefunded,
        AgentMissionReward,
        AgentMissionRewardCorporationTax,
        AgentMissionTimeBonusReward,
        AgentMissionTimeBonusRewardCorporationTax,
        AgentSecurityServices,
        AgentServicesRendered,
        AgentsPreward,
        AllianceMaintainanceFee,
        AllianceRegistrationFee,
        AssetSafetyRecoveryTax,
        Bounty,
        BountyPrize,
        BountyPrizeCorporationTax,
        BountyPrizes,
        BountyReimbursement,
        BountySurcharge,
        BrokersFee,
        CloneActivation,
        CloneTransfer,
        ContrabandFine,
        ContractAuctionBid,
        ContractAuctionBidCorp,
        ContractAuctionBidRefund,
        ContractAuctionSold,
        ContractBrokersFee,
        ContractBrokersFeeCorp,
        ContractCollateral,
        ContractCollateralDepositedCorp,
        ContractCollateralPayout,
        ContractCollateralRefund,
        ContractDeposit,
        ContractDepositCorp,
        ContractDepositRefund,
        ContractDepositSalesTax,
        ContractPrice,
        ContractPricePaymentCorp,
        ContractReversal,
        ContractReward,
        ContractRewardDeposited,
        ContractRewardDepositedCorp,
        ContractRewardRefund,
        ContractSalesTax,
        Copying,
        CorporateRewardPayout,
        CorporateRewardTax,
        CorporationAccountWithdrawal,
        CorporationBulkPayment,
        CorporationDividendPayment,
        CorporationLiquidation,
        CorporationLogoChangeCost,
        CorporationPayment,
        CorporationRegistrationFee,
        CourierMissionEscrow,
        Cspa,
        Cspaofflinerefund,
        DatacoreFee,
        DnaModificationFee,
        DockingFee,
        DuelWagerEscrow,
        DuelWagerPayment,
        DuelWagerRefund,
        FactorySlotRentalFee,
        GmCashTransfer,
        IndustryJobTax,
        InfrastructureHubMaintenance,
        Inheritance,
        Insurance,
        JumpCloneActivationFee,
        JumpCloneInstallationFee,
        KillRightFee,
        LpStore,
        Manufacturing,
        MarketEscrow,
        MarketFinePaid,
        MarketTransaction,
        MedalCreation,
        MedalIssued,
        MissionCompletion,
        MissionCost,
        MissionExpiration,
        MissionReward,
        OfficeRentalFee,
        OperationBonus,
        OpportunityReward,
        PlanetaryConstruction,
        PlanetaryExportTax,
        PlanetaryImportTax,
        PlayerDonation,
        PlayerTrading,
        ProjectDiscoveryReward,
        ProjectDiscoveryTax,
        Reaction,
        ReleaseOfImpoundedProperty,
        RepairBill,
        ReprocessingTax,
        ResearchingMaterialProductivity,
        ResearchingTechnology,
        ResearchingTimeProductivity,
        ResourceWarsReward,
        ReverseEngineering,
        SecurityProcessingFee,
        Shares,
        SovereignityBill,
        StorePurchase,
        StorePurchaseRefund,
        TransactionTax,
        UpkeepAdjustmentFee,
        WarAllyContract,
        WarFee,
        WarFeeSurrender,
    }
    enum FirstPartyTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
        System,
    }
    enum SecondPartyTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
        System,
    }
}
/**
* Extra information for different type of transaction
*/
export declare class GetCharactersCharacterIdWalletJournalExtraInfo {
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * transaction_id integer
    */
    'transactionId': number;
    /**
    * npc_name string
    */
    'npcName': string;
    /**
    * npc_id integer
    */
    'npcId': number;
    /**
    * destroyed_ship_type_id integer
    */
    'destroyedShipTypeId': number;
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * job_id integer
    */
    'jobId': number;
    /**
    * contract_id integer
    */
    'contractId': number;
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * planet_id integer
    */
    'planetId': number;
}
/**
* wallet transaction
*/
export declare class GetCharactersCharacterIdWalletTransactions200Ok {
    /**
    * Unique transaction ID
    */
    'transactionId': number;
    /**
    * Date and time of transaction
    */
    'date': Date;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * Amount paid per unit
    */
    'unitPrice': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * client_id integer
    */
    'clientId': number;
    /**
    * is_buy boolean
    */
    'isBuy': boolean;
    /**
    * is_personal boolean
    */
    'isPersonal': boolean;
    /**
    * journal_ref_id integer
    */
    'journalRefId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersNames200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * character_name string
    */
    'characterName': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationCorporationIdMiningExtractions200Ok {
    /**
    * structure_id integer
    */
    'structureId': number;
    /**
    * moon_id integer
    */
    'moonId': number;
    /**
    * The time at which the current extraction was initiated.
    */
    'extractionStartTime': Date;
    /**
    * The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.
    */
    'chunkArrivalTime': Date;
    /**
    * The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.
    */
    'naturalDecayTime': Date;
}
/**
* 200 ok object
*/
export declare class GetCorporationCorporationIdMiningObservers200Ok {
    /**
    * last_updated string
    */
    'lastUpdated': Date;
    /**
    * The entity that was observing the asteroid field when it was mined.
    */
    'observerId': number;
    /**
    * The category of the observing entity
    */
    'observerType': GetCorporationCorporationIdMiningObservers200Ok.ObserverTypeEnum;
}
export declare namespace GetCorporationCorporationIdMiningObservers200Ok {
    enum ObserverTypeEnum {
        Structure,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationCorporationIdMiningObserversObserverId200Ok {
    /**
    * last_updated string
    */
    'lastUpdated': Date;
    /**
    * The character that did the mining
    */
    'characterId': number;
    /**
    * The corporation id of the character at the time data was recorded.
    */
    'recordedCorporationId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdAlliancehistory200Ok {
    /**
    * start_date string
    */
    'startDate': Date;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * True if the alliance has been closed
    */
    'isDeleted': boolean;
    /**
    * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
    */
    'recordId': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdAssets200Ok {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCorporationsCorporationIdAssets200Ok.LocationTypeEnum;
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * location_flag string
    */
    'locationFlag': GetCorporationsCorporationIdAssets200Ok.LocationFlagEnum;
    /**
    * is_singleton boolean
    */
    'isSingleton': boolean;
}
export declare namespace GetCorporationsCorporationIdAssets200Ok {
    enum LocationTypeEnum {
        Station,
        SolarSystem,
        Other,
    }
    enum LocationFlagEnum {
        AssetSafety,
        AutoFit,
        Bonus,
        Booster,
        BoosterBay,
        Capsule,
        Cargo,
        CorpDeliveries,
        CorpSAG1,
        CorpSAG2,
        CorpSAG3,
        CorpSAG4,
        CorpSAG5,
        CorpSAG6,
        CorpSAG7,
        CrateLoot,
        Deliveries,
        DroneBay,
        DustBattle,
        DustDatabank,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        FleetHangar,
        Hangar,
        HangarAll,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        HiddenModifers,
        Implant,
        Impounded,
        JunkyardReprocessed,
        JunkyardTrashed,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        Locked,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        OfficeFolder,
        Pilot,
        PlanetSurface,
        QuafeBay,
        Reward,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        SecondaryStorage,
        ServiceSlot0,
        ServiceSlot1,
        ServiceSlot2,
        ServiceSlot3,
        ServiceSlot4,
        ServiceSlot5,
        ServiceSlot6,
        ServiceSlot7,
        ShipHangar,
        ShipOffline,
        Skill,
        SkillInTraining,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedFuelBay,
        SpecializedGasHold,
        SpecializedIndustrialShipHold,
        SpecializedLargeShipHold,
        SpecializedMaterialBay,
        SpecializedMediumShipHold,
        SpecializedMineralHold,
        SpecializedOreHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        StructureActive,
        StructureFuel,
        StructureInactive,
        StructureOffline,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        SubsystemBay,
        Unlocked,
        Wallet,
        Wardrobe,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdBlueprints200Ok {
    /**
    * Unique ID for this item.
    */
    'itemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * References a solar system, station or item_id if this blueprint is located within a container.
    */
    'locationId': number;
    /**
    * Type of the location_id
    */
    'locationFlag': GetCorporationsCorporationIdBlueprints200Ok.LocationFlagEnum;
    /**
    * A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
    */
    'quantity': number;
    /**
    * Time Efficiency Level of the blueprint.
    */
    'timeEfficiency': number;
    /**
    * Material Efficiency Level of the blueprint.
    */
    'materialEfficiency': number;
    /**
    * Number of runs remaining if the blueprint is a copy, -1 if it is an original.
    */
    'runs': number;
}
export declare namespace GetCorporationsCorporationIdBlueprints200Ok {
    enum LocationFlagEnum {
        AssetSafety,
        AutoFit,
        Bonus,
        Booster,
        BoosterBay,
        Capsule,
        Cargo,
        CorpDeliveries,
        CorpSAG1,
        CorpSAG2,
        CorpSAG3,
        CorpSAG4,
        CorpSAG5,
        CorpSAG6,
        CorpSAG7,
        CrateLoot,
        Deliveries,
        DroneBay,
        DustBattle,
        DustDatabank,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        FleetHangar,
        Hangar,
        HangarAll,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        HiddenModifers,
        Implant,
        Impounded,
        JunkyardReprocessed,
        JunkyardTrashed,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        Locked,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        OfficeFolder,
        Pilot,
        PlanetSurface,
        QuafeBay,
        Reward,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        SecondaryStorage,
        ServiceSlot0,
        ServiceSlot1,
        ServiceSlot2,
        ServiceSlot3,
        ServiceSlot4,
        ServiceSlot5,
        ServiceSlot6,
        ServiceSlot7,
        ShipHangar,
        ShipOffline,
        Skill,
        SkillInTraining,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedFuelBay,
        SpecializedGasHold,
        SpecializedIndustrialShipHold,
        SpecializedLargeShipHold,
        SpecializedMaterialBay,
        SpecializedMediumShipHold,
        SpecializedMineralHold,
        SpecializedOreHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        StructureActive,
        StructureFuel,
        StructureInactive,
        StructureOffline,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        SubsystemBay,
        Unlocked,
        Wallet,
        Wardrobe,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdBookmarks200Ok {
    /**
    * bookmark_id integer
    */
    'bookmarkId': number;
    /**
    * creator_id integer
    */
    'creatorId': number;
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * created string
    */
    'created': Date;
    /**
    * label string
    */
    'label': string;
    /**
    * notes string
    */
    'notes': string;
    /**
    * location_id integer
    */
    'locationId': number;
    'item': GetCorporationsCorporationIdBookmarksItem;
    'coordinates': GetCorporationsCorporationIdBookmarksCoordinates;
}
/**
* Optional object that is returned if a bookmark was made on a planet or a random location in space.
*/
export declare class GetCorporationsCorporationIdBookmarksCoordinates {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdBookmarksFolders200Ok {
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * creator_id integer
    */
    'creatorId': number;
}
/**
* Optional object that is returned if a bookmark was made on a particular item.
*/
export declare class GetCorporationsCorporationIdBookmarksItem {
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdContacts200Ok {
    /**
    * Standing of the contact
    */
    'standing': number;
    /**
    * contact_type string
    */
    'contactType': GetCorporationsCorporationIdContacts200Ok.ContactTypeEnum;
    /**
    * contact_id integer
    */
    'contactId': number;
    /**
    * Whether this contact is being watched
    */
    'isWatched': boolean;
    /**
    * Custom label of the contact
    */
    'labelId': number;
}
export declare namespace GetCorporationsCorporationIdContacts200Ok {
    enum ContactTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdContainersLogs200Ok {
    /**
    * Timestamp when this log was created
    */
    'loggedAt': Date;
    /**
    * ID of the container
    */
    'containerId': number;
    /**
    * Type ID of the container
    */
    'containerTypeId': number;
    /**
    * ID of the character who performed the action.
    */
    'characterId': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_flag string
    */
    'locationFlag': GetCorporationsCorporationIdContainersLogs200Ok.LocationFlagEnum;
    /**
    * action string
    */
    'action': GetCorporationsCorporationIdContainersLogs200Ok.ActionEnum;
    /**
    * Type of password set if action is of type SetPassword or EnterPassword
    */
    'passwordType': GetCorporationsCorporationIdContainersLogs200Ok.PasswordTypeEnum;
    /**
    * Type ID of the item being acted upon
    */
    'typeId': number;
    /**
    * Quantity of the item being acted upon
    */
    'quantity': number;
    /**
    * old_config_bitmask integer
    */
    'oldConfigBitmask': number;
    /**
    * new_config_bitmask integer
    */
    'newConfigBitmask': number;
}
export declare namespace GetCorporationsCorporationIdContainersLogs200Ok {
    enum LocationFlagEnum {
        AssetSafety,
        AutoFit,
        Bonus,
        Booster,
        BoosterBay,
        Capsule,
        Cargo,
        CorpDeliveries,
        CorpSAG1,
        CorpSAG2,
        CorpSAG3,
        CorpSAG4,
        CorpSAG5,
        CorpSAG6,
        CorpSAG7,
        CrateLoot,
        Deliveries,
        DroneBay,
        DustBattle,
        DustDatabank,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        FleetHangar,
        Hangar,
        HangarAll,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        HiddenModifers,
        Implant,
        Impounded,
        JunkyardReprocessed,
        JunkyardTrashed,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        Locked,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        OfficeFolder,
        Pilot,
        PlanetSurface,
        QuafeBay,
        Reward,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        SecondaryStorage,
        ServiceSlot0,
        ServiceSlot1,
        ServiceSlot2,
        ServiceSlot3,
        ServiceSlot4,
        ServiceSlot5,
        ServiceSlot6,
        ServiceSlot7,
        ShipHangar,
        ShipOffline,
        Skill,
        SkillInTraining,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedFuelBay,
        SpecializedGasHold,
        SpecializedIndustrialShipHold,
        SpecializedLargeShipHold,
        SpecializedMaterialBay,
        SpecializedMediumShipHold,
        SpecializedMineralHold,
        SpecializedOreHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        StructureActive,
        StructureFuel,
        StructureInactive,
        StructureOffline,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        SubsystemBay,
        Unlocked,
        Wallet,
        Wardrobe,
    }
    enum ActionEnum {
        Add,
        Assemble,
        Configure,
        EnterPassword,
        Lock,
        Move,
        Repackage,
        SetName,
        SetPassword,
        Unlock,
    }
    enum PasswordTypeEnum {
        Config,
        General,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdContracts200Ok {
    /**
    * contract_id integer
    */
    'contractId': number;
    /**
    * Character ID for the issuer
    */
    'issuerId': number;
    /**
    * Character's corporation ID for the issuer
    */
    'issuerCorporationId': number;
    /**
    * ID to whom the contract is assigned, can be corporation or character ID
    */
    'assigneeId': number;
    /**
    * Who will accept the contract
    */
    'acceptorId': number;
    /**
    * Start location ID (for Couriers contract)
    */
    'startLocationId': number;
    /**
    * End location ID (for Couriers contract)
    */
    'endLocationId': number;
    /**
    * Type of the contract
    */
    'type': GetCorporationsCorporationIdContracts200Ok.TypeEnum;
    /**
    * Status of the the contract
    */
    'status': GetCorporationsCorporationIdContracts200Ok.StatusEnum;
    /**
    * Title of the contract
    */
    'title': string;
    /**
    * true if the contract was issued on behalf of the issuer's corporation
    */
    'forCorporation': boolean;
    /**
    * To whom the contract is available
    */
    'availability': GetCorporationsCorporationIdContracts200Ok.AvailabilityEnum;
    /**
    * Сreation date of the contract
    */
    'dateIssued': Date;
    /**
    * Expiration date of the contract
    */
    'dateExpired': Date;
    /**
    * Date of confirmation of contract
    */
    'dateAccepted': Date;
    /**
    * Number of days to perform the contract
    */
    'daysToComplete': number;
    /**
    * Date of completed of contract
    */
    'dateCompleted': Date;
    /**
    * Price of contract (for ItemsExchange and Auctions)
    */
    'price': number;
    /**
    * Remuneration for contract (for Couriers only)
    */
    'reward': number;
    /**
    * Collateral price (for Couriers only)
    */
    'collateral': number;
    /**
    * Buyout price (for Auctions only)
    */
    'buyout': number;
    /**
    * Volume of items in the contract
    */
    'volume': number;
}
export declare namespace GetCorporationsCorporationIdContracts200Ok {
    enum TypeEnum {
        Unknown,
        ItemExchange,
        Auction,
        Courier,
        Loan,
    }
    enum StatusEnum {
        Outstanding,
        InProgress,
        FinishedIssuer,
        FinishedContractor,
        Finished,
        Cancelled,
        Rejected,
        Failed,
        Deleted,
        Reversed,
    }
    enum AvailabilityEnum {
        Public,
        Personal,
        Corporation,
        Alliance,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdContractsContractIdBids200Ok {
    /**
    * Unique ID for the bid
    */
    'bidId': number;
    /**
    * Character ID of the bidder
    */
    'bidderId': number;
    /**
    * Datetime when the bid was placed
    */
    'dateBid': Date;
    /**
    * The amount bid, in ISK
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdContractsContractIdItems200Ok {
    /**
    * Unique ID for the item
    */
    'recordId': number;
    /**
    * Type ID for item
    */
    'typeId': number;
    /**
    * Number of items in the stack
    */
    'quantity': number;
    /**
    * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
    */
    'rawQuantity': number;
    /**
    * is_singleton boolean
    */
    'isSingleton': boolean;
    /**
    * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract.
    */
    'isIncluded': boolean;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdCustomsOffices200Ok {
    /**
    * unique ID of this customs office
    */
    'officeId': number;
    /**
    * ID of the solar system this customs office is located in
    */
    'systemId': number;
    /**
    * Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
    */
    'reinforceExitStart': number;
    /**
    * reinforce_exit_end integer
    */
    'reinforceExitEnd': number;
    /**
    * corporation_tax_rate number
    */
    'corporationTaxRate': number;
    /**
    * allow_alliance_access boolean
    */
    'allowAllianceAccess': boolean;
    /**
    * Only present if alliance access is allowed
    */
    'allianceTaxRate': number;
    /**
    * standing_level and any standing related tax rate only present when this is true
    */
    'allowAccessWithStandings': boolean;
    /**
    * Access is allowed only for entities with this level of standing or better
    */
    'standingLevel': GetCorporationsCorporationIdCustomsOffices200Ok.StandingLevelEnum;
    /**
    * Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
    */
    'excellentStandingTaxRate': number;
    /**
    * good_standing_tax_rate number
    */
    'goodStandingTaxRate': number;
    /**
    * neutral_standing_tax_rate number
    */
    'neutralStandingTaxRate': number;
    /**
    * bad_standing_tax_rate number
    */
    'badStandingTaxRate': number;
    /**
    * terrible_standing_tax_rate number
    */
    'terribleStandingTaxRate': number;
}
export declare namespace GetCorporationsCorporationIdCustomsOffices200Ok {
    enum StandingLevelEnum {
        Bad,
        Excellent,
        Good,
        Neutral,
        Terrible,
    }
}
/**
* hangar object
*/
export declare class GetCorporationsCorporationIdDivisionsHangar {
    /**
    * division integer
    */
    'division': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdDivisionsOk {
    /**
    * hangar array
    */
    'hangar': Array<GetCorporationsCorporationIdDivisionsHangar>;
    /**
    * wallet array
    */
    'wallet': Array<GetCorporationsCorporationIdDivisionsWallet>;
}
/**
* wallet object
*/
export declare class GetCorporationsCorporationIdDivisionsWallet {
    /**
    * division integer
    */
    'division': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdFacilities200Ok {
    /**
    * facility_id integer
    */
    'facilityId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * system_id integer
    */
    'systemId': number;
}
/**
* Summary of kills done by the given corporation against enemy factions
*/
export declare class GetCorporationsCorporationIdFwStatsKills {
    /**
    * Yesterday's total number of kills by members of the given corporation against enemy factions
    */
    'yesterday': number;
    /**
    * Last week's total number of kills by members of the given corporation against enemy factions
    */
    'lastWeek': number;
    /**
    * Total number of kills by members of the given corporation against enemy factions since the corporation enlisted
    */
    'total': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdFwStatsOk {
    /**
    * The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
    */
    'factionId': number;
    /**
    * The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
    */
    'enlistedOn': Date;
    /**
    * How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
    */
    'pilots': number;
    'kills': GetCorporationsCorporationIdFwStatsKills;
    'victoryPoints': GetCorporationsCorporationIdFwStatsVictoryPoints;
}
/**
* Summary of victory points gained by the given corporation for the enlisted faction
*/
export declare class GetCorporationsCorporationIdFwStatsVictoryPoints {
    /**
    * Yesterday's victory points gained by members of the given corporation
    */
    'yesterday': number;
    /**
    * Last week's victory points gained by members of the given corporation
    */
    'lastWeek': number;
    /**
    * Total victory points gained since the given corporation enlisted
    */
    'total': number;
}
/**
* No image server for this datasource
*/
export declare class GetCorporationsCorporationIdIconsNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdIconsOk {
    /**
    * px64x64 string
    */
    'px64x64': string;
    /**
    * px128x128 string
    */
    'px128x128': string;
    /**
    * px256x256 string
    */
    'px256x256': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdIndustryJobs200Ok {
    /**
    * Unique job ID
    */
    'jobId': number;
    /**
    * ID of the character which installed this job
    */
    'installerId': number;
    /**
    * ID of the facility where this job is running
    */
    'facilityId': number;
    /**
    * ID of the location for the industry facility
    */
    'locationId': number;
    /**
    * Job activity ID
    */
    'activityId': number;
    /**
    * blueprint_id integer
    */
    'blueprintId': number;
    /**
    * blueprint_type_id integer
    */
    'blueprintTypeId': number;
    /**
    * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
    */
    'blueprintLocationId': number;
    /**
    * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
    */
    'outputLocationId': number;
    /**
    * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
    */
    'runs': number;
    /**
    * The sume of job installation fee and industry facility tax
    */
    'cost': number;
    /**
    * Number of runs blueprint is licensed for
    */
    'licensedRuns': number;
    /**
    * Chance of success for invention
    */
    'probability': number;
    /**
    * Type ID of product (manufactured, copied or invented)
    */
    'productTypeId': number;
    /**
    * status string
    */
    'status': GetCorporationsCorporationIdIndustryJobs200Ok.StatusEnum;
    /**
    * Job duration in seconds
    */
    'duration': number;
    /**
    * Date and time when this job started
    */
    'startDate': Date;
    /**
    * Date and time when this job finished
    */
    'endDate': Date;
    /**
    * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
    */
    'pauseDate': Date;
    /**
    * Date and time when this job was completed
    */
    'completedDate': Date;
    /**
    * ID of the character which completed this job
    */
    'completedCharacterId': number;
    /**
    * Number of successful runs for this job. Equal to runs unless this is an invention job
    */
    'successfulRuns': number;
}
export declare namespace GetCorporationsCorporationIdIndustryJobs200Ok {
    enum StatusEnum {
        Active,
        Cancelled,
        Delivered,
        Paused,
        Ready,
        Reverted,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdKillmailsRecent200Ok {
    /**
    * ID of this killmail
    */
    'killmailId': number;
    /**
    * A hash of this killmail
    */
    'killmailHash': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdMedals200Ok {
    /**
    * medal_id integer
    */
    'medalId': number;
    /**
    * title string
    */
    'title': string;
    /**
    * description string
    */
    'description': string;
    /**
    * ID of the character who created this medal
    */
    'creatorId': number;
    /**
    * created_at string
    */
    'createdAt': Date;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdMedalsIssued200Ok {
    /**
    * medal_id integer
    */
    'medalId': number;
    /**
    * ID of the character who was rewarded this medal
    */
    'characterId': number;
    /**
    * reason string
    */
    'reason': string;
    /**
    * status string
    */
    'status': GetCorporationsCorporationIdMedalsIssued200Ok.StatusEnum;
    /**
    * ID of the character who issued the medal
    */
    'issuerId': number;
    /**
    * issued_at string
    */
    'issuedAt': Date;
}
export declare namespace GetCorporationsCorporationIdMedalsIssued200Ok {
    enum StatusEnum {
        Private,
        Public,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdMembersTitles200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * A list of title_id
    */
    'titles': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdMembertracking200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * start_date string
    */
    'startDate': Date;
    /**
    * base_id integer
    */
    'baseId': number;
    /**
    * logon_date string
    */
    'logonDate': Date;
    /**
    * logoff_date string
    */
    'logoffDate': Date;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
}
/**
* Not found
*/
export declare class GetCorporationsCorporationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdOk {
    /**
    * the full name of the corporation
    */
    'name': string;
    /**
    * the short name of the corporation
    */
    'ticker': string;
    /**
    * member_count integer
    */
    'memberCount': number;
    /**
    * ceo_id integer
    */
    'ceoId': number;
    /**
    * ID of the alliance that corporation is a member of, if any
    */
    'allianceId': number;
    /**
    * description string
    */
    'description': string;
    /**
    * tax_rate number
    */
    'taxRate': number;
    /**
    * date_founded string
    */
    'dateFounded': Date;
    /**
    * creator_id integer
    */
    'creatorId': number;
    /**
    * url string
    */
    'url': string;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * home_station_id integer
    */
    'homeStationId': number;
    /**
    * shares integer
    */
    'shares': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdOrders200Ok {
    /**
    * Unique order ID
    */
    'orderId': number;
    /**
    * The type ID of the item transacted in this order
    */
    'typeId': number;
    /**
    * ID of the region where order was placed
    */
    'regionId': number;
    /**
    * ID of the location where order was placed
    */
    'locationId': number;
    /**
    * Valid order range, numbers are ranges in jumps
    */
    'range': GetCorporationsCorporationIdOrders200Ok.RangeEnum;
    /**
    * True for a bid (buy) order. False for an offer (sell) order
    */
    'isBuyOrder': boolean;
    /**
    * Cost per unit for this order
    */
    'price': number;
    /**
    * Quantity of items required or offered at time order was placed
    */
    'volumeTotal': number;
    /**
    * Quantity of items still required or offered
    */
    'volumeRemain': number;
    /**
    * Date and time when this order was issued
    */
    'issued': Date;
    /**
    * Current order state
    */
    'state': GetCorporationsCorporationIdOrders200Ok.StateEnum;
    /**
    * For bids (buy orders), the minimum quantity that will be accepted in a matching offer (sell order)
    */
    'minVolume': number;
    /**
    * Wallet division of which this order used
    */
    'walletDivision': number;
    /**
    * Numer of days for which order is valid (starting from the issued date). An order expires at time issued + duration
    */
    'duration': number;
    /**
    * For buy orders, the amount of ISK in escrow
    */
    'escrow': number;
}
export declare namespace GetCorporationsCorporationIdOrders200Ok {
    enum RangeEnum {
        _1,
        _10,
        _2,
        _20,
        _3,
        _30,
        _4,
        _40,
        _5,
        Region,
        Solarsystem,
        Station,
    }
    enum StateEnum {
        Cancelled,
        CharacterDeleted,
        Closed,
        Expired,
        Open,
        Pending,
    }
}
/**
* coordinates object
*/
export declare class GetCorporationsCorporationIdOutpostsOutpostIdCoordinates {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdOutpostsOutpostIdOk {
    /**
    * The entity that owns the station (e.g. the entity whose logo is on the station services bar)
    */
    'ownerId': number;
    /**
    * The ID of the solar system the outpost rests in
    */
    'systemId': number;
    /**
    * docking_cost_per_ship_volume number
    */
    'dockingCostPerShipVolume': number;
    /**
    * office_rental_cost integer
    */
    'officeRentalCost': number;
    /**
    * The type ID of the given outpost
    */
    'typeId': number;
    /**
    * reprocessing_efficiency number
    */
    'reprocessingEfficiency': number;
    /**
    * reprocessing_station_take number
    */
    'reprocessingStationTake': number;
    /**
    * The owner ID that sets the ability for someone to dock based on standings.
    */
    'standingOwnerId': number;
    'coordinates': GetCorporationsCorporationIdOutpostsOutpostIdCoordinates;
    /**
    * A list of services the given outpost provides
    */
    'services': Array<GetCorporationsCorporationIdOutpostsOutpostIdService>;
}
/**
* service object
*/
export declare class GetCorporationsCorporationIdOutpostsOutpostIdService {
    /**
    * service_name string
    */
    'serviceName': GetCorporationsCorporationIdOutpostsOutpostIdService.ServiceNameEnum;
    /**
    * minimum_standing number
    */
    'minimumStanding': number;
    /**
    * surcharge_per_bad_standing number
    */
    'surchargePerBadStanding': number;
    /**
    * discount_per_good_standing number
    */
    'discountPerGoodStanding': number;
}
export declare namespace GetCorporationsCorporationIdOutpostsOutpostIdService {
    enum ServiceNameEnum {
        BountyMissions,
        AssassinationMissions,
        CourierMissions,
        Interbus,
        ReprocessingPlant,
        Refinery,
        Market,
        BlackMarket,
        StockExchange,
        Cloning,
        Surgery,
        DNATherapy,
        RepairFacilities,
        Factory,
        Laboratory,
        Gambling,
        Fitting,
        Paintshop,
        News,
        Storage,
        Insurance,
        Docking,
        OfficeRental,
        JumpCloneFacility,
        LoyaltyPointStore,
        NavyOffices,
        SecurityOffice,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdRoles200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * roles array
    */
    'roles': Array<GetCorporationsCorporationIdRoles200Ok.RolesEnum>;
    /**
    * grantable_roles array
    */
    'grantableRoles': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum>;
    /**
    * roles_at_hq array
    */
    'rolesAtHq': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum>;
    /**
    * grantable_roles_at_hq array
    */
    'grantableRolesAtHq': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum>;
    /**
    * roles_at_base array
    */
    'rolesAtBase': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum>;
    /**
    * grantable_roles_at_base array
    */
    'grantableRolesAtBase': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum>;
    /**
    * roles_at_other array
    */
    'rolesAtOther': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum>;
    /**
    * grantable_roles_at_other array
    */
    'grantableRolesAtOther': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum>;
}
export declare namespace GetCorporationsCorporationIdRoles200Ok {
    enum RolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtHqEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtHqEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtBaseEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtBaseEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtOtherEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtOtherEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdRolesHistory200Ok {
    /**
    * The character whose roles are changed
    */
    'characterId': number;
    /**
    * changed_at string
    */
    'changedAt': Date;
    /**
    * ID of the character who issued this change
    */
    'issuerId': number;
    /**
    * role_type string
    */
    'roleType': GetCorporationsCorporationIdRolesHistory200Ok.RoleTypeEnum;
    /**
    * old_roles array
    */
    'oldRoles': Array<GetCorporationsCorporationIdRolesHistory200Ok.OldRolesEnum>;
    /**
    * new_roles array
    */
    'newRoles': Array<GetCorporationsCorporationIdRolesHistory200Ok.NewRolesEnum>;
}
export declare namespace GetCorporationsCorporationIdRolesHistory200Ok {
    enum RoleTypeEnum {
        GrantableRoles,
        GrantableRolesAtBase,
        GrantableRolesAtHq,
        GrantableRolesAtOther,
        Roles,
        RolesAtBase,
        RolesAtHq,
        RolesAtOther,
    }
    enum OldRolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum NewRolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdShareholders200Ok {
    /**
    * shareholder_id integer
    */
    'shareholderId': number;
    /**
    * shareholder_type string
    */
    'shareholderType': GetCorporationsCorporationIdShareholders200Ok.ShareholderTypeEnum;
    /**
    * share_count integer
    */
    'shareCount': number;
}
export declare namespace GetCorporationsCorporationIdShareholders200Ok {
    enum ShareholderTypeEnum {
        Character,
        Corporation,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdStandings200Ok {
    /**
    * from_id integer
    */
    'fromId': number;
    /**
    * from_type string
    */
    'fromType': GetCorporationsCorporationIdStandings200Ok.FromTypeEnum;
    /**
    * standing number
    */
    'standing': number;
}
export declare namespace GetCorporationsCorporationIdStandings200Ok {
    enum FromTypeEnum {
        Agent,
        NpcCorp,
        Faction,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdStarbases200Ok {
    /**
    * Unique ID for this starbase (POS)
    */
    'starbaseId': number;
    /**
    * Starbase (POS) type
    */
    'typeId': number;
    /**
    * The solar system this starbase (POS) is in, unanchored POSes have this information
    */
    'systemId': number;
    /**
    * The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
    */
    'moonId': number;
    /**
    * state string
    */
    'state': GetCorporationsCorporationIdStarbases200Ok.StateEnum;
    /**
    * When the POS started unanchoring, for starbases (POSes) in unanchoring state
    */
    'unanchorAt': Date;
    /**
    * When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
    */
    'reinforcedUntil': Date;
    /**
    * When the POS onlined, for starbases (POSes) in online state
    */
    'onlinedSince': Date;
}
export declare namespace GetCorporationsCorporationIdStarbases200Ok {
    enum StateEnum {
        Offline,
        Online,
        Onlining,
        Reinforced,
        Unanchoring,
    }
}
/**
* fuel object
*/
export declare class GetCorporationsCorporationIdStarbasesStarbaseIdFuel {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    /**
    * Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
    */
    'fuelBayView': GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayViewEnum;
    /**
    * Who can take fuel blocks out of the starbase (POS)'s fuel bay
    */
    'fuelBayTake': GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayTakeEnum;
    /**
    * Who can anchor starbase (POS) and its structures
    */
    'anchor': GetCorporationsCorporationIdStarbasesStarbaseIdOk.AnchorEnum;
    /**
    * Who can unanchor starbase (POS) and its structures
    */
    'unanchor': GetCorporationsCorporationIdStarbasesStarbaseIdOk.UnanchorEnum;
    /**
    * Who can online starbase (POS) and its structures
    */
    'online': GetCorporationsCorporationIdStarbasesStarbaseIdOk.OnlineEnum;
    /**
    * Who can offline starbase (POS) and its structures
    */
    'offline': GetCorporationsCorporationIdStarbasesStarbaseIdOk.OfflineEnum;
    /**
    * allow_corporation_members boolean
    */
    'allowCorporationMembers': boolean;
    /**
    * allow_alliance_members boolean
    */
    'allowAllianceMembers': boolean;
    /**
    * True if the starbase (POS) is using alliance standings, otherwise using corporation's
    */
    'useAllianceStandings': boolean;
    /**
    * Starbase (POS) will attack if target's standing is lower than this value
    */
    'attackStandingThreshold': number;
    /**
    * Starbase (POS) will attack if target's security standing is lower than this value
    */
    'attackSecurityStatusThreshold': number;
    /**
    * attack_if_other_security_status_dropping boolean
    */
    'attackIfOtherSecurityStatusDropping': boolean;
    /**
    * attack_if_at_war boolean
    */
    'attackIfAtWar': boolean;
    /**
    * Fuel blocks and other things that will be consumed when operating a starbase (POS)
    */
    'fuels': Array<GetCorporationsCorporationIdStarbasesStarbaseIdFuel>;
}
export declare namespace GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    enum FuelBayViewEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
    enum FuelBayTakeEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
    enum AnchorEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
    enum UnanchorEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
    enum OnlineEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
    enum OfflineEnum {
        AllianceMember,
        ConfigStarbaseEquipmentRole,
        CorporationMember,
        StarbaseFuelTechnicianRole,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdStructures200Ok {
    /**
    * The Item ID of the structure
    */
    'structureId': number;
    /**
    * The type id of the structure
    */
    'typeId': number;
    /**
    * ID of the corporation that owns the structure
    */
    'corporationId': number;
    /**
    * The solar system the structure is in
    */
    'systemId': number;
    /**
    * The id of the ACL profile for this citadel
    */
    'profileId': number;
    /**
    * This week's vulnerability windows, Monday is day 0
    */
    'currentVul': Array<GetCorporationsCorporationIdStructuresCurrentVul>;
    /**
    * Next week's vulnerability windows, Monday is day 0
    */
    'nextVul': Array<GetCorporationsCorporationIdStructuresNextVul>;
    /**
    * Date on which the structure will run out of fuel
    */
    'fuelExpires': Date;
    /**
    * Contains a list of service upgrades, and their state
    */
    'services': Array<GetCorporationsCorporationIdStructuresService>;
    /**
    * Date at which the structure entered it's current state
    */
    'stateTimerStart': Date;
    /**
    * Date at which the structure will move to it's next state
    */
    'stateTimerEnd': Date;
    /**
    * Date at which the structure will unanchor
    */
    'unanchorsAt': Date;
}
/**
* current_vul object
*/
export declare class GetCorporationsCorporationIdStructuresCurrentVul {
    /**
    * day integer
    */
    'day': number;
    /**
    * hour integer
    */
    'hour': number;
}
/**
* next_vul object
*/
export declare class GetCorporationsCorporationIdStructuresNextVul {
    /**
    * day integer
    */
    'day': number;
    /**
    * hour integer
    */
    'hour': number;
}
/**
* service object
*/
export declare class GetCorporationsCorporationIdStructuresService {
    /**
    * name string
    */
    'name': string;
    /**
    * state string
    */
    'state': GetCorporationsCorporationIdStructuresService.StateEnum;
}
export declare namespace GetCorporationsCorporationIdStructuresService {
    enum StateEnum {
        Online,
        Offline,
        Cleanup,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdTitles200Ok {
    /**
    * title_id integer
    */
    'titleId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * roles array
    */
    'roles': Array<GetCorporationsCorporationIdTitles200Ok.RolesEnum>;
    /**
    * grantable_roles array
    */
    'grantableRoles': Array<GetCorporationsCorporationIdTitles200Ok.GrantableRolesEnum>;
    /**
    * roles_at_hq array
    */
    'rolesAtHq': Array<GetCorporationsCorporationIdTitles200Ok.RolesAtHqEnum>;
    /**
    * grantable_roles_at_hq array
    */
    'grantableRolesAtHq': Array<GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtHqEnum>;
    /**
    * roles_at_base array
    */
    'rolesAtBase': Array<GetCorporationsCorporationIdTitles200Ok.RolesAtBaseEnum>;
    /**
    * grantable_roles_at_base array
    */
    'grantableRolesAtBase': Array<GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtBaseEnum>;
    /**
    * roles_at_other array
    */
    'rolesAtOther': Array<GetCorporationsCorporationIdTitles200Ok.RolesAtOtherEnum>;
    /**
    * grantable_roles_at_other array
    */
    'grantableRolesAtOther': Array<GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtOtherEnum>;
}
export declare namespace GetCorporationsCorporationIdTitles200Ok {
    enum RolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtHqEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtHqEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtBaseEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtBaseEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum RolesAtOtherEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
    enum GrantableRolesAtOtherEnum {
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Accountant,
        Auditor,
        CommunicationsOfficer,
        ConfigEquipment,
        ConfigStarbaseEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        ContractManager,
        Diplomat,
        Director,
        FactoryManager,
        FittingManager,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        JuniorAccountant,
        PersonnelManager,
        RentFactoryFacility,
        RentOffice,
        RentResearchFacility,
        SecurityOfficer,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        StationManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
        Trader,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdWallets200Ok {
    /**
    * division integer
    */
    'division': number;
    /**
    * balance number
    */
    'balance': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdWalletsDivisionJournal200Ok {
    /**
    * Date and time of transaction
    */
    'date': Date;
    /**
    * Unique journal reference ID
    */
    'refId': number;
    /**
    * Transaction type, different type of transaction will populate different fields in `extra_info` Note: If you have an existing XML API application that is using ref_types, you will need to know which string ESI ref_type maps to which integer. You can use the following gist to see string->int mappings: https://gist.github.com/ccp-zoetrope/c03db66d90c2148724c06171bc52e0ec
    */
    'refType': GetCorporationsCorporationIdWalletsDivisionJournal200Ok.RefTypeEnum;
    /**
    * first_party_id integer
    */
    'firstPartyId': number;
    /**
    * first_party_type string
    */
    'firstPartyType': GetCorporationsCorporationIdWalletsDivisionJournal200Ok.FirstPartyTypeEnum;
    /**
    * second_party_id integer
    */
    'secondPartyId': number;
    /**
    * second_party_type string
    */
    'secondPartyType': GetCorporationsCorporationIdWalletsDivisionJournal200Ok.SecondPartyTypeEnum;
    /**
    * Transaction amount. Positive when value transferred to the first party. Negative otherwise
    */
    'amount': number;
    /**
    * Wallet balance after transaction occurred
    */
    'balance': number;
    /**
    * reason string
    */
    'reason': string;
    /**
    * the corporation ID receiving any tax paid
    */
    'taxReceiverId': number;
    /**
    * Tax amount received for tax related transactions
    */
    'tax': number;
    'extraInfo': GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo;
}
export declare namespace GetCorporationsCorporationIdWalletsDivisionJournal200Ok {
    enum RefTypeEnum {
        AccelerationGateFee,
        AdvertisementListingFee,
        AgentDonation,
        AgentLocationServices,
        AgentMiscellaneous,
        AgentMissionCollateralPaid,
        AgentMissionCollateralRefunded,
        AgentMissionReward,
        AgentMissionRewardCorporationTax,
        AgentMissionTimeBonusReward,
        AgentMissionTimeBonusRewardCorporationTax,
        AgentSecurityServices,
        AgentServicesRendered,
        AgentsPreward,
        AllianceMaintainanceFee,
        AllianceRegistrationFee,
        AssetSafetyRecoveryTax,
        Bounty,
        BountyPrize,
        BountyPrizeCorporationTax,
        BountyPrizes,
        BountyReimbursement,
        BountySurcharge,
        BrokersFee,
        CloneActivation,
        CloneTransfer,
        ContrabandFine,
        ContractAuctionBid,
        ContractAuctionBidCorp,
        ContractAuctionBidRefund,
        ContractAuctionSold,
        ContractBrokersFee,
        ContractBrokersFeeCorp,
        ContractCollateral,
        ContractCollateralDepositedCorp,
        ContractCollateralPayout,
        ContractCollateralRefund,
        ContractDeposit,
        ContractDepositCorp,
        ContractDepositRefund,
        ContractDepositSalesTax,
        ContractPrice,
        ContractPricePaymentCorp,
        ContractReversal,
        ContractReward,
        ContractRewardDeposited,
        ContractRewardDepositedCorp,
        ContractRewardRefund,
        ContractSalesTax,
        Copying,
        CorporateRewardPayout,
        CorporateRewardTax,
        CorporationAccountWithdrawal,
        CorporationBulkPayment,
        CorporationDividendPayment,
        CorporationLiquidation,
        CorporationLogoChangeCost,
        CorporationPayment,
        CorporationRegistrationFee,
        CourierMissionEscrow,
        Cspa,
        Cspaofflinerefund,
        DatacoreFee,
        DnaModificationFee,
        DockingFee,
        DuelWagerEscrow,
        DuelWagerPayment,
        DuelWagerRefund,
        FactorySlotRentalFee,
        GmCashTransfer,
        IndustryJobTax,
        InfrastructureHubMaintenance,
        Inheritance,
        Insurance,
        JumpCloneActivationFee,
        JumpCloneInstallationFee,
        KillRightFee,
        LpStore,
        Manufacturing,
        MarketEscrow,
        MarketFinePaid,
        MarketTransaction,
        MedalCreation,
        MedalIssued,
        MissionCompletion,
        MissionCost,
        MissionExpiration,
        MissionReward,
        OfficeRentalFee,
        OperationBonus,
        OpportunityReward,
        PlanetaryConstruction,
        PlanetaryExportTax,
        PlanetaryImportTax,
        PlayerDonation,
        PlayerTrading,
        ProjectDiscoveryReward,
        ProjectDiscoveryTax,
        Reaction,
        ReleaseOfImpoundedProperty,
        RepairBill,
        ReprocessingTax,
        ResearchingMaterialProductivity,
        ResearchingTechnology,
        ResearchingTimeProductivity,
        ResourceWarsReward,
        ReverseEngineering,
        SecurityProcessingFee,
        Shares,
        SovereignityBill,
        StorePurchase,
        StorePurchaseRefund,
        TransactionTax,
        UpkeepAdjustmentFee,
        WarAllyContract,
        WarFee,
        WarFeeSurrender,
    }
    enum FirstPartyTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
        System,
    }
    enum SecondPartyTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
        System,
    }
}
/**
* Extra information for different type of transaction
*/
export declare class GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo {
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * transaction_id integer
    */
    'transactionId': number;
    /**
    * npc_name string
    */
    'npcName': string;
    /**
    * npc_id integer
    */
    'npcId': number;
    /**
    * destroyed_ship_type_id integer
    */
    'destroyedShipTypeId': number;
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * job_id integer
    */
    'jobId': number;
    /**
    * contract_id integer
    */
    'contractId': number;
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * planet_id integer
    */
    'planetId': number;
}
/**
* wallet transaction
*/
export declare class GetCorporationsCorporationIdWalletsDivisionTransactions200Ok {
    /**
    * Unique transaction ID
    */
    'transactionId': number;
    /**
    * Date and time of transaction
    */
    'date': Date;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * Amount paid per unit
    */
    'unitPrice': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * client_id integer
    */
    'clientId': number;
    /**
    * is_buy boolean
    */
    'isBuy': boolean;
    /**
    * journal_ref_id integer
    */
    'journalRefId': number;
}
/**
* 200 ok object
*/
export declare class GetCorporationsNames200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * corporation_name string
    */
    'corporationName': string;
}
/**
* Not found
*/
export declare class GetDogmaAttributesAttributeIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetDogmaAttributesAttributeIdOk {
    /**
    * attribute_id integer
    */
    'attributeId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * default_value number
    */
    'defaultValue': number;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * display_name string
    */
    'displayName': string;
    /**
    * unit_id integer
    */
    'unitId': number;
    /**
    * stackable boolean
    */
    'stackable': boolean;
    /**
    * high_is_good boolean
    */
    'highIsGood': boolean;
}
/**
* modifier object
*/
export declare class GetDogmaEffectsEffectIdModifier {
    /**
    * func string
    */
    'func': string;
    /**
    * domain string
    */
    'domain': string;
    /**
    * modified_attribute_id integer
    */
    'modifiedAttributeId': number;
    /**
    * modifying_attribute_id integer
    */
    'modifyingAttributeId': number;
    /**
    * effect_id integer
    */
    'effectId': number;
    /**
    * operator integer
    */
    'operator': number;
}
/**
* Not found
*/
export declare class GetDogmaEffectsEffectIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetDogmaEffectsEffectIdOk {
    /**
    * effect_id integer
    */
    'effectId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * display_name string
    */
    'displayName': string;
    /**
    * description string
    */
    'description': string;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * effect_category integer
    */
    'effectCategory': number;
    /**
    * pre_expression integer
    */
    'preExpression': number;
    /**
    * post_expression integer
    */
    'postExpression': number;
    /**
    * is_offensive boolean
    */
    'isOffensive': boolean;
    /**
    * is_assistance boolean
    */
    'isAssistance': boolean;
    /**
    * disallow_auto_repeat boolean
    */
    'disallowAutoRepeat': boolean;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * is_warp_safe boolean
    */
    'isWarpSafe': boolean;
    /**
    * range_chance boolean
    */
    'rangeChance': boolean;
    /**
    * electronic_chance boolean
    */
    'electronicChance': boolean;
    /**
    * duration_attribute_id integer
    */
    'durationAttributeId': number;
    /**
    * tracking_speed_attribute_id integer
    */
    'trackingSpeedAttributeId': number;
    /**
    * discharge_attribute_id integer
    */
    'dischargeAttributeId': number;
    /**
    * range_attribute_id integer
    */
    'rangeAttributeId': number;
    /**
    * falloff_attribute_id integer
    */
    'falloffAttributeId': number;
    /**
    * modifiers array
    */
    'modifiers': Array<GetDogmaEffectsEffectIdModifier>;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdMembers200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * ID of the wing the member is in. If not applicable, will be set to -1
    */
    'wingId': number;
    /**
    * ID of the squad the member is in. If not applicable, will be set to -1
    */
    'squadId': number;
    /**
    * Member’s role in fleet
    */
    'role': GetFleetsFleetIdMembers200Ok.RoleEnum;
    /**
    * Localized role names
    */
    'roleName': string;
    /**
    * join_time string
    */
    'joinTime': Date;
    /**
    * Whether the member take fleet warps
    */
    'takesFleetWarp': boolean;
    /**
    * Solar system the member is located in
    */
    'solarSystemId': number;
    /**
    * Station in which the member is docked in, if applicable
    */
    'stationId': number;
}
export declare namespace GetFleetsFleetIdMembers200Ok {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Not found
*/
export declare class GetFleetsFleetIdMembersNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetFleetsFleetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdOk {
    /**
    * Fleet MOTD in CCP flavoured HTML
    */
    'motd': string;
    /**
    * Is free-move enabled
    */
    'isFreeMove': boolean;
    /**
    * Does the fleet have an active fleet advertisement
    */
    'isRegistered': boolean;
    /**
    * Is EVE Voice enabled
    */
    'isVoiceEnabled': boolean;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdWings200Ok {
    /**
    * name string
    */
    'name': string;
    /**
    * id integer
    */
    'id': number;
    /**
    * squads array
    */
    'squads': Array<GetFleetsFleetIdWingsSquad>;
}
/**
* Not found
*/
export declare class GetFleetsFleetIdWingsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* squad object
*/
export declare class GetFleetsFleetIdWingsSquad {
    /**
    * name string
    */
    'name': string;
    /**
    * id integer
    */
    'id': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsActiveTotal {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsActiveTotal1 {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsCharactersActiveTotal {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsCharactersActiveTotal1 {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* Top 100 rankings of pilots by number of kills from yesterday, last week and in total.
*/
export declare class GetFwLeaderboardsCharactersKills {
    /**
    * Top 100 ranking of pilots by kills in the past day
    */
    'yesterday': Array<GetFwLeaderboardsCharactersYesterday>;
    /**
    * Top 100 ranking of pilots by kills in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsCharactersLastWeek>;
    /**
    * Top 100 ranking of pilots active in faction warfare by total kills. A pilot is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsCharactersActiveTotal>;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsCharactersLastWeek {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsCharactersLastWeek1 {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetFwLeaderboardsCharactersOk {
    'kills': GetFwLeaderboardsCharactersKills;
    'victoryPoints': GetFwLeaderboardsCharactersVictoryPoints;
}
/**
* Top 100 rankings of pilots by victory points from yesterday, last week and in total
*/
export declare class GetFwLeaderboardsCharactersVictoryPoints {
    /**
    * Top 100 ranking of pilots by victory points in the past day
    */
    'yesterday': Array<GetFwLeaderboardsCharactersYesterday1>;
    /**
    * Top 100 ranking of pilots by victory points in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsCharactersLastWeek1>;
    /**
    * Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsCharactersActiveTotal1>;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsCharactersYesterday {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsCharactersYesterday1 {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsCorporationsActiveTotal {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* active_total object
*/
export declare class GetFwLeaderboardsCorporationsActiveTotal1 {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* Top 10 rankings of corporations by number of kills from yesterday, last week and in total.
*/
export declare class GetFwLeaderboardsCorporationsKills {
    /**
    * Top 10 ranking of corporations by kills in the past day
    */
    'yesterday': Array<GetFwLeaderboardsCorporationsYesterday>;
    /**
    * Top 10 ranking of corporations by kills in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsCorporationsLastWeek>;
    /**
    * Top 10 ranking of corporations active in faction warfare by total kills. A corporation is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsCorporationsActiveTotal>;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsCorporationsLastWeek {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsCorporationsLastWeek1 {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetFwLeaderboardsCorporationsOk {
    'kills': GetFwLeaderboardsCorporationsKills;
    'victoryPoints': GetFwLeaderboardsCorporationsVictoryPoints;
}
/**
* Top 10 rankings of corporations by victory points from yesterday, last week and in total
*/
export declare class GetFwLeaderboardsCorporationsVictoryPoints {
    /**
    * Top 10 ranking of corporations by victory points in the past day
    */
    'yesterday': Array<GetFwLeaderboardsCorporationsYesterday1>;
    /**
    * Top 10 ranking of corporations by victory points in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsCorporationsLastWeek1>;
    /**
    * Top 10 ranking of corporations active in faction warfare by total victory points. A corporation is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsCorporationsActiveTotal1>;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsCorporationsYesterday {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsCorporationsYesterday1 {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* Top 4 rankings of factions by number of kills from yesterday, last week and in total.
*/
export declare class GetFwLeaderboardsKills {
    /**
    * Top 4 ranking of factions by kills in the past day
    */
    'yesterday': Array<GetFwLeaderboardsYesterday>;
    /**
    * Top 4 ranking of factions by kills in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsLastWeek>;
    /**
    * Top 4 ranking of factions active in faction warfare by total kills. A faction is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsActiveTotal>;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsLastWeek {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* last_week object
*/
export declare class GetFwLeaderboardsLastWeek1 {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetFwLeaderboardsOk {
    'kills': GetFwLeaderboardsKills;
    'victoryPoints': GetFwLeaderboardsVictoryPoints;
}
/**
* Top 4 rankings of factions by victory points from yesterday, last week and in total
*/
export declare class GetFwLeaderboardsVictoryPoints {
    /**
    * Top 4 ranking of factions by victory points in the past day
    */
    'yesterday': Array<GetFwLeaderboardsYesterday1>;
    /**
    * Top 4 ranking of factions by victory points in the past week
    */
    'lastWeek': Array<GetFwLeaderboardsLastWeek1>;
    /**
    * Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered \"active\" if they have participated in faction warfare in the past 14 days.
    */
    'activeTotal': Array<GetFwLeaderboardsActiveTotal1>;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsYesterday {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of kills
    */
    'amount': number;
}
/**
* yesterday object
*/
export declare class GetFwLeaderboardsYesterday1 {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Amount of victory points
    */
    'amount': number;
}
/**
* 200 ok object
*/
export declare class GetFwStats200Ok {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * How many pilots fight for the given faction
    */
    'pilots': number;
    /**
    * The number of solar systems controlled by the given faction
    */
    'systemsControlled': number;
    'kills': GetFwStatsKills;
    'victoryPoints': GetFwStatsVictoryPoints;
}
/**
* Summary of kills against an enemy faction for the given faction
*/
export declare class GetFwStatsKills {
    /**
    * Yesterday's total number of kills against enemy factions
    */
    'yesterday': number;
    /**
    * Last week's total number of kills against enemy factions
    */
    'lastWeek': number;
    /**
    * Total number of kills against enemy factions since faction warfare began
    */
    'total': number;
}
/**
* Summary of victory points gained for the given faction
*/
export declare class GetFwStatsVictoryPoints {
    /**
    * Yesterday's victory points gained
    */
    'yesterday': number;
    /**
    * Last week's victory points gained
    */
    'lastWeek': number;
    /**
    * Total victory points gained since faction warfare began
    */
    'total': number;
}
/**
* 200 ok object
*/
export declare class GetFwSystems200Ok {
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * owner_faction_id integer
    */
    'ownerFactionId': number;
    /**
    * occupier_faction_id integer
    */
    'occupierFactionId': number;
    /**
    * victory_points integer
    */
    'victoryPoints': number;
    /**
    * victory_points_threshold integer
    */
    'victoryPointsThreshold': number;
    /**
    * contested boolean
    */
    'contested': boolean;
}
/**
* 200 ok object
*/
export declare class GetFwWars200Ok {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * The faction ID of the enemy faction.
    */
    'againstId': number;
}
/**
* 200 ok object
*/
export declare class GetIncursions200Ok {
    /**
    * The type of this incursion
    */
    'type': string;
    /**
    * The state of this incursion
    */
    'state': GetIncursions200Ok.StateEnum;
    /**
    * Influence of this incursion as a float from 0 to 1
    */
    'influence': number;
    /**
    * Whether the final encounter has boss or not
    */
    'hasBoss': boolean;
    /**
    * The attacking faction's id
    */
    'factionId': number;
    /**
    * The constellation id in which this incursion takes place
    */
    'constellationId': number;
    /**
    * Staging solar system for this incursion
    */
    'stagingSolarSystemId': number;
    /**
    * A list of infested solar system ids that are a part of this incursion
    */
    'infestedSolarSystems': Array<number>;
}
export declare namespace GetIncursions200Ok {
    enum StateEnum {
        Withdrawing,
        Mobilizing,
        Established,
    }
}
/**
* 200 ok object
*/
export declare class GetIndustryFacilities200Ok {
    /**
    * ID of the facility
    */
    'facilityId': number;
    /**
    * Tax imposed by the facility
    */
    'tax': number;
    /**
    * Owner of the facility
    */
    'ownerId': number;
    /**
    * Type ID of the facility
    */
    'typeId': number;
    /**
    * Solar system ID where the facility is
    */
    'solarSystemId': number;
    /**
    * Region ID where the facility is
    */
    'regionId': number;
}
/**
* 200 ok object
*/
export declare class GetIndustrySystems200Ok {
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * cost_indices array
    */
    'costIndices': Array<GetIndustrySystemsCostIndice>;
}
/**
* cost_indice object
*/
export declare class GetIndustrySystemsCostIndice {
    /**
    * activity string
    */
    'activity': GetIndustrySystemsCostIndice.ActivityEnum;
    /**
    * cost_index number
    */
    'costIndex': number;
}
export declare namespace GetIndustrySystemsCostIndice {
    enum ActivityEnum {
        Copying,
        Duplicating,
        Invention,
        Manufacturing,
        None,
        Reaction,
        ResearchingMaterialEfficiency,
        ResearchingTechnology,
        ResearchingTimeEfficiency,
        ReverseEngineering,
    }
}
/**
* 200 ok object
*/
export declare class GetInsurancePrices200Ok {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * A list of a available insurance levels for this ship type
    */
    'levels': Array<GetInsurancePricesLevel>;
}
/**
* level object
*/
export declare class GetInsurancePricesLevel {
    /**
    * cost number
    */
    'cost': number;
    /**
    * payout number
    */
    'payout': number;
    /**
    * Localized insurance level
    */
    'name': string;
}
/**
* attacker object
*/
export declare class GetKillmailsKillmailIdKillmailHashAttacker {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Security status for the attacker
    */
    'securityStatus': number;
    /**
    * Was the attacker the one to achieve the final blow
    */
    'finalBlow': boolean;
    /**
    * damage_done integer
    */
    'damageDone': number;
    /**
    * What ship was the attacker flying
    */
    'shipTypeId': number;
    /**
    * What weapon was used by the attacker for the kill
    */
    'weaponTypeId': number;
}
/**
* item object
*/
export declare class GetKillmailsKillmailIdKillmailHashItem {
    /**
    * item_type_id integer
    */
    'itemTypeId': number;
    /**
    * quantity_destroyed integer
    */
    'quantityDestroyed': number;
    /**
    * quantity_dropped integer
    */
    'quantityDropped': number;
    /**
    * singleton integer
    */
    'singleton': number;
    /**
    * flag integer
    */
    'flag': number;
}
/**
* item object
*/
export declare class GetKillmailsKillmailIdKillmailHashItem1 {
    /**
    * item_type_id integer
    */
    'itemTypeId': number;
    /**
    * How many of the item were destroyed if any
    */
    'quantityDestroyed': number;
    /**
    * How many of the item were dropped if any
    */
    'quantityDropped': number;
    /**
    * singleton integer
    */
    'singleton': number;
    /**
    * Flag for the location of the item
    */
    'flag': number;
    /**
    * items array
    */
    'items': Array<GetKillmailsKillmailIdKillmailHashItem>;
}
/**
* 200 ok object
*/
export declare class GetKillmailsKillmailIdKillmailHashOk {
    /**
    * ID of the killmail
    */
    'killmailId': number;
    /**
    * Time that the victim was killed and the killmail generated
    */
    'killmailTime': Date;
    'victim': GetKillmailsKillmailIdKillmailHashVictim;
    /**
    * attackers array
    */
    'attackers': Array<GetKillmailsKillmailIdKillmailHashAttacker>;
    /**
    * Solar system that the kill took place in
    */
    'solarSystemId': number;
    /**
    * Moon if the kill took place at one
    */
    'moonId': number;
    /**
    * War if the killmail is generated in relation to an official war
    */
    'warId': number;
}
/**
* Coordinates of the victim in Cartesian space relative to the Sun
*/
export declare class GetKillmailsKillmailIdKillmailHashPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Unprocessable entity
*/
export declare class GetKillmailsKillmailIdKillmailHashUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* victim object
*/
export declare class GetKillmailsKillmailIdKillmailHashVictim {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * How much total damage was taken by the victim
    */
    'damageTaken': number;
    /**
    * The ship that the victim was piloting and was destroyed
    */
    'shipTypeId': number;
    /**
    * items array
    */
    'items': Array<GetKillmailsKillmailIdKillmailHashItem1>;
    'position': GetKillmailsKillmailIdKillmailHashPosition;
}
/**
* 200 ok object
*/
export declare class GetLoyaltyStoresCorporationIdOffers200Ok {
    /**
    * offer_id integer
    */
    'offerId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * lp_cost integer
    */
    'lpCost': number;
    /**
    * isk_cost integer
    */
    'iskCost': number;
    /**
    * required_items array
    */
    'requiredItems': Array<GetLoyaltyStoresCorporationIdOffersRequiredItem>;
}
/**
* required_item object
*/
export declare class GetLoyaltyStoresCorporationIdOffersRequiredItem {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* Not found
*/
export declare class GetMarketsGroupsMarketGroupIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsGroupsMarketGroupIdOk {
    /**
    * market_group_id integer
    */
    'marketGroupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * types array
    */
    'types': Array<number>;
    /**
    * parent_group_id integer
    */
    'parentGroupId': number;
}
/**
* 200 ok object
*/
export declare class GetMarketsPrices200Ok {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * average_price number
    */
    'averagePrice': number;
    /**
    * adjusted_price number
    */
    'adjustedPrice': number;
}
/**
* 200 ok object
*/
export declare class GetMarketsRegionIdHistory200Ok {
    /**
    * The date of this historical statistic entry
    */
    'date': Date;
    /**
    * Total number of orders happened that day
    */
    'orderCount': number;
    /**
    * Total
    */
    'volume': number;
    /**
    * highest number
    */
    'highest': number;
    /**
    * average number
    */
    'average': number;
    /**
    * lowest number
    */
    'lowest': number;
}
/**
* Unprocessable entity
*/
export declare class GetMarketsRegionIdHistoryUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsRegionIdOrders200Ok {
    /**
    * order_id integer
    */
    'orderId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * volume_total integer
    */
    'volumeTotal': number;
    /**
    * volume_remain integer
    */
    'volumeRemain': number;
    /**
    * min_volume integer
    */
    'minVolume': number;
    /**
    * price number
    */
    'price': number;
    /**
    * is_buy_order boolean
    */
    'isBuyOrder': boolean;
    /**
    * duration integer
    */
    'duration': number;
    /**
    * issued string
    */
    'issued': Date;
    /**
    * range string
    */
    'range': GetMarketsRegionIdOrders200Ok.RangeEnum;
}
export declare namespace GetMarketsRegionIdOrders200Ok {
    enum RangeEnum {
        Station,
        Region,
        Solarsystem,
        _1,
        _2,
        _3,
        _4,
        _5,
        _10,
        _20,
        _30,
        _40,
    }
}
/**
* Unprocessable entity
*/
export declare class GetMarketsRegionIdOrdersUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsStructuresStructureId200Ok {
    /**
    * order_id integer
    */
    'orderId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * volume_total integer
    */
    'volumeTotal': number;
    /**
    * volume_remain integer
    */
    'volumeRemain': number;
    /**
    * min_volume integer
    */
    'minVolume': number;
    /**
    * price number
    */
    'price': number;
    /**
    * is_buy_order boolean
    */
    'isBuyOrder': boolean;
    /**
    * duration integer
    */
    'duration': number;
    /**
    * issued string
    */
    'issued': Date;
    /**
    * range string
    */
    'range': GetMarketsStructuresStructureId200Ok.RangeEnum;
}
export declare namespace GetMarketsStructuresStructureId200Ok {
    enum RangeEnum {
        Station,
        Region,
        Solarsystem,
        _1,
        _2,
        _3,
        _4,
        _5,
        _10,
        _20,
        _30,
        _40,
    }
}
/**
* 200 ok object
*/
export declare class GetOpportunitiesGroupsGroupIdOk {
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * notification string
    */
    'notification': string;
    /**
    * Tasks need to complete for this group
    */
    'requiredTasks': Array<number>;
    /**
    * The groups that are connected to this group on the opportunities map
    */
    'connectedGroups': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetOpportunitiesTasksTaskIdOk {
    /**
    * task_id integer
    */
    'taskId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * notification string
    */
    'notification': string;
}
/**
* Not found
*/
export declare class GetRouteOriginDestinationNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetSearchOk {
    /**
    * agent array
    */
    'agent': Array<number>;
    /**
    * alliance array
    */
    'alliance': Array<number>;
    /**
    * character array
    */
    'character': Array<number>;
    /**
    * constellation array
    */
    'constellation': Array<number>;
    /**
    * corporation array
    */
    'corporation': Array<number>;
    /**
    * faction array
    */
    'faction': Array<number>;
    /**
    * inventory_type array
    */
    'inventoryType': Array<number>;
    /**
    * region array
    */
    'region': Array<number>;
    /**
    * solar_system array
    */
    'solarSystem': Array<number>;
    /**
    * station array
    */
    'station': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyCampaigns200Ok {
    /**
    * Unique ID for this campaign.
    */
    'campaignId': number;
    /**
    * The structure item ID that is related to this campaign.
    */
    'structureId': number;
    /**
    * The solar system the structure is located in.
    */
    'solarSystemId': number;
    /**
    * The constellation in which the campaign will take place.
    */
    'constellationId': number;
    /**
    * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\".
    */
    'eventType': GetSovereigntyCampaigns200Ok.EventTypeEnum;
    /**
    * Time the event is scheduled to start.
    */
    'startTime': Date;
    /**
    * Defending alliance, only present in Defense Events
    */
    'defenderId': number;
    /**
    * Score for the defending alliance, only present in Defense Events.
    */
    'defenderScore': number;
    /**
    * Score for all attacking parties, only present in Defense Events.
    */
    'attackersScore': number;
    /**
    * Alliance participating and their respective scores, only present in Freeport Events.
    */
    'participants': Array<GetSovereigntyCampaignsParticipant>;
}
export declare namespace GetSovereigntyCampaigns200Ok {
    enum EventTypeEnum {
        TcuDefense,
        IhubDefense,
        StationDefense,
        StationFreeport,
    }
}
/**
* participant object
*/
export declare class GetSovereigntyCampaignsParticipant {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * score number
    */
    'score': number;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyMap200Ok {
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * faction_id integer
    */
    'factionId': number;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyStructures200Ok {
    /**
    * The alliance that owns the structure.
    */
    'allianceId': number;
    /**
    * Solar system in which the structure is located.
    */
    'solarSystemId': number;
    /**
    * Unique item ID for this structure.
    */
    'structureId': number;
    /**
    * A reference to the type of structure this is.
    */
    'structureTypeId': number;
    /**
    * The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
    */
    'vulnerabilityOccupancyLevel': number;
    /**
    * The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
    */
    'vulnerableStartTime': Date;
    /**
    * The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
    */
    'vulnerableEndTime': Date;
}
/**
* 200 ok object
*/
export declare class GetStatusOk {
    /**
    * Server start timestamp
    */
    'startTime': Date;
    /**
    * Current online player count
    */
    'players': number;
    /**
    * Running version as string
    */
    'serverVersion': string;
    /**
    * If the server is in VIP mode
    */
    'vip': boolean;
}
/**
* 200 ok object
*/
export declare class GetUniverseBloodlines200Ok {
    /**
    * bloodline_id integer
    */
    'bloodlineId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * perception integer
    */
    'perception': number;
    /**
    * willpower integer
    */
    'willpower': number;
    /**
    * charisma integer
    */
    'charisma': number;
    /**
    * memory integer
    */
    'memory': number;
    /**
    * intelligence integer
    */
    'intelligence': number;
}
/**
* Not found
*/
export declare class GetUniverseCategoriesCategoryIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseCategoriesCategoryIdOk {
    /**
    * category_id integer
    */
    'categoryId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * groups array
    */
    'groups': Array<number>;
}
/**
* Not found
*/
export declare class GetUniverseConstellationsConstellationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseConstellationsConstellationIdOk {
    /**
    * constellation_id integer
    */
    'constellationId': number;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseConstellationsConstellationIdPosition;
    /**
    * The region this constellation is in
    */
    'regionId': number;
    /**
    * systems array
    */
    'systems': Array<number>;
}
/**
* position object
*/
export declare class GetUniverseConstellationsConstellationIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseFactions200Ok {
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * militia_corporation_id integer
    */
    'militiaCorporationId': number;
    /**
    * size_factor number
    */
    'sizeFactor': number;
    /**
    * station_count integer
    */
    'stationCount': number;
    /**
    * station_system_count integer
    */
    'stationSystemCount': number;
    /**
    * is_unique boolean
    */
    'isUnique': boolean;
}
/**
* Not found
*/
export declare class GetUniverseGraphicsGraphicIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseGraphicsGraphicIdOk {
    /**
    * graphic_id integer
    */
    'graphicId': number;
    /**
    * graphic_file string
    */
    'graphicFile': string;
    /**
    * sof_race_name string
    */
    'sofRaceName': string;
    /**
    * sof_fation_name string
    */
    'sofFationName': string;
    /**
    * sof_dna string
    */
    'sofDna': string;
    /**
    * sof_hull_name string
    */
    'sofHullName': string;
    /**
    * collision_file string
    */
    'collisionFile': string;
    /**
    * icon_folder string
    */
    'iconFolder': string;
}
/**
* Not found
*/
export declare class GetUniverseGroupsGroupIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseGroupsGroupIdOk {
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * category_id integer
    */
    'categoryId': number;
    /**
    * types array
    */
    'types': Array<number>;
}
/**
* Not found
*/
export declare class GetUniverseMoonsMoonIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseMoonsMoonIdOk {
    /**
    * moon_id integer
    */
    'moonId': number;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseMoonsMoonIdPosition;
    /**
    * The solar system this moon is in
    */
    'systemId': number;
}
/**
* position object
*/
export declare class GetUniverseMoonsMoonIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Not found
*/
export declare class GetUniversePlanetsPlanetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniversePlanetsPlanetIdOk {
    /**
    * planet_id integer
    */
    'planetId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * type_id integer
    */
    'typeId': number;
    'position': GetUniversePlanetsPlanetIdPosition;
    /**
    * The solar system this planet is in
    */
    'systemId': number;
}
/**
* position object
*/
export declare class GetUniversePlanetsPlanetIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseRaces200Ok {
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * The alliance generally associated with this race
    */
    'allianceId': number;
}
/**
* Not found
*/
export declare class GetUniverseRegionsRegionIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseRegionsRegionIdOk {
    /**
    * region_id integer
    */
    'regionId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * constellations array
    */
    'constellations': Array<number>;
}
/**
* Schematic not found
*/
export declare class GetUniverseSchematicsSchematicIdNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseSchematicsSchematicIdOk {
    /**
    * schematic_name string
    */
    'schematicName': string;
    /**
    * Time in seconds to process a run
    */
    'cycleTime': number;
}
/**
* destination object
*/
export declare class GetUniverseStargatesStargateIdDestination {
    /**
    * The solar system this stargate connects to
    */
    'systemId': number;
    /**
    * The stargate this stargate connects to
    */
    'stargateId': number;
}
/**
* Not found
*/
export declare class GetUniverseStargatesStargateIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStargatesStargateIdOk {
    /**
    * stargate_id integer
    */
    'stargateId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * type_id integer
    */
    'typeId': number;
    'position': GetUniverseStargatesStargateIdPosition;
    /**
    * The solar system this stargate is in
    */
    'systemId': number;
    'destination': GetUniverseStargatesStargateIdDestination;
}
/**
* position object
*/
export declare class GetUniverseStargatesStargateIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseStarsStarIdOk {
    /**
    * name string
    */
    'name': string;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * Age of star in years
    */
    'age': number;
    /**
    * luminosity number
    */
    'luminosity': number;
    /**
    * radius integer
    */
    'radius': number;
    /**
    * spectral_class string
    */
    'spectralClass': GetUniverseStarsStarIdOk.SpectralClassEnum;
    /**
    * temperature integer
    */
    'temperature': number;
}
export declare namespace GetUniverseStarsStarIdOk {
    enum SpectralClassEnum {
        K2V,
        K4V,
        G2V,
        G8V,
        M7V,
        K7V,
        M2V,
        K5V,
        M3V,
        G0V,
        G7V,
        G3V,
        F9V,
        G5V,
        F6V,
        K8V,
        K9V,
        K6V,
        G9V,
        G6V,
        G4VI,
        G4V,
        F8V,
        F2V,
        F1V,
        K3V,
        F0VI,
        G1VI,
        G0VI,
        K1V,
        M4V,
        M1V,
        M6V,
        M0V,
        K2IV,
        G2VI,
        K0V,
        K5IV,
        F5VI,
        G6VI,
        F6VI,
        F2IV,
        G3VI,
        M8V,
        F1VI,
        K1IV,
        F7V,
        G5VI,
        M5V,
        G7VI,
        F5V,
        F4VI,
        F8VI,
        K3IV,
        F4IV,
        F0V,
        G7IV,
        G8VI,
        F2VI,
        F4V,
        F7VI,
        F3V,
        G1V,
        G9VI,
        F3IV,
        F9VI,
        M9V,
        K0IV,
        F1IV,
        G4IV,
        F3VI,
        K4IV,
        G5IV,
        G3IV,
        G1IV,
        K7IV,
        G0IV,
        K6IV,
        K9IV,
        G2IV,
        F9IV,
        F0IV,
        K8IV,
        G8IV,
        F6IV,
        F5IV,
        A0,
        A0IV,
        A0IV2,
    }
}
/**
* Not found
*/
export declare class GetUniverseStationsStationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStationsStationIdOk {
    /**
    * station_id integer
    */
    'stationId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * ID of the corporation that controls this station
    */
    'owner': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * race_id integer
    */
    'raceId': number;
    'position': GetUniverseStationsStationIdPosition;
    /**
    * The solar system this station is in
    */
    'systemId': number;
    /**
    * reprocessing_efficiency number
    */
    'reprocessingEfficiency': number;
    /**
    * reprocessing_stations_take number
    */
    'reprocessingStationsTake': number;
    /**
    * max_dockable_ship_volume number
    */
    'maxDockableShipVolume': number;
    /**
    * office_rental_cost number
    */
    'officeRentalCost': number;
    /**
    * services array
    */
    'services': Array<GetUniverseStationsStationIdOk.ServicesEnum>;
}
export declare namespace GetUniverseStationsStationIdOk {
    enum ServicesEnum {
        BountyMissions,
        AssasinationMissions,
        CourierMissions,
        Interbus,
        ReprocessingPlant,
        Refinery,
        Market,
        BlackMarket,
        StockExchange,
        Cloning,
        Surgery,
        DnaTherapy,
        RepairFacilities,
        Factory,
        Labratory,
        Gambling,
        Fitting,
        Paintshop,
        News,
        Storage,
        Insurance,
        Docking,
        OfficeRental,
        JumpCloneFacility,
        LoyaltyPointStore,
        NavyOffices,
        SecurityOffices,
    }
}
/**
* position object
*/
export declare class GetUniverseStationsStationIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Not found
*/
export declare class GetUniverseStructuresStructureIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStructuresStructureIdOk {
    /**
    * The full name of the structure
    */
    'name': string;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
    'position': GetUniverseStructuresStructureIdPosition;
}
/**
* Coordinates of the structure in Cartesian space relative to the Sun, in metres.
*/
export declare class GetUniverseStructuresStructureIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemJumps200Ok {
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * ship_jumps integer
    */
    'shipJumps': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemKills200Ok {
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * Number of player ships killed in this system
    */
    'shipKills': number;
    /**
    * Number of NPC ships killed in this system
    */
    'npcKills': number;
    /**
    * Number of pods killed in this system
    */
    'podKills': number;
}
/**
* Not found
*/
export declare class GetUniverseSystemsSystemIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemsSystemIdOk {
    /**
    * star_id integer
    */
    'starId': number;
    /**
    * system_id integer
    */
    'systemId': number;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseSystemsSystemIdPosition;
    /**
    * security_status number
    */
    'securityStatus': number;
    /**
    * security_class string
    */
    'securityClass': string;
    /**
    * The constellation this solar system is in
    */
    'constellationId': number;
    /**
    * planets array
    */
    'planets': Array<GetUniverseSystemsSystemIdPlanet>;
    /**
    * stargates array
    */
    'stargates': Array<number>;
    /**
    * stations array
    */
    'stations': Array<number>;
}
/**
* planet object
*/
export declare class GetUniverseSystemsSystemIdPlanet {
    /**
    * planet_id integer
    */
    'planetId': number;
    /**
    * moons array
    */
    'moons': Array<number>;
}
/**
* position object
*/
export declare class GetUniverseSystemsSystemIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* dogma_attribute object
*/
export declare class GetUniverseTypesTypeIdDogmaAttribute {
    /**
    * attribute_id integer
    */
    'attributeId': number;
    /**
    * value number
    */
    'value': number;
}
/**
* dogma_effect object
*/
export declare class GetUniverseTypesTypeIdDogmaEffect {
    /**
    * effect_id integer
    */
    'effectId': number;
    /**
    * is_default boolean
    */
    'isDefault': boolean;
}
/**
* Not found
*/
export declare class GetUniverseTypesTypeIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseTypesTypeIdOk {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * This only exists for types that can be put on the market
    */
    'marketGroupId': number;
    /**
    * radius number
    */
    'radius': number;
    /**
    * volume number
    */
    'volume': number;
    /**
    * packaged_volume number
    */
    'packagedVolume': number;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * capacity number
    */
    'capacity': number;
    /**
    * portion_size integer
    */
    'portionSize': number;
    /**
    * mass number
    */
    'mass': number;
    /**
    * graphic_id integer
    */
    'graphicId': number;
    /**
    * dogma_attributes array
    */
    'dogmaAttributes': Array<GetUniverseTypesTypeIdDogmaAttribute>;
    /**
    * dogma_effects array
    */
    'dogmaEffects': Array<GetUniverseTypesTypeIdDogmaEffect>;
}
/**
* The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
export declare class GetWarsWarIdAggressor {
    /**
    * Corporation ID if and only if the aggressor is a corporation
    */
    'corporationId': number;
    /**
    * Alliance ID if and only if the aggressor is an alliance
    */
    'allianceId': number;
    /**
    * The number of ships the aggressor has killed
    */
    'shipsKilled': number;
    /**
    * ISK value of ships the aggressor has destroyed
    */
    'iskDestroyed': number;
}
/**
* ally object
*/
export declare class GetWarsWarIdAlly {
    /**
    * Corporation ID if and only if this ally is a corporation
    */
    'corporationId': number;
    /**
    * Alliance ID if and only if this ally is an alliance
    */
    'allianceId': number;
}
/**
* The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
export declare class GetWarsWarIdDefender {
    /**
    * Corporation ID if and only if the defender is a corporation
    */
    'corporationId': number;
    /**
    * Alliance ID if and only if the defender is an alliance
    */
    'allianceId': number;
    /**
    * The number of ships the defender has killed
    */
    'shipsKilled': number;
    /**
    * ISK value of ships the defender has killed
    */
    'iskDestroyed': number;
}
/**
* 200 ok object
*/
export declare class GetWarsWarIdKillmails200Ok {
    /**
    * ID of this killmail
    */
    'killmailId': number;
    /**
    * A hash of this killmail
    */
    'killmailHash': string;
}
/**
* Unprocessable entity
*/
export declare class GetWarsWarIdKillmailsUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetWarsWarIdOk {
    /**
    * ID of the specified war
    */
    'id': number;
    /**
    * Time that the war was declared
    */
    'declared': Date;
    /**
    * Time when the war started and both sides could shoot each other
    */
    'started': Date;
    /**
    * Time the war was retracted but both sides could still shoot each other
    */
    'retracted': Date;
    /**
    * Time the war ended and shooting was no longer allowed
    */
    'finished': Date;
    /**
    * Was the war declared mutual by both parties
    */
    'mutual': boolean;
    /**
    * Is the war currently open for allies or not
    */
    'openForAllies': boolean;
    'aggressor': GetWarsWarIdAggressor;
    'defender': GetWarsWarIdDefender;
    /**
    * allied corporations or alliances, each object contains either corporation_id or alliance_id
    */
    'allies': Array<GetWarsWarIdAlly>;
}
/**
* Unprocessable entity
*/
export declare class GetWarsWarIdUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* Internal server error model
*/
export declare class InternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class PostCharactersAffiliation200Ok {
    /**
    * The character's ID
    */
    'characterId': number;
    /**
    * The character's corporation ID
    */
    'corporationId': number;
    /**
    * The character's alliance ID, if their corporation is in an alliance
    */
    'allianceId': number;
    /**
    * The character's faction ID, if their corporation is in a faction
    */
    'factionId': number;
}
/**
* Not found
*/
export declare class PostCharactersAffiliationNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class PostCharactersCharacterIdAssetsLocations200Ok {
    /**
    * item_id integer
    */
    'itemId': number;
    'position': PostCharactersCharacterIdAssetsLocationsPosition;
}
/**
* position object
*/
export declare class PostCharactersCharacterIdAssetsLocationsPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class PostCharactersCharacterIdAssetsNames200Ok {
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 201 created object
*/
export declare class PostCharactersCharacterIdFittingsCreated {
    /**
    * fitting_id integer
    */
    'fittingId': number;
}
/**
* fitting object
*/
export declare class PostCharactersCharacterIdFittingsFitting {
    /**
    * name string
    */
    'name': string;
    /**
    * description string
    */
    'description': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * items array
    */
    'items': Array<PostCharactersCharacterIdFittingsItem>;
}
/**
* item object
*/
export declare class PostCharactersCharacterIdFittingsItem {
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * flag integer
    */
    'flag': number;
    /**
    * quantity integer
    */
    'quantity': number;
}
/**
* Bad request
*/
export declare class PostCharactersCharacterIdMailBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* label object
*/
export declare class PostCharactersCharacterIdMailLabelsLabel {
    /**
    * name string
    */
    'name': string;
    /**
    * Hexadecimal string representing label color, in RGB format
    */
    'color': PostCharactersCharacterIdMailLabelsLabel.ColorEnum;
}
export declare namespace PostCharactersCharacterIdMailLabelsLabel {
    enum ColorEnum {
        _0000fe,
        _006634,
        _0099ff,
        _00ff33,
        _01ffff,
        _349800,
        _660066,
        _666666,
        _999999,
        _99ffff,
        _9a0000,
        Ccff9a,
        E6e6e6,
        Fe0000,
        Ff6600,
        Ffff01,
        Ffffcd,
        Ffffff,
    }
}
/**
* mail object
*/
export declare class PostCharactersCharacterIdMailMail {
    /**
    * recipients array
    */
    'recipients': Array<PostCharactersCharacterIdMailRecipient>;
    /**
    * subject string
    */
    'subject': string;
    /**
    * body string
    */
    'body': string;
    /**
    * approved_cost integer
    */
    'approvedCost': number;
}
/**
* recipient object
*/
export declare class PostCharactersCharacterIdMailRecipient {
    /**
    * recipient_type string
    */
    'recipientType': PostCharactersCharacterIdMailRecipient.RecipientTypeEnum;
    /**
    * recipient_id integer
    */
    'recipientId': number;
}
export declare namespace PostCharactersCharacterIdMailRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* 200 ok object
*/
export declare class PostCorporationsCorporationIdAssetsLocations200Ok {
    /**
    * item_id integer
    */
    'itemId': number;
    'position': PostCorporationsCorporationIdAssetsLocationsPosition;
}
/**
* position object
*/
export declare class PostCorporationsCorporationIdAssetsLocationsPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class PostCorporationsCorporationIdAssetsNames200Ok {
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* invitation object
*/
export declare class PostFleetsFleetIdMembersInvitation {
    /**
    * The character you want to invite
    */
    'characterId': number;
    /**
    * If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is invited with the `wing_commander` role, only `wing_id` should be specified. If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions.
    */
    'role': PostFleetsFleetIdMembersInvitation.RoleEnum;
    /**
    * wing_id integer
    */
    'wingId': number;
    /**
    * squad_id integer
    */
    'squadId': number;
}
export declare namespace PostFleetsFleetIdMembersInvitation {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Not found
*/
export declare class PostFleetsFleetIdMembersNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 422 unprocessable entity object
*/
export declare class PostFleetsFleetIdMembersUnprocessableEntity {
    /**
    * error message
    */
    'error': string;
}
/**
* 201 created object
*/
export declare class PostFleetsFleetIdWingsCreated {
    /**
    * The wing_id of the newly created wing
    */
    'wingId': number;
}
/**
* Not found
*/
export declare class PostFleetsFleetIdWingsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 201 created object
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsCreated {
    /**
    * The squad_id of the newly created squad
    */
    'squadId': number;
}
/**
* Not found
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* new_mail object
*/
export declare class PostUiOpenwindowNewmailNewMail {
    /**
    * subject string
    */
    'subject': string;
    /**
    * body string
    */
    'body': string;
    /**
    * recipients array
    */
    'recipients': Array<number>;
    /**
    * Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field
    */
    'toMailingListId': number;
    /**
    * to_corp_or_alliance_id integer
    */
    'toCorpOrAllianceId': number;
}
/**
* Unprocessable entity
*/
export declare class PostUiOpenwindowNewmailUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* agent object
*/
export declare class PostUniverseIdsAgent {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* alliance object
*/
export declare class PostUniverseIdsAlliance {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* character object
*/
export declare class PostUniverseIdsCharacter {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* constellation object
*/
export declare class PostUniverseIdsConstellation {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* corporation object
*/
export declare class PostUniverseIdsCorporation {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* faction object
*/
export declare class PostUniverseIdsFaction {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* inventory_type object
*/
export declare class PostUniverseIdsInventoryType {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class PostUniverseIdsOk {
    /**
    * agents array
    */
    'agents': Array<PostUniverseIdsAgent>;
    /**
    * alliances array
    */
    'alliances': Array<PostUniverseIdsAlliance>;
    /**
    * characters array
    */
    'characters': Array<PostUniverseIdsCharacter>;
    /**
    * constellations array
    */
    'constellations': Array<PostUniverseIdsConstellation>;
    /**
    * corporations array
    */
    'corporations': Array<PostUniverseIdsCorporation>;
    /**
    * factions array
    */
    'factions': Array<PostUniverseIdsFaction>;
    /**
    * inventory_types array
    */
    'inventoryTypes': Array<PostUniverseIdsInventoryType>;
    /**
    * regions array
    */
    'regions': Array<PostUniverseIdsRegion>;
    /**
    * systems array
    */
    'systems': Array<PostUniverseIdsSystem>;
    /**
    * stations array
    */
    'stations': Array<PostUniverseIdsStation>;
}
/**
* region object
*/
export declare class PostUniverseIdsRegion {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* Service unavailable
*/
export declare class PostUniverseIdsServiceUnavailable {
    /**
    * Service unavailable message
    */
    'error': string;
}
/**
* station object
*/
export declare class PostUniverseIdsStation {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* system object
*/
export declare class PostUniverseIdsSystem {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class PostUniverseNames200Ok {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
    /**
    * category string
    */
    'category': PostUniverseNames200Ok.CategoryEnum;
}
export declare namespace PostUniverseNames200Ok {
    enum CategoryEnum {
        Alliance,
        Character,
        Constellation,
        Corporation,
        InventoryType,
        Region,
        SolarSystem,
        Station,
    }
}
/**
* Not found
*/
export declare class PostUniverseNamesNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* response object
*/
export declare class PutCharactersCharacterIdCalendarEventIdResponse {
    /**
    * response string
    */
    'response': PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum;
}
export declare namespace PutCharactersCharacterIdCalendarEventIdResponse {
    enum ResponseEnum {
        Accepted,
        Declined,
        Tentative,
    }
}
/**
* Bad request
*/
export declare class PutCharactersCharacterIdMailMailIdBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* contents object
*/
export declare class PutCharactersCharacterIdMailMailIdContents {
    /**
    * Whether the mail is flagged as read
    */
    'read': boolean;
    /**
    * Labels to assign to the mail. Pre-existing labels are unassigned.
    */
    'labels': Array<number>;
}
/**
* new_schedule object
*/
export declare class PutCorporationsCorporationIdStructuresStructureIdNewSchedule {
    /**
    * Day of the week, zero-indexed to Monday
    */
    'day': number;
    /**
    * Hour of the day evetime, zero-indexed to midnight
    */
    'hour': number;
}
/**
* Bad request
*/
export declare class PutFleetsFleetIdBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* movement object
*/
export declare class PutFleetsFleetIdMembersMemberIdMovement {
    /**
    * If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified. If a character is moved to the `wing_commander` role, only `wing_id` should be specified. If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified. If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified.
    */
    'role': PutFleetsFleetIdMembersMemberIdMovement.RoleEnum;
    /**
    * wing_id integer
    */
    'wingId': number;
    /**
    * squad_id integer
    */
    'squadId': number;
}
export declare namespace PutFleetsFleetIdMembersMemberIdMovement {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Not found
*/
export declare class PutFleetsFleetIdMembersMemberIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 422 unprocessable entity object
*/
export declare class PutFleetsFleetIdMembersMemberIdUnprocessableEntity {
    /**
    * error message
    */
    'error': string;
}
/**
* new_settings object
*/
export declare class PutFleetsFleetIdNewSettings {
    /**
    * New fleet MOTD in CCP flavoured HTML
    */
    'motd': string;
    /**
    * Should free-move be enabled in the fleet
    */
    'isFreeMove': boolean;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* naming object
*/
export declare class PutFleetsFleetIdSquadsSquadIdNaming {
    /**
    * name string
    */
    'name': string;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdSquadsSquadIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* naming object
*/
export declare class PutFleetsFleetIdWingsWingIdNaming {
    /**
    * name string
    */
    'name': string;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdWingsWingIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: request.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: request.Options): void;
}
export declare enum AllianceApiApiKeys {
}
export declare class AllianceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: AllianceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List all alliances
     * List all active player alliances  --- Alternate route: &#x60;/dev/alliances/&#x60;  Alternate route: &#x60;/legacy/alliances/&#x60;  Alternate route: &#x60;/v1/alliances/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliances(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get alliance information
     * Public information about an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/&#x60;  Alternate route: &#x60;/v3/alliances/{alliance_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceId(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetAlliancesAllianceIdOk;
    }>;
    /**
     * List alliance&#39;s corporations
     * List all current member corporations of an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/corporations/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdCorporations(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get alliance icon
     * Get the icon urls for a alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdIcons(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetAlliancesAllianceIdIconsOk;
    }>;
    /**
     * Get alliance names
     * Resolve a set of alliance IDs to alliance names  --- Alternate route: &#x60;/dev/alliances/names/&#x60;  Alternate route: &#x60;/v2/alliances/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceIds A comma separated list of alliance IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesNames(allianceIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetAlliancesNames200Ok>;
    }>;
}
export declare enum AssetsApiApiKeys {
}
export declare class AssetsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: AssetsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character assets
     * Return a list of the characters assets  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/assets/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAssets(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdAssets200Ok>;
    }>;
    /**
     * Get corporation assets
     * Return a list of the corporation assets  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/assets/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAssets(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdAssets200Ok>;
    }>;
    /**
     * Get character asset locations
     * Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/locations/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/assets/locations/&#x60;
     * @param characterId An EVE character ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdAssetsLocations(characterId: number, itemIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCharactersCharacterIdAssetsLocations200Ok>;
    }>;
    /**
     * Get character asset names
     * Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/names/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/assets/names/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/assets/names/&#x60;
     * @param characterId An EVE character ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdAssetsNames(characterId: number, itemIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCharactersCharacterIdAssetsNames200Ok>;
    }>;
    /**
     * Get corporation asset locations
     * Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/locations/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/assets/locations/&#x60;   --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCorporationsCorporationIdAssetsLocations(corporationId: number, itemIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCorporationsCorporationIdAssetsLocations200Ok>;
    }>;
    /**
     * Get coporation asset names
     * Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/names/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/assets/names/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/assets/names/&#x60;   --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCorporationsCorporationIdAssetsNames(corporationId: number, itemIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCorporationsCorporationIdAssetsNames200Ok>;
    }>;
}
export declare enum BookmarksApiApiKeys {
}
export declare class BookmarksApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: BookmarksApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List bookmarks
     * A list of your character&#39;s personal bookmarks  --- Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/bookmarks/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarks(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdBookmarks200Ok>;
    }>;
    /**
     * List bookmark folders
     * A list of your character&#39;s personal bookmark folders  --- Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/bookmarks/folders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarksFolders(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdBookmarksFolders200Ok>;
    }>;
    /**
     * List corporation bookmarks
     * A list of your corporation&#39;s bookmarks  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/bookmarks/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/bookmarks/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/bookmarks/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBookmarks(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdBookmarks200Ok>;
    }>;
    /**
     * List corporation bookmark folders
     * A list of your corporation&#39;s bookmark folders  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/bookmarks/folders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBookmarksFolders(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdBookmarksFolders200Ok>;
    }>;
}
export declare enum CalendarApiApiKeys {
}
export declare class CalendarApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CalendarApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List calendar event summaries
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event.  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromEvent The event ID to retrieve events from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendar(characterId: number, datasource?: string, fromEvent?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdCalendar200Ok>;
    }>;
    /**
     * Get an event
     * Get all the information for a specific event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventId(characterId: number, eventId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdCalendarEventIdOk;
    }>;
    /**
     * Get attendees
     * Get all invited attendees for a given event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventIdAttendees(characterId: number, eventId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdCalendarEventIdAttendees200Ok>;
    }>;
    /**
     * Respond to an event
     * Set your response status to an event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;
     * @param characterId An EVE character ID
     * @param eventId The ID of the event requested
     * @param response The response value to set, overriding current value.
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdCalendarEventId(characterId: number, eventId: number, response: PutCharactersCharacterIdCalendarEventIdResponse, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum CharacterApiApiKeys {
}
export declare class CharacterApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CharacterApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character&#39;s public information
     * Public information about a character  --- Alternate route: &#x60;/dev/characters/{character_id}/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterId(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdOk;
    }>;
    /**
     * Get agents research
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints &#x3D; remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: &#x60;/dev/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/agents_research/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAgentsResearch(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdAgentsResearch200Ok>;
    }>;
    /**
     * Get blueprints
     * Return a list of blueprints the character owns  --- Alternate route: &#x60;/dev/characters/{character_id}/blueprints/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/blueprints/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBlueprints(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdBlueprints200Ok>;
    }>;
    /**
     * Get chat channels
     * Return chat channels that a character is the owner or operator of  --- Alternate route: &#x60;/dev/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/chat_channels/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdChatChannels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdChatChannels200Ok>;
    }>;
    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  --- Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCorporationhistory(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdCorporationhistory200Ok>;
    }>;
    /**
     * Get jump fatigue
     * Return a character&#39;s jump activation and fatigue information  --- Alternate route: &#x60;/dev/characters/{character_id}/fatigue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fatigue/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fatigue/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFatigue(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdFatigueOk;
    }>;
    /**
     * Get medals
     * Return a list of medals the character has  --- Alternate route: &#x60;/dev/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/medals/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMedals(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMedals200Ok>;
    }>;
    /**
     * Get character notifications
     * Return character notifications  --- Alternate route: &#x60;/dev/characters/{character_id}/notifications/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/notifications/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/notifications/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdNotifications(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdNotifications200Ok>;
    }>;
    /**
     * Get new contact notifications
     * Return notifications about having been added to someone&#39;s contact list  --- Alternate route: &#x60;/dev/characters/{character_id}/notifications/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/notifications/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/notifications/contacts/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdNotificationsContacts(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdNotificationsContacts200Ok>;
    }>;
    /**
     * Get character portraits
     * Get portrait urls for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPortrait(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdPortraitOk;
    }>;
    /**
     * Get character corporation roles
     * Returns a character&#39;s corporation roles  --- Alternate route: &#x60;/dev/characters/{character_id}/roles/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/roles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdRoles(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdRolesOk;
    }>;
    /**
     * Get standings
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: &#x60;/dev/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/standings/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStandings(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdStandings200Ok>;
    }>;
    /**
     * Yearly aggregate stats
     * Returns aggregate yearly stats for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/stats/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/stats/&#x60;  --- This route is cached for up to 86400 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStats(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdStats200Ok>;
    }>;
    /**
     * Get character corporation titles
     * Returns a character&#39;s titles  --- Alternate route: &#x60;/dev/characters/{character_id}/titles/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/titles/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/titles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdTitles(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdTitles200Ok>;
    }>;
    /**
     * Get character names
     * Resolve a set of character IDs to character names  --- Alternate route: &#x60;/dev/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/v1/characters/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterIds A comma separated list of character IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersNames(characterIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersNames200Ok>;
    }>;
    /**
     * Character affiliation
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: &#x60;/dev/characters/affiliation/&#x60;  Alternate route: &#x60;/legacy/characters/affiliation/&#x60;  Alternate route: &#x60;/v1/characters/affiliation/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characters The character IDs to fetch affiliations for. All characters must exist, or none will be returned.
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersAffiliation(characters: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCharactersAffiliation200Ok>;
    }>;
    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  --- Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/cspa/&#x60;
     * @param characterId An EVE character ID
     * @param characters The target characters to calculate the charge for
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdCspa(characterId: number, characters: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
}
export declare enum ClonesApiApiKeys {
}
export declare class ClonesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: ClonesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get clones
     * A list of the character&#39;s clones  --- Alternate route: &#x60;/dev/characters/{character_id}/clones/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/clones/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdClones(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdClonesOk;
    }>;
    /**
     * Get active implants
     * Return implants on the active clone of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/implants/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/implants/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/implants/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdImplants(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
}
export declare enum ContactsApiApiKeys {
}
export declare class ContactsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: ContactsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete contacts
     * Bulk delete contacts  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get alliance contacts
     * Return contacts of an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdContacts(allianceId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetAlliancesAllianceIdContacts200Ok>;
    }>;
    /**
     * Get contacts
     * Return contacts of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContacts(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContacts200Ok>;
    }>;
    /**
     * Get contact labels
     * Return custom labels for contacts the character defined  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContactsLabels200Ok>;
    }>;
    /**
     * Get corporation contacts
     * Return contacts of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContacts(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdContacts200Ok>;
    }>;
    /**
     * Add contacts
     * Bulk add contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to add
     * @param standing Standing for the new contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the new contact
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the new contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelId?: number, token?: string, userAgent?: string, watched?: boolean, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Edit contacts
     * Bulk edit contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to edit
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the contact, use 0 for clearing label
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelId?: number, token?: string, userAgent?: string, watched?: boolean, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum ContractsApiApiKeys {
}
export declare class ContractsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: ContractsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get contracts
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContracts(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContracts200Ok>;
    }>;
    /**
     * Get contract bids
     * Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param contractId ID of a contract
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContractsContractIdBids(characterId: number, contractId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContractsContractIdBids200Ok>;
    }>;
    /**
     * Get contract items
     * Lists items of a particular contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param contractId ID of a contract
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContractsContractIdItems(characterId: number, contractId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContractsContractIdItems200Ok>;
    }>;
    /**
     * Get coporation contracts
     * Returns contracts available to a coporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContracts(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdContracts200Ok>;
    }>;
    /**
     * Get corporation contract bids
     * Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 3600 seconds
     * @param contractId ID of a contract
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContractsContractIdBids(contractId: number, corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>;
    }>;
    /**
     * Get corporation contract items
     * Lists items of a particular contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
     * @param contractId ID of a contract
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContractsContractIdItems(contractId: number, corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>;
    }>;
}
export declare enum CorporationApiApiKeys {
}
export declare class CorporationApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CorporationApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get corporation information
     * Public information about a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/v4/corporations/{corporation_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationId(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdOk;
    }>;
    /**
     * Get alliance history
     * Get a list of all the alliances a corporation has been a member of  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/alliancehistory/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAlliancehistory(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdAlliancehistory200Ok>;
    }>;
    /**
     * Get corporation blueprints
     * Returns a list of blueprints the corporation owns  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/blueprints/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/blueprints/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/blueprints/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBlueprints(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdBlueprints200Ok>;
    }>;
    /**
     * Get all corporation ALSC logs
     * Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/containers/logs/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/containers/logs/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/containers/logs/&#x60;  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContainersLogs(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdContainersLogs200Ok>;
    }>;
    /**
     * Get corporation divisions
     * Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/divisions/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/divisions/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/divisions/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdDivisions(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdDivisionsOk;
    }>;
    /**
     * Get corporation facilities
     * Return a corporation&#39;s facilities  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/facilities/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/facilities/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/facilities/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdFacilities(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdFacilities200Ok>;
    }>;
    /**
     * Get corporation icon
     * Get the icon urls for a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIcons(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdIconsOk;
    }>;
    /**
     * Get corporation medals
     * Returns a corporation&#39;s medals  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/medals/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/medals/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/medals/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMedals(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdMedals200Ok>;
    }>;
    /**
     * Get corporation issued medals
     * Returns medals issued by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/medals/issued/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/medals/issued/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/medals/issued/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMedalsIssued(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdMedalsIssued200Ok>;
    }>;
    /**
     * Get corporation members
     * Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/v3/corporations/{corporation_id}/members/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembers(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get corporation member limit
     * Return a corporation&#39;s member limit, not including CEO himself  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/limit/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/limit/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/members/limit/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembersLimit(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Get corporation&#39;s members&#39; titles
     * Returns a corporation&#39;s members&#39; titles  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/titles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/titles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/members/titles/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembersTitles(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdMembersTitles200Ok>;
    }>;
    /**
     * Track corporation members
     * Returns additional information about a corporation&#39;s members which helps tracking their activities  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/membertracking/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembertracking(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdMembertracking200Ok>;
    }>;
    /**
     * Get corporation outposts
     * Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/outposts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/outposts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/outposts/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOutposts(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get corporation outpost details
     * Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param outpostId A station (outpost) ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOutpostsOutpostId(corporationId: number, outpostId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdOutpostsOutpostIdOk;
    }>;
    /**
     * Get corporation member roles
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRoles(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdRoles200Ok>;
    }>;
    /**
     * Get corporation member roles history
     * Return how roles have changed for a coporation&#39;s members, up to a month  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/history/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/history/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/history/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRolesHistory(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdRolesHistory200Ok>;
    }>;
    /**
     * Get corporation members
     * Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/shareholders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/shareholders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/shareholders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdShareholders(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdShareholders200Ok>;
    }>;
    /**
     * Get corporation standings
     * Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/standings/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/standings/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/standings/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStandings(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdStandings200Ok>;
    }>;
    /**
     * Get corporation starbases (POSes)
     * Returns list of corporation starbases (POSes)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/starbases/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/starbases/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/starbases/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStarbases(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdStarbases200Ok>;
    }>;
    /**
     * Get starbase (POS) detail
     * Returns various settings and fuels of a starbase (POS)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param starbaseId An EVE starbase (POS) ID
     * @param systemId The solar system this starbase (POS) is located in,
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStarbasesStarbaseId(corporationId: number, starbaseId: number, systemId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdStarbasesStarbaseIdOk;
    }>;
    /**
     * Get corporation structures
     * Get a list of corporation structures  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): StationManager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStructures(corporationId: number, datasource?: string, language?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdStructures200Ok>;
    }>;
    /**
     * Get corporation titles
     * Returns a corporation&#39;s titles  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/titles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/titles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/titles/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdTitles(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdTitles200Ok>;
    }>;
    /**
     * Get corporation names
     * Resolve a set of corporation IDs to corporation names  --- Alternate route: &#x60;/dev/corporations/names/&#x60;  Alternate route: &#x60;/v2/corporations/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationIds A comma separated list of corporation IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNames(corporationIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsNames200Ok>;
    }>;
    /**
     * Get npc corporations
     * Get a list of npc corporations  --- Alternate route: &#x60;/dev/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNpccorps(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Update structure vulnerability schedule
     * Update the vulnerability window schedule of a corporation structure  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;
     * @param corporationId An EVE corporation ID
     * @param newSchedule New vulnerability window schedule for the structure
     * @param structureId A structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCorporationsCorporationIdStructuresStructureId(corporationId: number, newSchedule: Array<PutCorporationsCorporationIdStructuresStructureIdNewSchedule>, structureId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum DogmaApiApiKeys {
}
export declare class DogmaApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: DogmaApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get attributes
     * Get a list of dogma attribute ids  --- Alternate route: &#x60;/dev/dogma/attributes/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/&#x60;  Alternate route: &#x60;/v1/dogma/attributes/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributes(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get attribute information
     * Get information on a dogma attribute  --- Alternate route: &#x60;/dev/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/v1/dogma/attributes/{attribute_id}/&#x60;  --- This route expires daily at 11:05
     * @param attributeId A dogma attribute ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributesAttributeId(attributeId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetDogmaAttributesAttributeIdOk;
    }>;
    /**
     * Get effects
     * Get a list of dogma effect ids  --- Alternate route: &#x60;/dev/dogma/effects/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/&#x60;  Alternate route: &#x60;/v1/dogma/effects/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffects(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get effect information
     * Get information on a dogma effect  --- Alternate route: &#x60;/dev/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/v2/dogma/effects/{effect_id}/&#x60;  --- This route expires daily at 11:05
     * @param effectId A dogma effect ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffectsEffectId(effectId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetDogmaEffectsEffectIdOk;
    }>;
}
export declare enum FactionWarfareApiApiKeys {
}
export declare class FactionWarfareApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: FactionWarfareApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Overview of a character involved in faction warfare
     * Statistical overview of a character involved in faction warfare  --- Alternate route: &#x60;/dev/characters/{character_id}/fw/stats/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fw/stats/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFwStats(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdFwStatsOk;
    }>;
    /**
     * Overview of a corporation involved in faction warfare
     * Statistics about a corporation involved in faction warfare  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/fw/stats/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/fw/stats/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdFwStats(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdFwStatsOk;
    }>;
    /**
     * List of the top factions in faction warfare
     * Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboards(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetFwLeaderboardsOk;
    }>;
    /**
     * List of the top pilots in faction warfare
     * Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/characters/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/characters/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/characters/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboardsCharacters(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetFwLeaderboardsCharactersOk;
    }>;
    /**
     * List of the top corporations in faction warfare
     * Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/corporations/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/corporations/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/corporations/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboardsCorporations(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetFwLeaderboardsCorporationsOk;
    }>;
    /**
     * An overview of statistics about factions involved in faction warfare
     * Statistical overviews of factions involved in faction warfare  --- Alternate route: &#x60;/dev/fw/stats/&#x60;  Alternate route: &#x60;/legacy/fw/stats/&#x60;  Alternate route: &#x60;/v1/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwStats(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFwStats200Ok>;
    }>;
    /**
     * Ownership of faction warfare systems
     * An overview of the current ownership of faction warfare solar systems  --- Alternate route: &#x60;/dev/fw/systems/&#x60;  Alternate route: &#x60;/legacy/fw/systems/&#x60;  Alternate route: &#x60;/v1/fw/systems/&#x60;  --- This route is cached for up to 1800 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwSystems(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFwSystems200Ok>;
    }>;
    /**
     * Data about which NPC factions are at war
     * Data about which NPC factions are at war  --- Alternate route: &#x60;/dev/fw/wars/&#x60;  Alternate route: &#x60;/legacy/fw/wars/&#x60;  Alternate route: &#x60;/v1/fw/wars/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwWars(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFwWars200Ok>;
    }>;
}
export declare enum FittingsApiApiKeys {
}
export declare class FittingsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: FittingsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete fitting
     * Delete a fitting from a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/{fitting_id}/&#x60;
     * @param characterId An EVE character ID
     * @param fittingId ID for a fitting of this character
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdFittingsFittingId(characterId: number, fittingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get fittings
     * Return fittings of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFittings(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdFittings200Ok>;
    }>;
    /**
     * Create fitting
     * Save a new fitting for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fitting Details about the new fitting
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdFittings(characterId: number, datasource?: string, fitting?: PostCharactersCharacterIdFittingsFitting, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostCharactersCharacterIdFittingsCreated;
    }>;
}
export declare enum FleetsApiApiKeys {
}
export declare class FleetsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: FleetsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Kick fleet member
     * Kick a fleet member  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param squadId The squad to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdSquadsSquadId(fleetId: number, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdWingsWingId(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get character fleet info
     * Return the fleet ID the character is in, if any.  --- Alternate route: &#x60;/dev/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fleet/&#x60;  --- This route is cached for up to 60 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFleet(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdFleetOk;
    }>;
    /**
     * Get fleet information
     * Return details about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetId(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetFleetsFleetIdOk;
    }>;
    /**
     * Get fleet members
     * Return information about fleet members  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdMembers(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFleetsFleetIdMembers200Ok>;
    }>;
    /**
     * Get fleet wings
     * Return information about wings in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdWings(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFleetsFleetIdWings200Ok>;
    }>;
    /**
     * Create fleet invitation
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;
     * @param fleetId ID for a fleet
     * @param invitation Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdMembers(fleetId: number, invitation: PostFleetsFleetIdMembersInvitation, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Create fleet wing
     * Create a new wing in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWings(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostFleetsFleetIdWingsCreated;
    }>;
    /**
     * Create fleet squad
     * Create a new squad in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing_id to create squad in
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWingsWingIdSquads(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostFleetsFleetIdWingsWingIdSquadsCreated;
    }>;
    /**
     * Update fleet
     * Update settings about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param newSettings What to update for this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetId(fleetId: number, newSettings: PutFleetsFleetIdNewSettings, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Move fleet member
     * Move a fleet member around  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param movement Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, movement: PutFleetsFleetIdMembersMemberIdMovement, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Rename fleet squad
     * Rename a fleet squad  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the squad
     * @param squadId The squad to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdSquadsSquadId(fleetId: number, naming: PutFleetsFleetIdSquadsSquadIdNaming, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Rename fleet wing
     * Rename a fleet wing  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the wing
     * @param wingId The wing to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdWingsWingId(fleetId: number, naming: PutFleetsFleetIdWingsWingIdNaming, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum IncursionsApiApiKeys {
}
export declare class IncursionsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: IncursionsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List incursions
     * Return a list of current incursions  --- Alternate route: &#x60;/dev/incursions/&#x60;  Alternate route: &#x60;/legacy/incursions/&#x60;  Alternate route: &#x60;/v1/incursions/&#x60;  --- This route is cached for up to 300 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIncursions(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIncursions200Ok>;
    }>;
}
export declare enum IndustryApiApiKeys {
}
export declare class IndustryApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: IndustryApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List character industry jobs
     * List industry jobs placed by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/industry/jobs/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/industry/jobs/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/industry/jobs/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param includeCompleted Whether retrieve completed character industry jobs as well
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdIndustryJobs(characterId: number, datasource?: string, includeCompleted?: boolean, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdIndustryJobs200Ok>;
    }>;
    /**
     * Character mining ledger
     * Paginated record of all mining done by a character for the past 30 days   --- Alternate route: &#x60;/dev/characters/{character_id}/mining/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mining/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mining/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMining(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMining200Ok>;
    }>;
    /**
     * Moon extraction timers
     * Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/extractions/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/extractions/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/extractions/&#x60;  --- This route is cached for up to 1800 seconds  --- Requires one of the following EVE corporation role(s): Structure_manager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningExtractions(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationCorporationIdMiningExtractions200Ok>;
    }>;
    /**
     * Corporation mining observers
     * Paginated list of all entities capable of observing and recording mining for a corporation   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/observers/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/observers/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/observers/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningObservers(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationCorporationIdMiningObservers200Ok>;
    }>;
    /**
     * Observed corporation mining
     * Paginated record of all mining seen by an observer   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant
     * @param corporationId An EVE corporation ID
     * @param observerId A mining observer id
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningObserversObserverId(corporationId: number, observerId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationCorporationIdMiningObserversObserverId200Ok>;
    }>;
    /**
     * List corporation industry jobs
     * List industry jobs run by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/industry/jobs/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/industry/jobs/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/industry/jobs/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): FactoryManager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param includeCompleted Whether retrieve completed industry jobs as well
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIndustryJobs(corporationId: number, datasource?: string, includeCompleted?: boolean, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdIndustryJobs200Ok>;
    }>;
    /**
     * List industry facilities
     * Return a list of industry facilities  --- Alternate route: &#x60;/dev/industry/facilities/&#x60;  Alternate route: &#x60;/legacy/industry/facilities/&#x60;  Alternate route: &#x60;/v1/industry/facilities/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustryFacilities(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIndustryFacilities200Ok>;
    }>;
    /**
     * List solar system cost indices
     * Return cost indices for solar systems  --- Alternate route: &#x60;/dev/industry/systems/&#x60;  Alternate route: &#x60;/legacy/industry/systems/&#x60;  Alternate route: &#x60;/v1/industry/systems/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustrySystems(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIndustrySystems200Ok>;
    }>;
}
export declare enum InsuranceApiApiKeys {
}
export declare class InsuranceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: InsuranceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List insurance levels
     * Return available insurance levels for all ship types  --- Alternate route: &#x60;/dev/insurance/prices/&#x60;  Alternate route: &#x60;/legacy/insurance/prices/&#x60;  Alternate route: &#x60;/v1/insurance/prices/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getInsurancePrices(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetInsurancePrices200Ok>;
    }>;
}
export declare enum KillmailsApiApiKeys {
}
export declare class KillmailsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: KillmailsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character kills and losses
     * Return a list of character&#39;s recent kills and losses  --- Alternate route: &#x60;/dev/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/killmails/recent/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param maxCount How many killmails to return at maximum
     * @param maxKillId Only return killmails with ID smaller than this.
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdKillmailsRecent(characterId: number, datasource?: string, maxCount?: number, maxKillId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdKillmailsRecent200Ok>;
    }>;
    /**
     * Get corporation kills and losses
     * Get a list of corporation&#39;s recent kills and losses  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/killmails/recent/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/killmails/recent/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param maxKillId Only return killmails with ID smaller than this
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdKillmailsRecent(corporationId: number, datasource?: string, maxKillId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdKillmailsRecent200Ok>;
    }>;
    /**
     * Get a single killmail
     * Return a single killmail from its ID and hash  --- Alternate route: &#x60;/dev/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/legacy/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/v1/killmails/{killmail_id}/{killmail_hash}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param killmailHash The killmail hash for verification
     * @param killmailId The killmail ID to be queried
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getKillmailsKillmailIdKillmailHash(killmailHash: string, killmailId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetKillmailsKillmailIdKillmailHashOk;
    }>;
}
export declare enum LocationApiApiKeys {
}
export declare class LocationApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: LocationApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character location
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.  --- Alternate route: &#x60;/dev/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/location/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLocation(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdLocationOk;
    }>;
    /**
     * Get character online
     * Checks if the character is currently online  --- Alternate route: &#x60;/dev/characters/{character_id}/online/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/online/&#x60;  --- This route is cached for up to 60 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOnline(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdOnlineOk;
    }>;
    /**
     * Get current ship
     * Get the current ship type, name and id  --- Alternate route: &#x60;/dev/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/ship/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdShip(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdShipOk;
    }>;
}
export declare enum LoyaltyApiApiKeys {
}
export declare class LoyaltyApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: LoyaltyApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get loyalty points
     * Return a list of loyalty points for all corporations the character has worked for  --- Alternate route: &#x60;/dev/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/loyalty/points/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLoyaltyPoints(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdLoyaltyPoints200Ok>;
    }>;
    /**
     * List loyalty store offers
     * Return a list of offers from a specific corporation&#39;s loyalty store  --- Alternate route: &#x60;/dev/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/legacy/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/v1/loyalty/stores/{corporation_id}/offers/&#x60;  --- This route expires daily at 11:05
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getLoyaltyStoresCorporationIdOffers(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetLoyaltyStoresCorporationIdOffers200Ok>;
    }>;
}
export declare enum MailApiApiKeys {
}
export declare class MailApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: MailApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete a mail label
     * Delete a mail label  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60;
     * @param characterId An EVE character ID
     * @param labelId An EVE label id
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailLabelsLabelId(characterId: number, labelId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete a mail
     * Delete a mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailMailId(characterId: number, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Return mail headers
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param labels Fetch only mails that match one or more of the given labels
     * @param lastMailId List only mail with an ID lower than the given ID, if present
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMail(characterId: number, datasource?: string, labels?: Array<number>, lastMailId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMail200Ok>;
    }>;
    /**
     * Get mail labels and unread counts
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/mail/labels/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLabels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdMailLabelsOk;
    }>;
    /**
     * Return mailing list subscriptions
     * Return all mailing lists that the character is subscribed to  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/lists/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLists(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMailLists200Ok>;
    }>;
    /**
     * Return a mail
     * Return the contents of an EVE mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailMailId(characterId: number, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdMailMailIdOk;
    }>;
    /**
     * Send a new mail
     * Create and send a new mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;
     * @param characterId An EVE character ID
     * @param mail The mail to send
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMail(characterId: number, mail: PostCharactersCharacterIdMailMail, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Create a mail label
     * Create a mail label  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param label Label to create
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMailLabels(characterId: number, datasource?: string, label?: PostCharactersCharacterIdMailLabelsLabel, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Update metadata about a mail
     * Update metadata about a mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param contents Data used to update the mail
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdMailMailId(characterId: number, contents: PutCharactersCharacterIdMailMailIdContents, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum MarketApiApiKeys {
}
export declare class MarketApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: MarketApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List orders from a character
     * List market orders placed by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/orders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOrders(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdOrders200Ok>;
    }>;
    /**
     * List orders from a corporation
     * List market orders placed on behalf of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/orders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/orders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/orders/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Trader
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOrders(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdOrders200Ok>;
    }>;
    /**
     * Get item groups
     * Get a list of item groups  --- Alternate route: &#x60;/dev/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/v1/markets/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroups(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item group information
     * Get information on an item group  --- Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  --- This route expires daily at 11:05
     * @param marketGroupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroupsMarketGroupId(marketGroupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetMarketsGroupsMarketGroupIdOk;
    }>;
    /**
     * List market prices
     * Return a list of prices  --- Alternate route: &#x60;/dev/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/v1/markets/prices/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsPrices(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsPrices200Ok>;
    }>;
    /**
     * List historical market statistics in a region
     * Return a list of historical market statistics for the specified type in a region  --- Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  --- This route is cached for up to 3600 seconds
     * @param regionId Return statistics in this region
     * @param typeId Return statistics for this type
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdHistory(regionId: number, typeId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsRegionIdHistory200Ok>;
    }>;
    /**
     * List orders in a region
     * Return a list of orders in a region  --- Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  --- This route is cached for up to 300 seconds
     * @param orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.
     * @param regionId Return orders in this region
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param typeId Return orders only for this type
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdOrders(orderType: string, regionId: number, datasource?: string, page?: number, typeId?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsRegionIdOrders200Ok>;
    }>;
    /**
     * List type IDs relevant to a market
     * Return a list of type IDs that have active orders in the region, for efficient market indexing.  --- Alternate route: &#x60;/dev/markets/{region_id}/types/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/types/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/types/&#x60;  --- This route is cached for up to 600 seconds
     * @param regionId Return statistics in this region
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdTypes(regionId: number, datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * List orders in a structure
     * Return all orders in a structure  --- Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  --- This route is cached for up to 300 seconds
     * @param structureId Return orders in this structure
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsStructuresStructureId(structureId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsStructuresStructureId200Ok>;
    }>;
}
export declare enum OpportunitiesApiApiKeys {
}
export declare class OpportunitiesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: OpportunitiesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get a character&#39;s completed tasks
     * Return a list of tasks finished by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/opportunities/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOpportunities(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdOpportunities200Ok>;
    }>;
    /**
     * Get opportunities groups
     * Return a list of opportunities groups  --- Alternate route: &#x60;/dev/opportunities/groups/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/&#x60;  Alternate route: &#x60;/v1/opportunities/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroups(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get opportunities group
     * Return information of an opportunities group  --- Alternate route: &#x60;/dev/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/v1/opportunities/groups/{group_id}/&#x60;  --- This route expires daily at 11:05
     * @param groupId ID of an opportunities group
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroupsGroupId(groupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetOpportunitiesGroupsGroupIdOk;
    }>;
    /**
     * Get opportunities tasks
     * Return a list of opportunities tasks  --- Alternate route: &#x60;/dev/opportunities/tasks/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/&#x60;  Alternate route: &#x60;/v1/opportunities/tasks/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasks(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get opportunities task
     * Return information of an opportunities task  --- Alternate route: &#x60;/dev/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/v1/opportunities/tasks/{task_id}/&#x60;  --- This route expires daily at 11:05
     * @param taskId ID of an opportunities task
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasksTaskId(taskId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetOpportunitiesTasksTaskIdOk;
    }>;
}
export declare enum PlanetaryInteractionApiApiKeys {
}
export declare class PlanetaryInteractionApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: PlanetaryInteractionApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get colonies
     * Returns a list of all planetary colonies owned by a character.  --- Alternate route: &#x60;/dev/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/planets/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanets(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdPlanets200Ok>;
    }>;
    /**
     * Get colony layout
     * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.  --- Alternate route: &#x60;/dev/characters/{character_id}/planets/{planet_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/planets/{planet_id}/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param planetId Planet id of the target planet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanetsPlanetId(characterId: number, planetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdPlanetsPlanetIdOk;
    }>;
    /**
     * List corporation customs offices
     * List customs offices owned by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/customs_offices/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/customs_offices/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/customs_offices/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdCustomsOffices(corporationId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdCustomsOffices200Ok>;
    }>;
    /**
     * Get schematic information
     * Get information on a planetary factory schematic  --- Alternate route: &#x60;/dev/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/v1/universe/schematics/{schematic_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param schematicId A PI schematic ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSchematicsSchematicId(schematicId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseSchematicsSchematicIdOk;
    }>;
}
export declare enum RoutesApiApiKeys {
}
export declare class RoutesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: RoutesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get route
     * Get the systems between origin and destination  --- Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;  --- This route is cached for up to 86400 seconds
     * @param destination destination solar system ID
     * @param origin origin solar system ID
     * @param avoid avoid solar system ID(s)
     * @param connections connected solar system pairs
     * @param datasource The server name you would like data from
     * @param flag route security preference
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getRouteOriginDestination(destination: number, origin: number, avoid?: Array<number>, connections?: Array<Array<number>>, datasource?: string, flag?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
}
export declare enum SearchApiApiKeys {
}
export declare class SearchApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SearchApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/characters/{character_id}/search/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param characterId An EVE character ID
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param strict Whether the search should be a strict match
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSearch(categories: Array<string>, characterId: number, search: string, datasource?: string, language?: string, strict?: boolean, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdSearchOk;
    }>;
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/search/&#x60;  Alternate route: &#x60;/v2/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param strict Whether the search should be a strict match
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSearch(categories: Array<string>, search: string, datasource?: string, language?: string, strict?: boolean, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetSearchOk;
    }>;
}
export declare enum SkillsApiApiKeys {
}
export declare class SkillsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SkillsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character attributes
     * Return attributes of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/attributes/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/attributes/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/attributes/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAttributes(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdAttributesOk;
    }>;
    /**
     * Get character&#39;s skill queue
     * List the configured skill queue for the given character  --- Alternate route: &#x60;/dev/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/skillqueue/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkillqueue(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdSkillqueue200Ok>;
    }>;
    /**
     * Get character skills
     * List all trained skills for the given character  --- Alternate route: &#x60;/dev/characters/{character_id}/skills/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/skills/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkills(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdSkillsOk;
    }>;
}
export declare enum SovereigntyApiApiKeys {
}
export declare class SovereigntyApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SovereigntyApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List sovereignty campaigns
     * Shows sovereignty data for campaigns.  --- Alternate route: &#x60;/dev/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/legacy/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/v1/sovereignty/campaigns/&#x60;  --- This route is cached for up to 5 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyCampaigns(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyCampaigns200Ok>;
    }>;
    /**
     * List sovereignty of systems
     * Shows sovereignty information for solar systems  --- Alternate route: &#x60;/dev/sovereignty/map/&#x60;  Alternate route: &#x60;/legacy/sovereignty/map/&#x60;  Alternate route: &#x60;/v1/sovereignty/map/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyMap(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyMap200Ok>;
    }>;
    /**
     * List sovereignty structures
     * Shows sovereignty data for structures.  --- Alternate route: &#x60;/dev/sovereignty/structures/&#x60;  Alternate route: &#x60;/legacy/sovereignty/structures/&#x60;  Alternate route: &#x60;/v1/sovereignty/structures/&#x60;  --- This route is cached for up to 120 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyStructures(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyStructures200Ok>;
    }>;
}
export declare enum StatusApiApiKeys {
}
export declare class StatusApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: StatusApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Retrieve the uptime and player counts
     * EVE Server status  --- Alternate route: &#x60;/dev/status/&#x60;  Alternate route: &#x60;/legacy/status/&#x60;  Alternate route: &#x60;/v1/status/&#x60;  --- This route is cached for up to 30 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getStatus(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetStatusOk;
    }>;
}
export declare enum UniverseApiApiKeys {
}
export declare class UniverseApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: UniverseApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get bloodlines
     * Get a list of bloodlines  --- Alternate route: &#x60;/dev/universe/bloodlines/&#x60;  Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseBloodlines(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseBloodlines200Ok>;
    }>;
    /**
     * Get item categories
     * Get a list of item categories  --- Alternate route: &#x60;/dev/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/v1/universe/categories/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategories(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item category information
     * Get information of an item category  --- Alternate route: &#x60;/dev/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  --- This route expires daily at 11:05
     * @param categoryId An Eve item category ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategoriesCategoryId(categoryId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseCategoriesCategoryIdOk;
    }>;
    /**
     * Get constellations
     * Get a list of constellations  --- Alternate route: &#x60;/dev/universe/constellations/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/v1/universe/constellations/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellations(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get constellation information
     * Get information on a constellation  --- Alternate route: &#x60;/dev/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  --- This route expires daily at 11:05
     * @param constellationId constellation_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellationsConstellationId(constellationId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseConstellationsConstellationIdOk;
    }>;
    /**
     * Get factions
     * Get a list of factions  --- Alternate route: &#x60;/dev/universe/factions/&#x60;  Alternate route: &#x60;/v2/universe/factions/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseFactions(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseFactions200Ok>;
    }>;
    /**
     * Get graphics
     * Get a list of graphics  --- Alternate route: &#x60;/dev/universe/graphics/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/v1/universe/graphics/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphics(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get graphic information
     * Get information on a graphic  --- Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  --- This route expires daily at 11:05
     * @param graphicId graphic_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphicsGraphicId(graphicId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseGraphicsGraphicIdOk;
    }>;
    /**
     * Get item groups
     * Get a list of item groups  --- Alternate route: &#x60;/dev/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/v1/universe/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroups(datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item group information
     * Get information on an item group  --- Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  --- This route expires daily at 11:05
     * @param groupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroupsGroupId(groupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseGroupsGroupIdOk;
    }>;
    /**
     * Get moon information
     * Get information on a moon  --- Alternate route: &#x60;/dev/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  --- This route expires daily at 11:05
     * @param moonId moon_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseMoonsMoonId(moonId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseMoonsMoonIdOk;
    }>;
    /**
     * Get planet information
     * Get information on a planet  --- Alternate route: &#x60;/dev/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  --- This route expires daily at 11:05
     * @param planetId planet_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniversePlanetsPlanetId(planetId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniversePlanetsPlanetIdOk;
    }>;
    /**
     * Get character races
     * Get a list of character races  --- Alternate route: &#x60;/dev/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/v1/universe/races/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRaces(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseRaces200Ok>;
    }>;
    /**
     * Get regions
     * Get a list of regions  --- Alternate route: &#x60;/dev/universe/regions/&#x60;  Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/v1/universe/regions/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegions(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get region information
     * Get information on a region  --- Alternate route: &#x60;/dev/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  --- This route expires daily at 11:05
     * @param regionId region_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegionsRegionId(regionId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseRegionsRegionIdOk;
    }>;
    /**
     * Get stargate information
     * Get information on a stargate  --- Alternate route: &#x60;/dev/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  --- This route expires daily at 11:05
     * @param stargateId stargate_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStargatesStargateId(stargateId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStargatesStargateIdOk;
    }>;
    /**
     * Get star information
     * Get information on a star  --- Alternate route: &#x60;/dev/universe/stars/{star_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stars/{star_id}/&#x60;  Alternate route: &#x60;/v1/universe/stars/{star_id}/&#x60;  --- This route expires daily at 11:05
     * @param starId star_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStarsStarId(starId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStarsStarIdOk;
    }>;
    /**
     * Get station information
     * Get information on a station  --- Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  --- This route is cached for up to 300 seconds
     * @param stationId station_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStationsStationId(stationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStationsStationIdOk;
    }>;
    /**
     * List all public structures
     * List all public structures  --- Alternate route: &#x60;/dev/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/v1/universe/structures/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructures(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get structure information
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  --- Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param structureId An Eve structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructuresStructureId(structureId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStructuresStructureIdOk;
    }>;
    /**
     * Get system jumps
     * Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: &#x60;/dev/universe/system_jumps/&#x60;  Alternate route: &#x60;/legacy/universe/system_jumps/&#x60;  Alternate route: &#x60;/v1/universe/system_jumps/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemJumps(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseSystemJumps200Ok>;
    }>;
    /**
     * Get system kills
     * Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: &#x60;/dev/universe/system_kills/&#x60;  Alternate route: &#x60;/v2/universe/system_kills/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemKills(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseSystemKills200Ok>;
    }>;
    /**
     * Get solar systems
     * Get a list of solar systems  --- Alternate route: &#x60;/dev/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/v1/universe/systems/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystems(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get solar system information
     * Get information on a solar system  --- Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/v3/universe/systems/{system_id}/&#x60;  --- This route expires daily at 11:05
     * @param systemId system_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemsSystemId(systemId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseSystemsSystemIdOk;
    }>;
    /**
     * Get types
     * Get a list of type ids  --- Alternate route: &#x60;/dev/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/v1/universe/types/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypes(datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get type information
     * Get information on a type  --- Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/v3/universe/types/{type_id}/&#x60;  --- This route expires daily at 11:05
     * @param typeId An Eve item type ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypesTypeId(typeId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseTypesTypeIdOk;
    }>;
    /**
     * Bulk names to IDs
     * Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  --- Alternate route: &#x60;/dev/universe/ids/&#x60;  Alternate route: &#x60;/legacy/universe/ids/&#x60;  Alternate route: &#x60;/v1/universe/ids/&#x60;
     * @param names The names to resolve
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseIds(names: Array<string>, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostUniverseIdsOk;
    }>;
    /**
     * Get names and categories for a set of ID&#39;s
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  --- Alternate route: &#x60;/dev/universe/names/&#x60;  Alternate route: &#x60;/v2/universe/names/&#x60;
     * @param ids The ids to resolve
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseNames(ids: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostUniverseNames200Ok>;
    }>;
}
export declare enum UserInterfaceApiApiKeys {
}
export declare class UserInterfaceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: UserInterfaceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  --- Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60;
     * @param addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param destinationId The destination to travel to, can be solar system, station or structure&#39;s id
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiAutopilotWaypoint(addToBeginning: boolean, clearOtherWaypoints: boolean, destinationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Contract Window
     * Open the contract window inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60;
     * @param contractId The contract to open
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowContract(contractId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60;
     * @param targetId The target to open
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowInformation(targetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60;
     * @param typeId The item type to open in market window
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowMarketdetails(typeId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  --- Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60;
     * @param newMail The details of mail to create
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowNewmail(newMail: PostUiOpenwindowNewmailNewMail, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum WalletApiApiKeys {
}
export declare class WalletApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: WalletApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get a character&#39;s wallet balance
     * Returns a character&#39;s wallet balance  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/wallet/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWallet(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Get character wallet journal
     * Retrieve character wallet journal  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/journal/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/wallet/journal/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWalletJournal(characterId: number, datasource?: string, fromId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdWalletJournal200Ok>;
    }>;
    /**
     * Get wallet transactions
     * Get wallet transactions of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/wallet/transactions/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromId Only show transactions happened before the one referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWalletTransactions(characterId: number, datasource?: string, fromId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdWalletTransactions200Ok>;
    }>;
    /**
     * Returns a corporation&#39;s wallet balance
     * Get a corporation&#39;s wallets  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWallets(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdWallets200Ok>;
    }>;
    /**
     * Get corporation wallet journal
     * Retrieve corporation wallet journal  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param division Wallet key of the division to fetch journals from
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWalletsDivisionJournal(corporationId: number, division: number, datasource?: string, fromId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdWalletsDivisionJournal200Ok>;
    }>;
    /**
     * Get corporation wallet transactions
     * Get wallet transactions of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param division Wallet key of the division to fetch journals from
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWalletsDivisionTransactions(corporationId: number, division: number, datasource?: string, fromId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdWalletsDivisionTransactions200Ok>;
    }>;
}
export declare enum WarsApiApiKeys {
}
export declare class WarsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: WarsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List wars
     * Return a list of wars  --- Alternate route: &#x60;/dev/wars/&#x60;  Alternate route: &#x60;/legacy/wars/&#x60;  Alternate route: &#x60;/v1/wars/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param maxWarId Only return wars with ID smaller than this.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWars(datasource?: string, maxWarId?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get war information
     * Return details about a war  --- Alternate route: &#x60;/dev/wars/{war_id}/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/&#x60;  Alternate route: &#x60;/v1/wars/{war_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param warId ID for a war
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarId(warId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetWarsWarIdOk;
    }>;
    /**
     * List kills for a war
     * Return a list of kills related to a war  --- Alternate route: &#x60;/dev/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/v1/wars/{war_id}/killmails/&#x60;  --- This route is cached for up to 3600 seconds
     * @param warId A valid war ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarIdKillmails(warId: number, datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetWarsWarIdKillmails200Ok>;
    }>;
}
