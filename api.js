"use strict";
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.5
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const Promise = require("bluebird");
let defaultBasePath = 'https://esi.tech.ccp.is/latest';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
/**
* Unprocessable entity
*/
class DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity {
}
exports.DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity = DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity;
/**
* Not found
*/
class DeleteFleetsFleetIdMembersMemberIdNotFound {
}
exports.DeleteFleetsFleetIdMembersMemberIdNotFound = DeleteFleetsFleetIdMembersMemberIdNotFound;
/**
* Not found
*/
class DeleteFleetsFleetIdSquadsSquadIdNotFound {
}
exports.DeleteFleetsFleetIdSquadsSquadIdNotFound = DeleteFleetsFleetIdSquadsSquadIdNotFound;
/**
* Not found
*/
class DeleteFleetsFleetIdWingsWingIdNotFound {
}
exports.DeleteFleetsFleetIdWingsWingIdNotFound = DeleteFleetsFleetIdWingsWingIdNotFound;
/**
* Forbidden model
*/
class Forbidden {
}
exports.Forbidden = Forbidden;
/**
* 200 ok object
*/
class GetAlliancesAllianceIdContacts200Ok {
}
exports.GetAlliancesAllianceIdContacts200Ok = GetAlliancesAllianceIdContacts200Ok;
(function (GetAlliancesAllianceIdContacts200Ok) {
    let ContactTypeEnum;
    (function (ContactTypeEnum) {
        ContactTypeEnum[ContactTypeEnum["Character"] = 'character'] = "Character";
        ContactTypeEnum[ContactTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        ContactTypeEnum[ContactTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        ContactTypeEnum[ContactTypeEnum["Faction"] = 'faction'] = "Faction";
    })(ContactTypeEnum = GetAlliancesAllianceIdContacts200Ok.ContactTypeEnum || (GetAlliancesAllianceIdContacts200Ok.ContactTypeEnum = {}));
})(GetAlliancesAllianceIdContacts200Ok = exports.GetAlliancesAllianceIdContacts200Ok || (exports.GetAlliancesAllianceIdContacts200Ok = {}));
/**
* No image server for this datasource
*/
class GetAlliancesAllianceIdIconsNotFound {
}
exports.GetAlliancesAllianceIdIconsNotFound = GetAlliancesAllianceIdIconsNotFound;
/**
* 200 ok object
*/
class GetAlliancesAllianceIdIconsOk {
}
exports.GetAlliancesAllianceIdIconsOk = GetAlliancesAllianceIdIconsOk;
/**
* Not found
*/
class GetAlliancesAllianceIdNotFound {
}
exports.GetAlliancesAllianceIdNotFound = GetAlliancesAllianceIdNotFound;
/**
* 200 ok object
*/
class GetAlliancesAllianceIdOk {
}
exports.GetAlliancesAllianceIdOk = GetAlliancesAllianceIdOk;
/**
* 200 ok object
*/
class GetAlliancesNames200Ok {
}
exports.GetAlliancesNames200Ok = GetAlliancesNames200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdAgentsResearch200Ok {
}
exports.GetCharactersCharacterIdAgentsResearch200Ok = GetCharactersCharacterIdAgentsResearch200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdAssets200Ok {
}
exports.GetCharactersCharacterIdAssets200Ok = GetCharactersCharacterIdAssets200Ok;
(function (GetCharactersCharacterIdAssets200Ok) {
    let LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["SolarSystem"] = 'solar_system'] = "SolarSystem";
        LocationTypeEnum[LocationTypeEnum["Other"] = 'other'] = "Other";
    })(LocationTypeEnum = GetCharactersCharacterIdAssets200Ok.LocationTypeEnum || (GetCharactersCharacterIdAssets200Ok.LocationTypeEnum = {}));
    let LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpseBay"] = 'CorpseBay'] = "CorpseBay";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["HiddenModifiers"] = 'HiddenModifiers'] = "HiddenModifiers";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["Skill"] = 'Skill'] = "Skill";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["SubSystemBay"] = 'SubSystemBay'] = "SubSystemBay";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Wardrobe"] = 'Wardrobe'] = "Wardrobe";
    })(LocationFlagEnum = GetCharactersCharacterIdAssets200Ok.LocationFlagEnum || (GetCharactersCharacterIdAssets200Ok.LocationFlagEnum = {}));
})(GetCharactersCharacterIdAssets200Ok = exports.GetCharactersCharacterIdAssets200Ok || (exports.GetCharactersCharacterIdAssets200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdAttributesOk {
}
exports.GetCharactersCharacterIdAttributesOk = GetCharactersCharacterIdAttributesOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdBlueprints200Ok {
}
exports.GetCharactersCharacterIdBlueprints200Ok = GetCharactersCharacterIdBlueprints200Ok;
(function (GetCharactersCharacterIdBlueprints200Ok) {
    let LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpseBay"] = 'CorpseBay'] = "CorpseBay";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["HiddenModifiers"] = 'HiddenModifiers'] = "HiddenModifiers";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["Module"] = 'Module'] = "Module";
    })(LocationFlagEnum = GetCharactersCharacterIdBlueprints200Ok.LocationFlagEnum || (GetCharactersCharacterIdBlueprints200Ok.LocationFlagEnum = {}));
})(GetCharactersCharacterIdBlueprints200Ok = exports.GetCharactersCharacterIdBlueprints200Ok || (exports.GetCharactersCharacterIdBlueprints200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdBookmarks200Ok {
}
exports.GetCharactersCharacterIdBookmarks200Ok = GetCharactersCharacterIdBookmarks200Ok;
/**
* Optional object that is returned if a bookmark was made on a planet or a random location in space.
*/
class GetCharactersCharacterIdBookmarksCoordinates {
}
exports.GetCharactersCharacterIdBookmarksCoordinates = GetCharactersCharacterIdBookmarksCoordinates;
/**
* 200 ok object
*/
class GetCharactersCharacterIdBookmarksFolders200Ok {
}
exports.GetCharactersCharacterIdBookmarksFolders200Ok = GetCharactersCharacterIdBookmarksFolders200Ok;
/**
* Optional object that is returned if a bookmark was made on a particular item.
*/
class GetCharactersCharacterIdBookmarksItem {
}
exports.GetCharactersCharacterIdBookmarksItem = GetCharactersCharacterIdBookmarksItem;
/**
* event
*/
class GetCharactersCharacterIdCalendar200Ok {
}
exports.GetCharactersCharacterIdCalendar200Ok = GetCharactersCharacterIdCalendar200Ok;
(function (GetCharactersCharacterIdCalendar200Ok) {
    let EventResponseEnum;
    (function (EventResponseEnum) {
        EventResponseEnum[EventResponseEnum["Declined"] = 'declined'] = "Declined";
        EventResponseEnum[EventResponseEnum["NotResponded"] = 'not_responded'] = "NotResponded";
        EventResponseEnum[EventResponseEnum["Accepted"] = 'accepted'] = "Accepted";
        EventResponseEnum[EventResponseEnum["Tentative"] = 'tentative'] = "Tentative";
    })(EventResponseEnum = GetCharactersCharacterIdCalendar200Ok.EventResponseEnum || (GetCharactersCharacterIdCalendar200Ok.EventResponseEnum = {}));
})(GetCharactersCharacterIdCalendar200Ok = exports.GetCharactersCharacterIdCalendar200Ok || (exports.GetCharactersCharacterIdCalendar200Ok = {}));
/**
* character_id and response of an attendee
*/
class GetCharactersCharacterIdCalendarEventIdAttendees200Ok {
}
exports.GetCharactersCharacterIdCalendarEventIdAttendees200Ok = GetCharactersCharacterIdCalendarEventIdAttendees200Ok;
(function (GetCharactersCharacterIdCalendarEventIdAttendees200Ok) {
    let EventResponseEnum;
    (function (EventResponseEnum) {
        EventResponseEnum[EventResponseEnum["Declined"] = 'declined'] = "Declined";
        EventResponseEnum[EventResponseEnum["NotResponded"] = 'not_responded'] = "NotResponded";
        EventResponseEnum[EventResponseEnum["Accepted"] = 'accepted'] = "Accepted";
        EventResponseEnum[EventResponseEnum["Tentative"] = 'tentative'] = "Tentative";
    })(EventResponseEnum = GetCharactersCharacterIdCalendarEventIdAttendees200Ok.EventResponseEnum || (GetCharactersCharacterIdCalendarEventIdAttendees200Ok.EventResponseEnum = {}));
})(GetCharactersCharacterIdCalendarEventIdAttendees200Ok = exports.GetCharactersCharacterIdCalendarEventIdAttendees200Ok || (exports.GetCharactersCharacterIdCalendarEventIdAttendees200Ok = {}));
/**
* Full details of a specific event
*/
class GetCharactersCharacterIdCalendarEventIdOk {
}
exports.GetCharactersCharacterIdCalendarEventIdOk = GetCharactersCharacterIdCalendarEventIdOk;
(function (GetCharactersCharacterIdCalendarEventIdOk) {
    let OwnerTypeEnum;
    (function (OwnerTypeEnum) {
        OwnerTypeEnum[OwnerTypeEnum["EveServer"] = 'eve_server'] = "EveServer";
        OwnerTypeEnum[OwnerTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        OwnerTypeEnum[OwnerTypeEnum["Faction"] = 'faction'] = "Faction";
        OwnerTypeEnum[OwnerTypeEnum["Character"] = 'character'] = "Character";
        OwnerTypeEnum[OwnerTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(OwnerTypeEnum = GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum || (GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum = {}));
})(GetCharactersCharacterIdCalendarEventIdOk = exports.GetCharactersCharacterIdCalendarEventIdOk || (exports.GetCharactersCharacterIdCalendarEventIdOk = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdChatChannels200Ok {
}
exports.GetCharactersCharacterIdChatChannels200Ok = GetCharactersCharacterIdChatChannels200Ok;
/**
* allowed object
*/
class GetCharactersCharacterIdChatChannelsAllowed {
}
exports.GetCharactersCharacterIdChatChannelsAllowed = GetCharactersCharacterIdChatChannelsAllowed;
(function (GetCharactersCharacterIdChatChannelsAllowed) {
    let AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsAllowed = exports.GetCharactersCharacterIdChatChannelsAllowed || (exports.GetCharactersCharacterIdChatChannelsAllowed = {}));
/**
* blocked object
*/
class GetCharactersCharacterIdChatChannelsBlocked {
}
exports.GetCharactersCharacterIdChatChannelsBlocked = GetCharactersCharacterIdChatChannelsBlocked;
(function (GetCharactersCharacterIdChatChannelsBlocked) {
    let AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsBlocked = exports.GetCharactersCharacterIdChatChannelsBlocked || (exports.GetCharactersCharacterIdChatChannelsBlocked = {}));
/**
* muted object
*/
class GetCharactersCharacterIdChatChannelsMuted {
}
exports.GetCharactersCharacterIdChatChannelsMuted = GetCharactersCharacterIdChatChannelsMuted;
(function (GetCharactersCharacterIdChatChannelsMuted) {
    let AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsMuted = exports.GetCharactersCharacterIdChatChannelsMuted || (exports.GetCharactersCharacterIdChatChannelsMuted = {}));
/**
* operator object
*/
class GetCharactersCharacterIdChatChannelsOperator {
}
exports.GetCharactersCharacterIdChatChannelsOperator = GetCharactersCharacterIdChatChannelsOperator;
(function (GetCharactersCharacterIdChatChannelsOperator) {
    let AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsOperator = exports.GetCharactersCharacterIdChatChannelsOperator || (exports.GetCharactersCharacterIdChatChannelsOperator = {}));
/**
* home_location object
*/
class GetCharactersCharacterIdClonesHomeLocation {
}
exports.GetCharactersCharacterIdClonesHomeLocation = GetCharactersCharacterIdClonesHomeLocation;
(function (GetCharactersCharacterIdClonesHomeLocation) {
    let LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["Structure"] = 'structure'] = "Structure";
    })(LocationTypeEnum = GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum || (GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum = {}));
})(GetCharactersCharacterIdClonesHomeLocation = exports.GetCharactersCharacterIdClonesHomeLocation || (exports.GetCharactersCharacterIdClonesHomeLocation = {}));
/**
* jump_clone object
*/
class GetCharactersCharacterIdClonesJumpClone {
}
exports.GetCharactersCharacterIdClonesJumpClone = GetCharactersCharacterIdClonesJumpClone;
(function (GetCharactersCharacterIdClonesJumpClone) {
    let LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["Structure"] = 'structure'] = "Structure";
    })(LocationTypeEnum = GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum || (GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum = {}));
})(GetCharactersCharacterIdClonesJumpClone = exports.GetCharactersCharacterIdClonesJumpClone || (exports.GetCharactersCharacterIdClonesJumpClone = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdClonesOk {
}
exports.GetCharactersCharacterIdClonesOk = GetCharactersCharacterIdClonesOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdContacts200Ok {
}
exports.GetCharactersCharacterIdContacts200Ok = GetCharactersCharacterIdContacts200Ok;
(function (GetCharactersCharacterIdContacts200Ok) {
    let ContactTypeEnum;
    (function (ContactTypeEnum) {
        ContactTypeEnum[ContactTypeEnum["Character"] = 'character'] = "Character";
        ContactTypeEnum[ContactTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        ContactTypeEnum[ContactTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        ContactTypeEnum[ContactTypeEnum["Faction"] = 'faction'] = "Faction";
    })(ContactTypeEnum = GetCharactersCharacterIdContacts200Ok.ContactTypeEnum || (GetCharactersCharacterIdContacts200Ok.ContactTypeEnum = {}));
})(GetCharactersCharacterIdContacts200Ok = exports.GetCharactersCharacterIdContacts200Ok || (exports.GetCharactersCharacterIdContacts200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdContactsLabels200Ok {
}
exports.GetCharactersCharacterIdContactsLabels200Ok = GetCharactersCharacterIdContactsLabels200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdContracts200Ok {
}
exports.GetCharactersCharacterIdContracts200Ok = GetCharactersCharacterIdContracts200Ok;
(function (GetCharactersCharacterIdContracts200Ok) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Unknown"] = 'unknown'] = "Unknown";
        TypeEnum[TypeEnum["ItemExchange"] = 'item_exchange'] = "ItemExchange";
        TypeEnum[TypeEnum["Auction"] = 'auction'] = "Auction";
        TypeEnum[TypeEnum["Courier"] = 'courier'] = "Courier";
        TypeEnum[TypeEnum["Loan"] = 'loan'] = "Loan";
    })(TypeEnum = GetCharactersCharacterIdContracts200Ok.TypeEnum || (GetCharactersCharacterIdContracts200Ok.TypeEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Outstanding"] = 'outstanding'] = "Outstanding";
        StatusEnum[StatusEnum["InProgress"] = 'in_progress'] = "InProgress";
        StatusEnum[StatusEnum["FinishedIssuer"] = 'finished_issuer'] = "FinishedIssuer";
        StatusEnum[StatusEnum["FinishedContractor"] = 'finished_contractor'] = "FinishedContractor";
        StatusEnum[StatusEnum["Finished"] = 'finished'] = "Finished";
        StatusEnum[StatusEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StatusEnum[StatusEnum["Rejected"] = 'rejected'] = "Rejected";
        StatusEnum[StatusEnum["Failed"] = 'failed'] = "Failed";
        StatusEnum[StatusEnum["Deleted"] = 'deleted'] = "Deleted";
        StatusEnum[StatusEnum["Reversed"] = 'reversed'] = "Reversed";
    })(StatusEnum = GetCharactersCharacterIdContracts200Ok.StatusEnum || (GetCharactersCharacterIdContracts200Ok.StatusEnum = {}));
    let AvailabilityEnum;
    (function (AvailabilityEnum) {
        AvailabilityEnum[AvailabilityEnum["Public"] = 'public'] = "Public";
        AvailabilityEnum[AvailabilityEnum["Personal"] = 'personal'] = "Personal";
        AvailabilityEnum[AvailabilityEnum["Corporation"] = 'corporation'] = "Corporation";
        AvailabilityEnum[AvailabilityEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AvailabilityEnum = GetCharactersCharacterIdContracts200Ok.AvailabilityEnum || (GetCharactersCharacterIdContracts200Ok.AvailabilityEnum = {}));
})(GetCharactersCharacterIdContracts200Ok = exports.GetCharactersCharacterIdContracts200Ok || (exports.GetCharactersCharacterIdContracts200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdContractsContractIdBids200Ok {
}
exports.GetCharactersCharacterIdContractsContractIdBids200Ok = GetCharactersCharacterIdContractsContractIdBids200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdContractsContractIdItems200Ok {
}
exports.GetCharactersCharacterIdContractsContractIdItems200Ok = GetCharactersCharacterIdContractsContractIdItems200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdCorporationhistory200Ok {
}
exports.GetCharactersCharacterIdCorporationhistory200Ok = GetCharactersCharacterIdCorporationhistory200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdFatigueOk {
}
exports.GetCharactersCharacterIdFatigueOk = GetCharactersCharacterIdFatigueOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdFittings200Ok {
}
exports.GetCharactersCharacterIdFittings200Ok = GetCharactersCharacterIdFittings200Ok;
/**
* item object
*/
class GetCharactersCharacterIdFittingsItem {
}
exports.GetCharactersCharacterIdFittingsItem = GetCharactersCharacterIdFittingsItem;
/**
* Not found
*/
class GetCharactersCharacterIdFleetNotFound {
}
exports.GetCharactersCharacterIdFleetNotFound = GetCharactersCharacterIdFleetNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdFleetOk {
}
exports.GetCharactersCharacterIdFleetOk = GetCharactersCharacterIdFleetOk;
(function (GetCharactersCharacterIdFleetOk) {
    let RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
    })(RoleEnum = GetCharactersCharacterIdFleetOk.RoleEnum || (GetCharactersCharacterIdFleetOk.RoleEnum = {}));
})(GetCharactersCharacterIdFleetOk = exports.GetCharactersCharacterIdFleetOk || (exports.GetCharactersCharacterIdFleetOk = {}));
/**
* Summary of kills done by the given character against enemy factions
*/
class GetCharactersCharacterIdFwStatsKills {
}
exports.GetCharactersCharacterIdFwStatsKills = GetCharactersCharacterIdFwStatsKills;
/**
* 200 ok object
*/
class GetCharactersCharacterIdFwStatsOk {
}
exports.GetCharactersCharacterIdFwStatsOk = GetCharactersCharacterIdFwStatsOk;
/**
* Summary of victory points gained by the given character for the enlisted faction
*/
class GetCharactersCharacterIdFwStatsVictoryPoints {
}
exports.GetCharactersCharacterIdFwStatsVictoryPoints = GetCharactersCharacterIdFwStatsVictoryPoints;
/**
* 200 ok object
*/
class GetCharactersCharacterIdIndustryJobs200Ok {
}
exports.GetCharactersCharacterIdIndustryJobs200Ok = GetCharactersCharacterIdIndustryJobs200Ok;
(function (GetCharactersCharacterIdIndustryJobs200Ok) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StatusEnum[StatusEnum["Delivered"] = 'delivered'] = "Delivered";
        StatusEnum[StatusEnum["Paused"] = 'paused'] = "Paused";
        StatusEnum[StatusEnum["Ready"] = 'ready'] = "Ready";
        StatusEnum[StatusEnum["Reverted"] = 'reverted'] = "Reverted";
    })(StatusEnum = GetCharactersCharacterIdIndustryJobs200Ok.StatusEnum || (GetCharactersCharacterIdIndustryJobs200Ok.StatusEnum = {}));
})(GetCharactersCharacterIdIndustryJobs200Ok = exports.GetCharactersCharacterIdIndustryJobs200Ok || (exports.GetCharactersCharacterIdIndustryJobs200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdKillmailsRecent200Ok {
}
exports.GetCharactersCharacterIdKillmailsRecent200Ok = GetCharactersCharacterIdKillmailsRecent200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdLocationOk {
}
exports.GetCharactersCharacterIdLocationOk = GetCharactersCharacterIdLocationOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdLoyaltyPoints200Ok {
}
exports.GetCharactersCharacterIdLoyaltyPoints200Ok = GetCharactersCharacterIdLoyaltyPoints200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMail200Ok {
}
exports.GetCharactersCharacterIdMail200Ok = GetCharactersCharacterIdMail200Ok;
/**
* label object
*/
class GetCharactersCharacterIdMailLabelsLabel {
}
exports.GetCharactersCharacterIdMailLabelsLabel = GetCharactersCharacterIdMailLabelsLabel;
(function (GetCharactersCharacterIdMailLabelsLabel) {
    let ColorEnum;
    (function (ColorEnum) {
        ColorEnum[ColorEnum["_0000fe"] = '#0000fe'] = "_0000fe";
        ColorEnum[ColorEnum["_006634"] = '#006634'] = "_006634";
        ColorEnum[ColorEnum["_0099ff"] = '#0099ff'] = "_0099ff";
        ColorEnum[ColorEnum["_00ff33"] = '#00ff33'] = "_00ff33";
        ColorEnum[ColorEnum["_01ffff"] = '#01ffff'] = "_01ffff";
        ColorEnum[ColorEnum["_349800"] = '#349800'] = "_349800";
        ColorEnum[ColorEnum["_660066"] = '#660066'] = "_660066";
        ColorEnum[ColorEnum["_666666"] = '#666666'] = "_666666";
        ColorEnum[ColorEnum["_999999"] = '#999999'] = "_999999";
        ColorEnum[ColorEnum["_99ffff"] = '#99ffff'] = "_99ffff";
        ColorEnum[ColorEnum["_9a0000"] = '#9a0000'] = "_9a0000";
        ColorEnum[ColorEnum["Ccff9a"] = '#ccff9a'] = "Ccff9a";
        ColorEnum[ColorEnum["E6e6e6"] = '#e6e6e6'] = "E6e6e6";
        ColorEnum[ColorEnum["Fe0000"] = '#fe0000'] = "Fe0000";
        ColorEnum[ColorEnum["Ff6600"] = '#ff6600'] = "Ff6600";
        ColorEnum[ColorEnum["Ffff01"] = '#ffff01'] = "Ffff01";
        ColorEnum[ColorEnum["Ffffcd"] = '#ffffcd'] = "Ffffcd";
        ColorEnum[ColorEnum["Ffffff"] = '#ffffff'] = "Ffffff";
    })(ColorEnum = GetCharactersCharacterIdMailLabelsLabel.ColorEnum || (GetCharactersCharacterIdMailLabelsLabel.ColorEnum = {}));
})(GetCharactersCharacterIdMailLabelsLabel = exports.GetCharactersCharacterIdMailLabelsLabel || (exports.GetCharactersCharacterIdMailLabelsLabel = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailLabelsOk {
}
exports.GetCharactersCharacterIdMailLabelsOk = GetCharactersCharacterIdMailLabelsOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailLists200Ok {
}
exports.GetCharactersCharacterIdMailLists200Ok = GetCharactersCharacterIdMailLists200Ok;
/**
* Not found
*/
class GetCharactersCharacterIdMailMailIdNotFound {
}
exports.GetCharactersCharacterIdMailMailIdNotFound = GetCharactersCharacterIdMailMailIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailMailIdOk {
}
exports.GetCharactersCharacterIdMailMailIdOk = GetCharactersCharacterIdMailMailIdOk;
/**
* recipient object
*/
class GetCharactersCharacterIdMailMailIdRecipient {
}
exports.GetCharactersCharacterIdMailMailIdRecipient = GetCharactersCharacterIdMailMailIdRecipient;
(function (GetCharactersCharacterIdMailMailIdRecipient) {
    let RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum || (GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum = {}));
})(GetCharactersCharacterIdMailMailIdRecipient = exports.GetCharactersCharacterIdMailMailIdRecipient || (exports.GetCharactersCharacterIdMailMailIdRecipient = {}));
/**
* recipient object
*/
class GetCharactersCharacterIdMailRecipient {
}
exports.GetCharactersCharacterIdMailRecipient = GetCharactersCharacterIdMailRecipient;
(function (GetCharactersCharacterIdMailRecipient) {
    let RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = GetCharactersCharacterIdMailRecipient.RecipientTypeEnum || (GetCharactersCharacterIdMailRecipient.RecipientTypeEnum = {}));
})(GetCharactersCharacterIdMailRecipient = exports.GetCharactersCharacterIdMailRecipient || (exports.GetCharactersCharacterIdMailRecipient = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdMedals200Ok {
}
exports.GetCharactersCharacterIdMedals200Ok = GetCharactersCharacterIdMedals200Ok;
(function (GetCharactersCharacterIdMedals200Ok) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Public"] = 'public'] = "Public";
        StatusEnum[StatusEnum["Private"] = 'private'] = "Private";
    })(StatusEnum = GetCharactersCharacterIdMedals200Ok.StatusEnum || (GetCharactersCharacterIdMedals200Ok.StatusEnum = {}));
})(GetCharactersCharacterIdMedals200Ok = exports.GetCharactersCharacterIdMedals200Ok || (exports.GetCharactersCharacterIdMedals200Ok = {}));
/**
* graphic object
*/
class GetCharactersCharacterIdMedalsGraphic {
}
exports.GetCharactersCharacterIdMedalsGraphic = GetCharactersCharacterIdMedalsGraphic;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMining200Ok {
}
exports.GetCharactersCharacterIdMining200Ok = GetCharactersCharacterIdMining200Ok;
/**
* Not found
*/
class GetCharactersCharacterIdNotFound {
}
exports.GetCharactersCharacterIdNotFound = GetCharactersCharacterIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdNotifications200Ok {
}
exports.GetCharactersCharacterIdNotifications200Ok = GetCharactersCharacterIdNotifications200Ok;
(function (GetCharactersCharacterIdNotifications200Ok) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AcceptedAlly"] = 'AcceptedAlly'] = "AcceptedAlly";
        TypeEnum[TypeEnum["AcceptedSurrender"] = 'AcceptedSurrender'] = "AcceptedSurrender";
        TypeEnum[TypeEnum["AllAnchoringMsg"] = 'AllAnchoringMsg'] = "AllAnchoringMsg";
        TypeEnum[TypeEnum["AllMaintenanceBillMsg"] = 'AllMaintenanceBillMsg'] = "AllMaintenanceBillMsg";
        TypeEnum[TypeEnum["AllStrucInvulnerableMsg"] = 'AllStrucInvulnerableMsg'] = "AllStrucInvulnerableMsg";
        TypeEnum[TypeEnum["AllStructVulnerableMsg"] = 'AllStructVulnerableMsg'] = "AllStructVulnerableMsg";
        TypeEnum[TypeEnum["AllWarCorpJoinedAllianceMsg"] = 'AllWarCorpJoinedAllianceMsg'] = "AllWarCorpJoinedAllianceMsg";
        TypeEnum[TypeEnum["AllWarDeclaredMsg"] = 'AllWarDeclaredMsg'] = "AllWarDeclaredMsg";
        TypeEnum[TypeEnum["AllWarInvalidatedMsg"] = 'AllWarInvalidatedMsg'] = "AllWarInvalidatedMsg";
        TypeEnum[TypeEnum["AllWarRetractedMsg"] = 'AllWarRetractedMsg'] = "AllWarRetractedMsg";
        TypeEnum[TypeEnum["AllWarSurrenderMsg"] = 'AllWarSurrenderMsg'] = "AllWarSurrenderMsg";
        TypeEnum[TypeEnum["AllianceCapitalChanged"] = 'AllianceCapitalChanged'] = "AllianceCapitalChanged";
        TypeEnum[TypeEnum["AllyContractCancelled"] = 'AllyContractCancelled'] = "AllyContractCancelled";
        TypeEnum[TypeEnum["AllyJoinedWarAggressorMsg"] = 'AllyJoinedWarAggressorMsg'] = "AllyJoinedWarAggressorMsg";
        TypeEnum[TypeEnum["AllyJoinedWarAllyMsg"] = 'AllyJoinedWarAllyMsg'] = "AllyJoinedWarAllyMsg";
        TypeEnum[TypeEnum["AllyJoinedWarDefenderMsg"] = 'AllyJoinedWarDefenderMsg'] = "AllyJoinedWarDefenderMsg";
        TypeEnum[TypeEnum["BattlePunishFriendlyFire"] = 'BattlePunishFriendlyFire'] = "BattlePunishFriendlyFire";
        TypeEnum[TypeEnum["BillOutOfMoneyMsg"] = 'BillOutOfMoneyMsg'] = "BillOutOfMoneyMsg";
        TypeEnum[TypeEnum["BillPaidCorpAllMsg"] = 'BillPaidCorpAllMsg'] = "BillPaidCorpAllMsg";
        TypeEnum[TypeEnum["BountyClaimMsg"] = 'BountyClaimMsg'] = "BountyClaimMsg";
        TypeEnum[TypeEnum["BountyESSShared"] = 'BountyESSShared'] = "BountyESSShared";
        TypeEnum[TypeEnum["BountyESSTaken"] = 'BountyESSTaken'] = "BountyESSTaken";
        TypeEnum[TypeEnum["BountyPlacedAlliance"] = 'BountyPlacedAlliance'] = "BountyPlacedAlliance";
        TypeEnum[TypeEnum["BountyPlacedChar"] = 'BountyPlacedChar'] = "BountyPlacedChar";
        TypeEnum[TypeEnum["BountyPlacedCorp"] = 'BountyPlacedCorp'] = "BountyPlacedCorp";
        TypeEnum[TypeEnum["BountyYourBountyClaimed"] = 'BountyYourBountyClaimed'] = "BountyYourBountyClaimed";
        TypeEnum[TypeEnum["BuddyConnectContactAdd"] = 'BuddyConnectContactAdd'] = "BuddyConnectContactAdd";
        TypeEnum[TypeEnum["CharAppAcceptMsg"] = 'CharAppAcceptMsg'] = "CharAppAcceptMsg";
        TypeEnum[TypeEnum["CharAppRejectMsg"] = 'CharAppRejectMsg'] = "CharAppRejectMsg";
        TypeEnum[TypeEnum["CharAppWithdrawMsg"] = 'CharAppWithdrawMsg'] = "CharAppWithdrawMsg";
        TypeEnum[TypeEnum["CharLeftCorpMsg"] = 'CharLeftCorpMsg'] = "CharLeftCorpMsg";
        TypeEnum[TypeEnum["CharMedalMsg"] = 'CharMedalMsg'] = "CharMedalMsg";
        TypeEnum[TypeEnum["CharTerminationMsg"] = 'CharTerminationMsg'] = "CharTerminationMsg";
        TypeEnum[TypeEnum["CloneActivationMsg"] = 'CloneActivationMsg'] = "CloneActivationMsg";
        TypeEnum[TypeEnum["CloneActivationMsg2"] = 'CloneActivationMsg2'] = "CloneActivationMsg2";
        TypeEnum[TypeEnum["CloneMovedMsg"] = 'CloneMovedMsg'] = "CloneMovedMsg";
        TypeEnum[TypeEnum["CloneRevokedMsg1"] = 'CloneRevokedMsg1'] = "CloneRevokedMsg1";
        TypeEnum[TypeEnum["CloneRevokedMsg2"] = 'CloneRevokedMsg2'] = "CloneRevokedMsg2";
        TypeEnum[TypeEnum["ContactAdd"] = 'ContactAdd'] = "ContactAdd";
        TypeEnum[TypeEnum["ContactEdit"] = 'ContactEdit'] = "ContactEdit";
        TypeEnum[TypeEnum["ContainerPasswordMsg"] = 'ContainerPasswordMsg'] = "ContainerPasswordMsg";
        TypeEnum[TypeEnum["CorpAllBillMsg"] = 'CorpAllBillMsg'] = "CorpAllBillMsg";
        TypeEnum[TypeEnum["CorpAppAcceptMsg"] = 'CorpAppAcceptMsg'] = "CorpAppAcceptMsg";
        TypeEnum[TypeEnum["CorpAppInvitedMsg"] = 'CorpAppInvitedMsg'] = "CorpAppInvitedMsg";
        TypeEnum[TypeEnum["CorpAppNewMsg"] = 'CorpAppNewMsg'] = "CorpAppNewMsg";
        TypeEnum[TypeEnum["CorpAppRejectCustomMsg"] = 'CorpAppRejectCustomMsg'] = "CorpAppRejectCustomMsg";
        TypeEnum[TypeEnum["CorpAppRejectMsg"] = 'CorpAppRejectMsg'] = "CorpAppRejectMsg";
        TypeEnum[TypeEnum["CorpDividendMsg"] = 'CorpDividendMsg'] = "CorpDividendMsg";
        TypeEnum[TypeEnum["CorpFriendlyFireDisableTimerCompleted"] = 'CorpFriendlyFireDisableTimerCompleted'] = "CorpFriendlyFireDisableTimerCompleted";
        TypeEnum[TypeEnum["CorpFriendlyFireDisableTimerStarted"] = 'CorpFriendlyFireDisableTimerStarted'] = "CorpFriendlyFireDisableTimerStarted";
        TypeEnum[TypeEnum["CorpFriendlyFireEnableTimerCompleted"] = 'CorpFriendlyFireEnableTimerCompleted'] = "CorpFriendlyFireEnableTimerCompleted";
        TypeEnum[TypeEnum["CorpFriendlyFireEnableTimerStarted"] = 'CorpFriendlyFireEnableTimerStarted'] = "CorpFriendlyFireEnableTimerStarted";
        TypeEnum[TypeEnum["CorpKicked"] = 'CorpKicked'] = "CorpKicked";
        TypeEnum[TypeEnum["CorpLiquidationMsg"] = 'CorpLiquidationMsg'] = "CorpLiquidationMsg";
        TypeEnum[TypeEnum["CorpNewCEOMsg"] = 'CorpNewCEOMsg'] = "CorpNewCEOMsg";
        TypeEnum[TypeEnum["CorpNewsMsg"] = 'CorpNewsMsg'] = "CorpNewsMsg";
        TypeEnum[TypeEnum["CorpOfficeExpirationMsg"] = 'CorpOfficeExpirationMsg'] = "CorpOfficeExpirationMsg";
        TypeEnum[TypeEnum["CorpStructLostMsg"] = 'CorpStructLostMsg'] = "CorpStructLostMsg";
        TypeEnum[TypeEnum["CorpTaxChangeMsg"] = 'CorpTaxChangeMsg'] = "CorpTaxChangeMsg";
        TypeEnum[TypeEnum["CorpVoteCEORevokedMsg"] = 'CorpVoteCEORevokedMsg'] = "CorpVoteCEORevokedMsg";
        TypeEnum[TypeEnum["CorpVoteMsg"] = 'CorpVoteMsg'] = "CorpVoteMsg";
        TypeEnum[TypeEnum["CorpWarDeclaredMsg"] = 'CorpWarDeclaredMsg'] = "CorpWarDeclaredMsg";
        TypeEnum[TypeEnum["CorpWarFightingLegalMsg"] = 'CorpWarFightingLegalMsg'] = "CorpWarFightingLegalMsg";
        TypeEnum[TypeEnum["CorpWarInvalidatedMsg"] = 'CorpWarInvalidatedMsg'] = "CorpWarInvalidatedMsg";
        TypeEnum[TypeEnum["CorpWarRetractedMsg"] = 'CorpWarRetractedMsg'] = "CorpWarRetractedMsg";
        TypeEnum[TypeEnum["CorpWarSurrenderMsg"] = 'CorpWarSurrenderMsg'] = "CorpWarSurrenderMsg";
        TypeEnum[TypeEnum["CustomsMsg"] = 'CustomsMsg'] = "CustomsMsg";
        TypeEnum[TypeEnum["DeclareWar"] = 'DeclareWar'] = "DeclareWar";
        TypeEnum[TypeEnum["DistrictAttacked"] = 'DistrictAttacked'] = "DistrictAttacked";
        TypeEnum[TypeEnum["DustAppAcceptedMsg"] = 'DustAppAcceptedMsg'] = "DustAppAcceptedMsg";
        TypeEnum[TypeEnum["EntosisCaptureStarted"] = 'EntosisCaptureStarted'] = "EntosisCaptureStarted";
        TypeEnum[TypeEnum["FWAllianceKickMsg"] = 'FWAllianceKickMsg'] = "FWAllianceKickMsg";
        TypeEnum[TypeEnum["FWAllianceWarningMsg"] = 'FWAllianceWarningMsg'] = "FWAllianceWarningMsg";
        TypeEnum[TypeEnum["FWCharKickMsg"] = 'FWCharKickMsg'] = "FWCharKickMsg";
        TypeEnum[TypeEnum["FWCharRankGainMsg"] = 'FWCharRankGainMsg'] = "FWCharRankGainMsg";
        TypeEnum[TypeEnum["FWCharRankLossMsg"] = 'FWCharRankLossMsg'] = "FWCharRankLossMsg";
        TypeEnum[TypeEnum["FWCharWarningMsg"] = 'FWCharWarningMsg'] = "FWCharWarningMsg";
        TypeEnum[TypeEnum["FWCorpJoinMsg"] = 'FWCorpJoinMsg'] = "FWCorpJoinMsg";
        TypeEnum[TypeEnum["FWCorpKickMsg"] = 'FWCorpKickMsg'] = "FWCorpKickMsg";
        TypeEnum[TypeEnum["FWCorpLeaveMsg"] = 'FWCorpLeaveMsg'] = "FWCorpLeaveMsg";
        TypeEnum[TypeEnum["FWCorpWarningMsg"] = 'FWCorpWarningMsg'] = "FWCorpWarningMsg";
        TypeEnum[TypeEnum["FacWarCorpJoinRequestMsg"] = 'FacWarCorpJoinRequestMsg'] = "FacWarCorpJoinRequestMsg";
        TypeEnum[TypeEnum["FacWarCorpJoinWithdrawMsg"] = 'FacWarCorpJoinWithdrawMsg'] = "FacWarCorpJoinWithdrawMsg";
        TypeEnum[TypeEnum["FacWarCorpLeaveRequestMsg"] = 'FacWarCorpLeaveRequestMsg'] = "FacWarCorpLeaveRequestMsg";
        TypeEnum[TypeEnum["FacWarCorpLeaveWithdrawMsg"] = 'FacWarCorpLeaveWithdrawMsg'] = "FacWarCorpLeaveWithdrawMsg";
        TypeEnum[TypeEnum["FacWarLPDisqualifiedEvent"] = 'FacWarLPDisqualifiedEvent'] = "FacWarLPDisqualifiedEvent";
        TypeEnum[TypeEnum["FacWarLPDisqualifiedKill"] = 'FacWarLPDisqualifiedKill'] = "FacWarLPDisqualifiedKill";
        TypeEnum[TypeEnum["FacWarLPPayoutEvent"] = 'FacWarLPPayoutEvent'] = "FacWarLPPayoutEvent";
        TypeEnum[TypeEnum["FacWarLPPayoutKill"] = 'FacWarLPPayoutKill'] = "FacWarLPPayoutKill";
        TypeEnum[TypeEnum["GameTimeAdded"] = 'GameTimeAdded'] = "GameTimeAdded";
        TypeEnum[TypeEnum["GameTimeReceived"] = 'GameTimeReceived'] = "GameTimeReceived";
        TypeEnum[TypeEnum["GameTimeSent"] = 'GameTimeSent'] = "GameTimeSent";
        TypeEnum[TypeEnum["GiftReceived"] = 'GiftReceived'] = "GiftReceived";
        TypeEnum[TypeEnum["IHubDestroyedByBillFailure"] = 'IHubDestroyedByBillFailure'] = "IHubDestroyedByBillFailure";
        TypeEnum[TypeEnum["IncursionCompletedMsg"] = 'IncursionCompletedMsg'] = "IncursionCompletedMsg";
        TypeEnum[TypeEnum["IndustryTeamAuctionLost"] = 'IndustryTeamAuctionLost'] = "IndustryTeamAuctionLost";
        TypeEnum[TypeEnum["IndustryTeamAuctionWon"] = 'IndustryTeamAuctionWon'] = "IndustryTeamAuctionWon";
        TypeEnum[TypeEnum["InfrastructureHubBillAboutToExpire"] = 'InfrastructureHubBillAboutToExpire'] = "InfrastructureHubBillAboutToExpire";
        TypeEnum[TypeEnum["InsuranceExpirationMsg"] = 'InsuranceExpirationMsg'] = "InsuranceExpirationMsg";
        TypeEnum[TypeEnum["InsuranceFirstShipMsg"] = 'InsuranceFirstShipMsg'] = "InsuranceFirstShipMsg";
        TypeEnum[TypeEnum["InsuranceInvalidatedMsg"] = 'InsuranceInvalidatedMsg'] = "InsuranceInvalidatedMsg";
        TypeEnum[TypeEnum["InsuranceIssuedMsg"] = 'InsuranceIssuedMsg'] = "InsuranceIssuedMsg";
        TypeEnum[TypeEnum["InsurancePayoutMsg"] = 'InsurancePayoutMsg'] = "InsurancePayoutMsg";
        TypeEnum[TypeEnum["JumpCloneDeletedMsg1"] = 'JumpCloneDeletedMsg1'] = "JumpCloneDeletedMsg1";
        TypeEnum[TypeEnum["JumpCloneDeletedMsg2"] = 'JumpCloneDeletedMsg2'] = "JumpCloneDeletedMsg2";
        TypeEnum[TypeEnum["KillReportFinalBlow"] = 'KillReportFinalBlow'] = "KillReportFinalBlow";
        TypeEnum[TypeEnum["KillReportVictim"] = 'KillReportVictim'] = "KillReportVictim";
        TypeEnum[TypeEnum["KillRightAvailable"] = 'KillRightAvailable'] = "KillRightAvailable";
        TypeEnum[TypeEnum["KillRightAvailableOpen"] = 'KillRightAvailableOpen'] = "KillRightAvailableOpen";
        TypeEnum[TypeEnum["KillRightEarned"] = 'KillRightEarned'] = "KillRightEarned";
        TypeEnum[TypeEnum["KillRightUnavailable"] = 'KillRightUnavailable'] = "KillRightUnavailable";
        TypeEnum[TypeEnum["KillRightUnavailableOpen"] = 'KillRightUnavailableOpen'] = "KillRightUnavailableOpen";
        TypeEnum[TypeEnum["KillRightUsed"] = 'KillRightUsed'] = "KillRightUsed";
        TypeEnum[TypeEnum["LocateCharMsg"] = 'LocateCharMsg'] = "LocateCharMsg";
        TypeEnum[TypeEnum["MadeWarMutual"] = 'MadeWarMutual'] = "MadeWarMutual";
        TypeEnum[TypeEnum["MercOfferedNegotiationMsg"] = 'MercOfferedNegotiationMsg'] = "MercOfferedNegotiationMsg";
        TypeEnum[TypeEnum["MissionOfferExpirationMsg"] = 'MissionOfferExpirationMsg'] = "MissionOfferExpirationMsg";
        TypeEnum[TypeEnum["MissionTimeoutMsg"] = 'MissionTimeoutMsg'] = "MissionTimeoutMsg";
        TypeEnum[TypeEnum["MoonminingAutomaticFracture"] = 'MoonminingAutomaticFracture'] = "MoonminingAutomaticFracture";
        TypeEnum[TypeEnum["MoonminingExtractionCancelled"] = 'MoonminingExtractionCancelled'] = "MoonminingExtractionCancelled";
        TypeEnum[TypeEnum["MoonminingExtractionFinished"] = 'MoonminingExtractionFinished'] = "MoonminingExtractionFinished";
        TypeEnum[TypeEnum["MoonminingLaserFired"] = 'MoonminingLaserFired'] = "MoonminingLaserFired";
        TypeEnum[TypeEnum["NPCStandingsGained"] = 'NPCStandingsGained'] = "NPCStandingsGained";
        TypeEnum[TypeEnum["NPCStandingsLost"] = 'NPCStandingsLost'] = "NPCStandingsLost";
        TypeEnum[TypeEnum["OfferedSurrender"] = 'OfferedSurrender'] = "OfferedSurrender";
        TypeEnum[TypeEnum["OfferedToAlly"] = 'OfferedToAlly'] = "OfferedToAlly";
        TypeEnum[TypeEnum["OldLscMessages"] = 'OldLscMessages'] = "OldLscMessages";
        TypeEnum[TypeEnum["OperationFinished"] = 'OperationFinished'] = "OperationFinished";
        TypeEnum[TypeEnum["OrbitalAttacked"] = 'OrbitalAttacked'] = "OrbitalAttacked";
        TypeEnum[TypeEnum["OrbitalReinforced"] = 'OrbitalReinforced'] = "OrbitalReinforced";
        TypeEnum[TypeEnum["OwnershipTransferred"] = 'OwnershipTransferred'] = "OwnershipTransferred";
        TypeEnum[TypeEnum["ReimbursementMsg"] = 'ReimbursementMsg'] = "ReimbursementMsg";
        TypeEnum[TypeEnum["ResearchMissionAvailableMsg"] = 'ResearchMissionAvailableMsg'] = "ResearchMissionAvailableMsg";
        TypeEnum[TypeEnum["RetractsWar"] = 'RetractsWar'] = "RetractsWar";
        TypeEnum[TypeEnum["SeasonalChallengeCompleted"] = 'SeasonalChallengeCompleted'] = "SeasonalChallengeCompleted";
        TypeEnum[TypeEnum["SovAllClaimAquiredMsg"] = 'SovAllClaimAquiredMsg'] = "SovAllClaimAquiredMsg";
        TypeEnum[TypeEnum["SovAllClaimLostMsg"] = 'SovAllClaimLostMsg'] = "SovAllClaimLostMsg";
        TypeEnum[TypeEnum["SovCommandNodeEventStarted"] = 'SovCommandNodeEventStarted'] = "SovCommandNodeEventStarted";
        TypeEnum[TypeEnum["SovCorpBillLateMsg"] = 'SovCorpBillLateMsg'] = "SovCorpBillLateMsg";
        TypeEnum[TypeEnum["SovCorpClaimFailMsg"] = 'SovCorpClaimFailMsg'] = "SovCorpClaimFailMsg";
        TypeEnum[TypeEnum["SovDisruptorMsg"] = 'SovDisruptorMsg'] = "SovDisruptorMsg";
        TypeEnum[TypeEnum["SovStationEnteredFreeport"] = 'SovStationEnteredFreeport'] = "SovStationEnteredFreeport";
        TypeEnum[TypeEnum["SovStructureDestroyed"] = 'SovStructureDestroyed'] = "SovStructureDestroyed";
        TypeEnum[TypeEnum["SovStructureReinforced"] = 'SovStructureReinforced'] = "SovStructureReinforced";
        TypeEnum[TypeEnum["SovStructureSelfDestructCancel"] = 'SovStructureSelfDestructCancel'] = "SovStructureSelfDestructCancel";
        TypeEnum[TypeEnum["SovStructureSelfDestructFinished"] = 'SovStructureSelfDestructFinished'] = "SovStructureSelfDestructFinished";
        TypeEnum[TypeEnum["SovStructureSelfDestructRequested"] = 'SovStructureSelfDestructRequested'] = "SovStructureSelfDestructRequested";
        TypeEnum[TypeEnum["SovereigntyIHDamageMsg"] = 'SovereigntyIHDamageMsg'] = "SovereigntyIHDamageMsg";
        TypeEnum[TypeEnum["SovereigntySBUDamageMsg"] = 'SovereigntySBUDamageMsg'] = "SovereigntySBUDamageMsg";
        TypeEnum[TypeEnum["SovereigntyTCUDamageMsg"] = 'SovereigntyTCUDamageMsg'] = "SovereigntyTCUDamageMsg";
        TypeEnum[TypeEnum["StationAggressionMsg1"] = 'StationAggressionMsg1'] = "StationAggressionMsg1";
        TypeEnum[TypeEnum["StationAggressionMsg2"] = 'StationAggressionMsg2'] = "StationAggressionMsg2";
        TypeEnum[TypeEnum["StationConquerMsg"] = 'StationConquerMsg'] = "StationConquerMsg";
        TypeEnum[TypeEnum["StationServiceDisabled"] = 'StationServiceDisabled'] = "StationServiceDisabled";
        TypeEnum[TypeEnum["StationServiceEnabled"] = 'StationServiceEnabled'] = "StationServiceEnabled";
        TypeEnum[TypeEnum["StationStateChangeMsg"] = 'StationStateChangeMsg'] = "StationStateChangeMsg";
        TypeEnum[TypeEnum["StoryLineMissionAvailableMsg"] = 'StoryLineMissionAvailableMsg'] = "StoryLineMissionAvailableMsg";
        TypeEnum[TypeEnum["StructureAnchoring"] = 'StructureAnchoring'] = "StructureAnchoring";
        TypeEnum[TypeEnum["StructureCourierContractChanged"] = 'StructureCourierContractChanged'] = "StructureCourierContractChanged";
        TypeEnum[TypeEnum["StructureDestroyed"] = 'StructureDestroyed'] = "StructureDestroyed";
        TypeEnum[TypeEnum["StructureFuelAlert"] = 'StructureFuelAlert'] = "StructureFuelAlert";
        TypeEnum[TypeEnum["StructureItemsDelivered"] = 'StructureItemsDelivered'] = "StructureItemsDelivered";
        TypeEnum[TypeEnum["StructureLostArmor"] = 'StructureLostArmor'] = "StructureLostArmor";
        TypeEnum[TypeEnum["StructureLostShields"] = 'StructureLostShields'] = "StructureLostShields";
        TypeEnum[TypeEnum["StructureOnline"] = 'StructureOnline'] = "StructureOnline";
        TypeEnum[TypeEnum["StructureServicesOffline"] = 'StructureServicesOffline'] = "StructureServicesOffline";
        TypeEnum[TypeEnum["StructureUnanchoring"] = 'StructureUnanchoring'] = "StructureUnanchoring";
        TypeEnum[TypeEnum["StructureUnderAttack"] = 'StructureUnderAttack'] = "StructureUnderAttack";
        TypeEnum[TypeEnum["TowerAlertMsg"] = 'TowerAlertMsg'] = "TowerAlertMsg";
        TypeEnum[TypeEnum["TowerResourceAlertMsg"] = 'TowerResourceAlertMsg'] = "TowerResourceAlertMsg";
        TypeEnum[TypeEnum["TransactionReversalMsg"] = 'TransactionReversalMsg'] = "TransactionReversalMsg";
        TypeEnum[TypeEnum["TutorialMsg"] = 'TutorialMsg'] = "TutorialMsg";
        TypeEnum[TypeEnum["WarAllyOfferDeclinedMsg"] = 'WarAllyOfferDeclinedMsg'] = "WarAllyOfferDeclinedMsg";
        TypeEnum[TypeEnum["WarSurrenderDeclinedMsg"] = 'WarSurrenderDeclinedMsg'] = "WarSurrenderDeclinedMsg";
        TypeEnum[TypeEnum["WarSurrenderOfferMsg"] = 'WarSurrenderOfferMsg'] = "WarSurrenderOfferMsg";
        TypeEnum[TypeEnum["NotificationTypeMoonminingExtractionStarted"] = 'notificationTypeMoonminingExtractionStarted'] = "NotificationTypeMoonminingExtractionStarted";
    })(TypeEnum = GetCharactersCharacterIdNotifications200Ok.TypeEnum || (GetCharactersCharacterIdNotifications200Ok.TypeEnum = {}));
    let SenderTypeEnum;
    (function (SenderTypeEnum) {
        SenderTypeEnum[SenderTypeEnum["Character"] = 'character'] = "Character";
        SenderTypeEnum[SenderTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        SenderTypeEnum[SenderTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        SenderTypeEnum[SenderTypeEnum["Faction"] = 'faction'] = "Faction";
        SenderTypeEnum[SenderTypeEnum["Other"] = 'other'] = "Other";
    })(SenderTypeEnum = GetCharactersCharacterIdNotifications200Ok.SenderTypeEnum || (GetCharactersCharacterIdNotifications200Ok.SenderTypeEnum = {}));
})(GetCharactersCharacterIdNotifications200Ok = exports.GetCharactersCharacterIdNotifications200Ok || (exports.GetCharactersCharacterIdNotifications200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdNotificationsContacts200Ok {
}
exports.GetCharactersCharacterIdNotificationsContacts200Ok = GetCharactersCharacterIdNotificationsContacts200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdOk {
}
exports.GetCharactersCharacterIdOk = GetCharactersCharacterIdOk;
(function (GetCharactersCharacterIdOk) {
    let GenderEnum;
    (function (GenderEnum) {
        GenderEnum[GenderEnum["Female"] = 'female'] = "Female";
        GenderEnum[GenderEnum["Male"] = 'male'] = "Male";
    })(GenderEnum = GetCharactersCharacterIdOk.GenderEnum || (GetCharactersCharacterIdOk.GenderEnum = {}));
})(GetCharactersCharacterIdOk = exports.GetCharactersCharacterIdOk || (exports.GetCharactersCharacterIdOk = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdOnlineOk {
}
exports.GetCharactersCharacterIdOnlineOk = GetCharactersCharacterIdOnlineOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdOpportunities200Ok {
}
exports.GetCharactersCharacterIdOpportunities200Ok = GetCharactersCharacterIdOpportunities200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdOrders200Ok {
}
exports.GetCharactersCharacterIdOrders200Ok = GetCharactersCharacterIdOrders200Ok;
(function (GetCharactersCharacterIdOrders200Ok) {
    let RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
    })(RangeEnum = GetCharactersCharacterIdOrders200Ok.RangeEnum || (GetCharactersCharacterIdOrders200Ok.RangeEnum = {}));
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StateEnum[StateEnum["CharacterDeleted"] = 'character_deleted'] = "CharacterDeleted";
        StateEnum[StateEnum["Closed"] = 'closed'] = "Closed";
        StateEnum[StateEnum["Expired"] = 'expired'] = "Expired";
        StateEnum[StateEnum["Open"] = 'open'] = "Open";
        StateEnum[StateEnum["Pending"] = 'pending'] = "Pending";
    })(StateEnum = GetCharactersCharacterIdOrders200Ok.StateEnum || (GetCharactersCharacterIdOrders200Ok.StateEnum = {}));
})(GetCharactersCharacterIdOrders200Ok = exports.GetCharactersCharacterIdOrders200Ok || (exports.GetCharactersCharacterIdOrders200Ok = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdPlanets200Ok {
}
exports.GetCharactersCharacterIdPlanets200Ok = GetCharactersCharacterIdPlanets200Ok;
(function (GetCharactersCharacterIdPlanets200Ok) {
    let PlanetTypeEnum;
    (function (PlanetTypeEnum) {
        PlanetTypeEnum[PlanetTypeEnum["Temperate"] = 'temperate'] = "Temperate";
        PlanetTypeEnum[PlanetTypeEnum["Barren"] = 'barren'] = "Barren";
        PlanetTypeEnum[PlanetTypeEnum["Oceanic"] = 'oceanic'] = "Oceanic";
        PlanetTypeEnum[PlanetTypeEnum["Ice"] = 'ice'] = "Ice";
        PlanetTypeEnum[PlanetTypeEnum["Gas"] = 'gas'] = "Gas";
        PlanetTypeEnum[PlanetTypeEnum["Lava"] = 'lava'] = "Lava";
        PlanetTypeEnum[PlanetTypeEnum["Storm"] = 'storm'] = "Storm";
        PlanetTypeEnum[PlanetTypeEnum["Plasma"] = 'plasma'] = "Plasma";
    })(PlanetTypeEnum = GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum || (GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum = {}));
})(GetCharactersCharacterIdPlanets200Ok = exports.GetCharactersCharacterIdPlanets200Ok || (exports.GetCharactersCharacterIdPlanets200Ok = {}));
/**
* content object
*/
class GetCharactersCharacterIdPlanetsPlanetIdContent {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdContent = GetCharactersCharacterIdPlanetsPlanetIdContent;
/**
* extractor_details object
*/
class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails = GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails;
/**
* factory_details object
*/
class GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails = GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails;
/**
* head object
*/
class GetCharactersCharacterIdPlanetsPlanetIdHead {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdHead = GetCharactersCharacterIdPlanetsPlanetIdHead;
/**
* link object
*/
class GetCharactersCharacterIdPlanetsPlanetIdLink {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdLink = GetCharactersCharacterIdPlanetsPlanetIdLink;
/**
* Colony not found
*/
class GetCharactersCharacterIdPlanetsPlanetIdNotFound {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdNotFound = GetCharactersCharacterIdPlanetsPlanetIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdPlanetsPlanetIdOk {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdOk = GetCharactersCharacterIdPlanetsPlanetIdOk;
/**
* pin object
*/
class GetCharactersCharacterIdPlanetsPlanetIdPin {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdPin = GetCharactersCharacterIdPlanetsPlanetIdPin;
/**
* route object
*/
class GetCharactersCharacterIdPlanetsPlanetIdRoute {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdRoute = GetCharactersCharacterIdPlanetsPlanetIdRoute;
/**
* No image server for this datasource
*/
class GetCharactersCharacterIdPortraitNotFound {
}
exports.GetCharactersCharacterIdPortraitNotFound = GetCharactersCharacterIdPortraitNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdPortraitOk {
}
exports.GetCharactersCharacterIdPortraitOk = GetCharactersCharacterIdPortraitOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdRolesOk {
}
exports.GetCharactersCharacterIdRolesOk = GetCharactersCharacterIdRolesOk;
(function (GetCharactersCharacterIdRolesOk) {
    let RolesEnum;
    (function (RolesEnum) {
        RolesEnum[RolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesEnum[RolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesEnum[RolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesEnum[RolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesEnum[RolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesEnum[RolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesEnum[RolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesEnum[RolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesEnum[RolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesEnum[RolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesEnum[RolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesEnum[RolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesEnum[RolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesEnum[RolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesEnum[RolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesEnum[RolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesEnum[RolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesEnum[RolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesEnum[RolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesEnum[RolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesEnum[RolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesEnum[RolesEnum["Director"] = 'Director'] = "Director";
        RolesEnum[RolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesEnum[RolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesEnum[RolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesEnum[RolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesEnum[RolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesEnum[RolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesEnum[RolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesEnum[RolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesEnum[RolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesEnum[RolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesEnum[RolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesEnum[RolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesEnum[RolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesEnum[RolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesEnum[RolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesEnum[RolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesEnum[RolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesEnum[RolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesEnum[RolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesEnum[RolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesEnum[RolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesEnum[RolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesEnum[RolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesEnum[RolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesEnum[RolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesEnum[RolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesEnum[RolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesEnum[RolesEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesEnum = GetCharactersCharacterIdRolesOk.RolesEnum || (GetCharactersCharacterIdRolesOk.RolesEnum = {}));
    let RolesAtHqEnum;
    (function (RolesAtHqEnum) {
        RolesAtHqEnum[RolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtHqEnum[RolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtHqEnum[RolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtHqEnum[RolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtHqEnum[RolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtHqEnum[RolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtHqEnum[RolesAtHqEnum["Director"] = 'Director'] = "Director";
        RolesAtHqEnum[RolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtHqEnum[RolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtHqEnum[RolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtHqEnum[RolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtHqEnum[RolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtHqEnum[RolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtHqEnum[RolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtHqEnum[RolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtHqEnum[RolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtHqEnum = GetCharactersCharacterIdRolesOk.RolesAtHqEnum || (GetCharactersCharacterIdRolesOk.RolesAtHqEnum = {}));
    let RolesAtBaseEnum;
    (function (RolesAtBaseEnum) {
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtBaseEnum[RolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtBaseEnum[RolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtBaseEnum[RolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtBaseEnum[RolesAtBaseEnum["Director"] = 'Director'] = "Director";
        RolesAtBaseEnum[RolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtBaseEnum[RolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtBaseEnum[RolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtBaseEnum[RolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtBaseEnum[RolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtBaseEnum[RolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtBaseEnum = GetCharactersCharacterIdRolesOk.RolesAtBaseEnum || (GetCharactersCharacterIdRolesOk.RolesAtBaseEnum = {}));
    let RolesAtOtherEnum;
    (function (RolesAtOtherEnum) {
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtOtherEnum[RolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtOtherEnum[RolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtOtherEnum[RolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtOtherEnum[RolesAtOtherEnum["Director"] = 'Director'] = "Director";
        RolesAtOtherEnum[RolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtOtherEnum[RolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtOtherEnum[RolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtOtherEnum[RolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtOtherEnum[RolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtOtherEnum[RolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtOtherEnum = GetCharactersCharacterIdRolesOk.RolesAtOtherEnum || (GetCharactersCharacterIdRolesOk.RolesAtOtherEnum = {}));
})(GetCharactersCharacterIdRolesOk = exports.GetCharactersCharacterIdRolesOk || (exports.GetCharactersCharacterIdRolesOk = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdSearchOk {
}
exports.GetCharactersCharacterIdSearchOk = GetCharactersCharacterIdSearchOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdShipOk {
}
exports.GetCharactersCharacterIdShipOk = GetCharactersCharacterIdShipOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdSkillqueue200Ok {
}
exports.GetCharactersCharacterIdSkillqueue200Ok = GetCharactersCharacterIdSkillqueue200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdSkillsOk {
}
exports.GetCharactersCharacterIdSkillsOk = GetCharactersCharacterIdSkillsOk;
/**
* skill object
*/
class GetCharactersCharacterIdSkillsSkill {
}
exports.GetCharactersCharacterIdSkillsSkill = GetCharactersCharacterIdSkillsSkill;
/**
* 200 ok object
*/
class GetCharactersCharacterIdStandings200Ok {
}
exports.GetCharactersCharacterIdStandings200Ok = GetCharactersCharacterIdStandings200Ok;
(function (GetCharactersCharacterIdStandings200Ok) {
    let FromTypeEnum;
    (function (FromTypeEnum) {
        FromTypeEnum[FromTypeEnum["Agent"] = 'agent'] = "Agent";
        FromTypeEnum[FromTypeEnum["NpcCorp"] = 'npc_corp'] = "NpcCorp";
        FromTypeEnum[FromTypeEnum["Faction"] = 'faction'] = "Faction";
    })(FromTypeEnum = GetCharactersCharacterIdStandings200Ok.FromTypeEnum || (GetCharactersCharacterIdStandings200Ok.FromTypeEnum = {}));
})(GetCharactersCharacterIdStandings200Ok = exports.GetCharactersCharacterIdStandings200Ok || (exports.GetCharactersCharacterIdStandings200Ok = {}));
/**
* Aggregate stats for a year
*/
class GetCharactersCharacterIdStats200Ok {
}
exports.GetCharactersCharacterIdStats200Ok = GetCharactersCharacterIdStats200Ok;
/**
* character object
*/
class GetCharactersCharacterIdStatsCharacter {
}
exports.GetCharactersCharacterIdStatsCharacter = GetCharactersCharacterIdStatsCharacter;
/**
* combat object
*/
class GetCharactersCharacterIdStatsCombat {
}
exports.GetCharactersCharacterIdStatsCombat = GetCharactersCharacterIdStatsCombat;
/**
* industry object
*/
class GetCharactersCharacterIdStatsIndustry {
}
exports.GetCharactersCharacterIdStatsIndustry = GetCharactersCharacterIdStatsIndustry;
/**
* inventory object
*/
class GetCharactersCharacterIdStatsInventory {
}
exports.GetCharactersCharacterIdStatsInventory = GetCharactersCharacterIdStatsInventory;
/**
* isk object
*/
class GetCharactersCharacterIdStatsIsk {
}
exports.GetCharactersCharacterIdStatsIsk = GetCharactersCharacterIdStatsIsk;
/**
* market object
*/
class GetCharactersCharacterIdStatsMarket {
}
exports.GetCharactersCharacterIdStatsMarket = GetCharactersCharacterIdStatsMarket;
/**
* mining object
*/
class GetCharactersCharacterIdStatsMining {
}
exports.GetCharactersCharacterIdStatsMining = GetCharactersCharacterIdStatsMining;
/**
* module object
*/
class GetCharactersCharacterIdStatsModule {
}
exports.GetCharactersCharacterIdStatsModule = GetCharactersCharacterIdStatsModule;
/**
* orbital object
*/
class GetCharactersCharacterIdStatsOrbital {
}
exports.GetCharactersCharacterIdStatsOrbital = GetCharactersCharacterIdStatsOrbital;
/**
* pve object
*/
class GetCharactersCharacterIdStatsPve {
}
exports.GetCharactersCharacterIdStatsPve = GetCharactersCharacterIdStatsPve;
/**
* social object
*/
class GetCharactersCharacterIdStatsSocial {
}
exports.GetCharactersCharacterIdStatsSocial = GetCharactersCharacterIdStatsSocial;
/**
* travel object
*/
class GetCharactersCharacterIdStatsTravel {
}
exports.GetCharactersCharacterIdStatsTravel = GetCharactersCharacterIdStatsTravel;
/**
* 200 ok object
*/
class GetCharactersCharacterIdTitles200Ok {
}
exports.GetCharactersCharacterIdTitles200Ok = GetCharactersCharacterIdTitles200Ok;
/**
* 200 ok object
*/
class GetCharactersCharacterIdWalletJournal200Ok {
}
exports.GetCharactersCharacterIdWalletJournal200Ok = GetCharactersCharacterIdWalletJournal200Ok;
(function (GetCharactersCharacterIdWalletJournal200Ok) {
    let RefTypeEnum;
    (function (RefTypeEnum) {
        RefTypeEnum[RefTypeEnum["AccelerationGateFee"] = 'acceleration_gate_fee'] = "AccelerationGateFee";
        RefTypeEnum[RefTypeEnum["AdvertisementListingFee"] = 'advertisement_listing_fee'] = "AdvertisementListingFee";
        RefTypeEnum[RefTypeEnum["AgentDonation"] = 'agent_donation'] = "AgentDonation";
        RefTypeEnum[RefTypeEnum["AgentLocationServices"] = 'agent_location_services'] = "AgentLocationServices";
        RefTypeEnum[RefTypeEnum["AgentMiscellaneous"] = 'agent_miscellaneous'] = "AgentMiscellaneous";
        RefTypeEnum[RefTypeEnum["AgentMissionCollateralPaid"] = 'agent_mission_collateral_paid'] = "AgentMissionCollateralPaid";
        RefTypeEnum[RefTypeEnum["AgentMissionCollateralRefunded"] = 'agent_mission_collateral_refunded'] = "AgentMissionCollateralRefunded";
        RefTypeEnum[RefTypeEnum["AgentMissionReward"] = 'agent_mission_reward'] = "AgentMissionReward";
        RefTypeEnum[RefTypeEnum["AgentMissionRewardCorporationTax"] = 'agent_mission_reward_corporation_tax'] = "AgentMissionRewardCorporationTax";
        RefTypeEnum[RefTypeEnum["AgentMissionTimeBonusReward"] = 'agent_mission_time_bonus_reward'] = "AgentMissionTimeBonusReward";
        RefTypeEnum[RefTypeEnum["AgentMissionTimeBonusRewardCorporationTax"] = 'agent_mission_time_bonus_reward_corporation_tax'] = "AgentMissionTimeBonusRewardCorporationTax";
        RefTypeEnum[RefTypeEnum["AgentSecurityServices"] = 'agent_security_services'] = "AgentSecurityServices";
        RefTypeEnum[RefTypeEnum["AgentServicesRendered"] = 'agent_services_rendered'] = "AgentServicesRendered";
        RefTypeEnum[RefTypeEnum["AgentsPreward"] = 'agents_preward'] = "AgentsPreward";
        RefTypeEnum[RefTypeEnum["AllianceMaintainanceFee"] = 'alliance_maintainance_fee'] = "AllianceMaintainanceFee";
        RefTypeEnum[RefTypeEnum["AllianceRegistrationFee"] = 'alliance_registration_fee'] = "AllianceRegistrationFee";
        RefTypeEnum[RefTypeEnum["AssetSafetyRecoveryTax"] = 'asset_safety_recovery_tax'] = "AssetSafetyRecoveryTax";
        RefTypeEnum[RefTypeEnum["Bounty"] = 'bounty'] = "Bounty";
        RefTypeEnum[RefTypeEnum["BountyPrize"] = 'bounty_prize'] = "BountyPrize";
        RefTypeEnum[RefTypeEnum["BountyPrizeCorporationTax"] = 'bounty_prize_corporation_tax'] = "BountyPrizeCorporationTax";
        RefTypeEnum[RefTypeEnum["BountyPrizes"] = 'bounty_prizes'] = "BountyPrizes";
        RefTypeEnum[RefTypeEnum["BountyReimbursement"] = 'bounty_reimbursement'] = "BountyReimbursement";
        RefTypeEnum[RefTypeEnum["BountySurcharge"] = 'bounty_surcharge'] = "BountySurcharge";
        RefTypeEnum[RefTypeEnum["BrokersFee"] = 'brokers_fee'] = "BrokersFee";
        RefTypeEnum[RefTypeEnum["CloneActivation"] = 'clone_activation'] = "CloneActivation";
        RefTypeEnum[RefTypeEnum["CloneTransfer"] = 'clone_transfer'] = "CloneTransfer";
        RefTypeEnum[RefTypeEnum["ContrabandFine"] = 'contraband_fine'] = "ContrabandFine";
        RefTypeEnum[RefTypeEnum["ContractAuctionBid"] = 'contract_auction_bid'] = "ContractAuctionBid";
        RefTypeEnum[RefTypeEnum["ContractAuctionBidCorp"] = 'contract_auction_bid_corp'] = "ContractAuctionBidCorp";
        RefTypeEnum[RefTypeEnum["ContractAuctionBidRefund"] = 'contract_auction_bid_refund'] = "ContractAuctionBidRefund";
        RefTypeEnum[RefTypeEnum["ContractAuctionSold"] = 'contract_auction_sold'] = "ContractAuctionSold";
        RefTypeEnum[RefTypeEnum["ContractBrokersFee"] = 'contract_brokers_fee'] = "ContractBrokersFee";
        RefTypeEnum[RefTypeEnum["ContractBrokersFeeCorp"] = 'contract_brokers_fee_corp'] = "ContractBrokersFeeCorp";
        RefTypeEnum[RefTypeEnum["ContractCollateral"] = 'contract_collateral'] = "ContractCollateral";
        RefTypeEnum[RefTypeEnum["ContractCollateralDepositedCorp"] = 'contract_collateral_deposited_corp'] = "ContractCollateralDepositedCorp";
        RefTypeEnum[RefTypeEnum["ContractCollateralPayout"] = 'contract_collateral_payout'] = "ContractCollateralPayout";
        RefTypeEnum[RefTypeEnum["ContractCollateralRefund"] = 'contract_collateral_refund'] = "ContractCollateralRefund";
        RefTypeEnum[RefTypeEnum["ContractDeposit"] = 'contract_deposit'] = "ContractDeposit";
        RefTypeEnum[RefTypeEnum["ContractDepositCorp"] = 'contract_deposit_corp'] = "ContractDepositCorp";
        RefTypeEnum[RefTypeEnum["ContractDepositRefund"] = 'contract_deposit_refund'] = "ContractDepositRefund";
        RefTypeEnum[RefTypeEnum["ContractDepositSalesTax"] = 'contract_deposit_sales_tax'] = "ContractDepositSalesTax";
        RefTypeEnum[RefTypeEnum["ContractPrice"] = 'contract_price'] = "ContractPrice";
        RefTypeEnum[RefTypeEnum["ContractPricePaymentCorp"] = 'contract_price_payment_corp'] = "ContractPricePaymentCorp";
        RefTypeEnum[RefTypeEnum["ContractReversal"] = 'contract_reversal'] = "ContractReversal";
        RefTypeEnum[RefTypeEnum["ContractReward"] = 'contract_reward'] = "ContractReward";
        RefTypeEnum[RefTypeEnum["ContractRewardDeposited"] = 'contract_reward_deposited'] = "ContractRewardDeposited";
        RefTypeEnum[RefTypeEnum["ContractRewardDepositedCorp"] = 'contract_reward_deposited_corp'] = "ContractRewardDepositedCorp";
        RefTypeEnum[RefTypeEnum["ContractRewardRefund"] = 'contract_reward_refund'] = "ContractRewardRefund";
        RefTypeEnum[RefTypeEnum["ContractSalesTax"] = 'contract_sales_tax'] = "ContractSalesTax";
        RefTypeEnum[RefTypeEnum["Copying"] = 'copying'] = "Copying";
        RefTypeEnum[RefTypeEnum["CorporateRewardPayout"] = 'corporate_reward_payout'] = "CorporateRewardPayout";
        RefTypeEnum[RefTypeEnum["CorporateRewardTax"] = 'corporate_reward_tax'] = "CorporateRewardTax";
        RefTypeEnum[RefTypeEnum["CorporationAccountWithdrawal"] = 'corporation_account_withdrawal'] = "CorporationAccountWithdrawal";
        RefTypeEnum[RefTypeEnum["CorporationBulkPayment"] = 'corporation_bulk_payment'] = "CorporationBulkPayment";
        RefTypeEnum[RefTypeEnum["CorporationDividendPayment"] = 'corporation_dividend_payment'] = "CorporationDividendPayment";
        RefTypeEnum[RefTypeEnum["CorporationLiquidation"] = 'corporation_liquidation'] = "CorporationLiquidation";
        RefTypeEnum[RefTypeEnum["CorporationLogoChangeCost"] = 'corporation_logo_change_cost'] = "CorporationLogoChangeCost";
        RefTypeEnum[RefTypeEnum["CorporationPayment"] = 'corporation_payment'] = "CorporationPayment";
        RefTypeEnum[RefTypeEnum["CorporationRegistrationFee"] = 'corporation_registration_fee'] = "CorporationRegistrationFee";
        RefTypeEnum[RefTypeEnum["CourierMissionEscrow"] = 'courier_mission_escrow'] = "CourierMissionEscrow";
        RefTypeEnum[RefTypeEnum["Cspa"] = 'cspa'] = "Cspa";
        RefTypeEnum[RefTypeEnum["Cspaofflinerefund"] = 'cspaofflinerefund'] = "Cspaofflinerefund";
        RefTypeEnum[RefTypeEnum["DatacoreFee"] = 'datacore_fee'] = "DatacoreFee";
        RefTypeEnum[RefTypeEnum["DnaModificationFee"] = 'dna_modification_fee'] = "DnaModificationFee";
        RefTypeEnum[RefTypeEnum["DockingFee"] = 'docking_fee'] = "DockingFee";
        RefTypeEnum[RefTypeEnum["DuelWagerEscrow"] = 'duel_wager_escrow'] = "DuelWagerEscrow";
        RefTypeEnum[RefTypeEnum["DuelWagerPayment"] = 'duel_wager_payment'] = "DuelWagerPayment";
        RefTypeEnum[RefTypeEnum["DuelWagerRefund"] = 'duel_wager_refund'] = "DuelWagerRefund";
        RefTypeEnum[RefTypeEnum["FactorySlotRentalFee"] = 'factory_slot_rental_fee'] = "FactorySlotRentalFee";
        RefTypeEnum[RefTypeEnum["GmCashTransfer"] = 'gm_cash_transfer'] = "GmCashTransfer";
        RefTypeEnum[RefTypeEnum["IndustryJobTax"] = 'industry_job_tax'] = "IndustryJobTax";
        RefTypeEnum[RefTypeEnum["InfrastructureHubMaintenance"] = 'infrastructure_hub_maintenance'] = "InfrastructureHubMaintenance";
        RefTypeEnum[RefTypeEnum["Inheritance"] = 'inheritance'] = "Inheritance";
        RefTypeEnum[RefTypeEnum["Insurance"] = 'insurance'] = "Insurance";
        RefTypeEnum[RefTypeEnum["JumpCloneActivationFee"] = 'jump_clone_activation_fee'] = "JumpCloneActivationFee";
        RefTypeEnum[RefTypeEnum["JumpCloneInstallationFee"] = 'jump_clone_installation_fee'] = "JumpCloneInstallationFee";
        RefTypeEnum[RefTypeEnum["KillRightFee"] = 'kill_right_fee'] = "KillRightFee";
        RefTypeEnum[RefTypeEnum["LpStore"] = 'lp_store'] = "LpStore";
        RefTypeEnum[RefTypeEnum["Manufacturing"] = 'manufacturing'] = "Manufacturing";
        RefTypeEnum[RefTypeEnum["MarketEscrow"] = 'market_escrow'] = "MarketEscrow";
        RefTypeEnum[RefTypeEnum["MarketFinePaid"] = 'market_fine_paid'] = "MarketFinePaid";
        RefTypeEnum[RefTypeEnum["MarketTransaction"] = 'market_transaction'] = "MarketTransaction";
        RefTypeEnum[RefTypeEnum["MedalCreation"] = 'medal_creation'] = "MedalCreation";
        RefTypeEnum[RefTypeEnum["MedalIssued"] = 'medal_issued'] = "MedalIssued";
        RefTypeEnum[RefTypeEnum["MissionCompletion"] = 'mission_completion'] = "MissionCompletion";
        RefTypeEnum[RefTypeEnum["MissionCost"] = 'mission_cost'] = "MissionCost";
        RefTypeEnum[RefTypeEnum["MissionExpiration"] = 'mission_expiration'] = "MissionExpiration";
        RefTypeEnum[RefTypeEnum["MissionReward"] = 'mission_reward'] = "MissionReward";
        RefTypeEnum[RefTypeEnum["OfficeRentalFee"] = 'office_rental_fee'] = "OfficeRentalFee";
        RefTypeEnum[RefTypeEnum["OperationBonus"] = 'operation_bonus'] = "OperationBonus";
        RefTypeEnum[RefTypeEnum["OpportunityReward"] = 'opportunity_reward'] = "OpportunityReward";
        RefTypeEnum[RefTypeEnum["PlanetaryConstruction"] = 'planetary_construction'] = "PlanetaryConstruction";
        RefTypeEnum[RefTypeEnum["PlanetaryExportTax"] = 'planetary_export_tax'] = "PlanetaryExportTax";
        RefTypeEnum[RefTypeEnum["PlanetaryImportTax"] = 'planetary_import_tax'] = "PlanetaryImportTax";
        RefTypeEnum[RefTypeEnum["PlayerDonation"] = 'player_donation'] = "PlayerDonation";
        RefTypeEnum[RefTypeEnum["PlayerTrading"] = 'player_trading'] = "PlayerTrading";
        RefTypeEnum[RefTypeEnum["ProjectDiscoveryReward"] = 'project_discovery_reward'] = "ProjectDiscoveryReward";
        RefTypeEnum[RefTypeEnum["ProjectDiscoveryTax"] = 'project_discovery_tax'] = "ProjectDiscoveryTax";
        RefTypeEnum[RefTypeEnum["Reaction"] = 'reaction'] = "Reaction";
        RefTypeEnum[RefTypeEnum["ReleaseOfImpoundedProperty"] = 'release_of_impounded_property'] = "ReleaseOfImpoundedProperty";
        RefTypeEnum[RefTypeEnum["RepairBill"] = 'repair_bill'] = "RepairBill";
        RefTypeEnum[RefTypeEnum["ReprocessingTax"] = 'reprocessing_tax'] = "ReprocessingTax";
        RefTypeEnum[RefTypeEnum["ResearchingMaterialProductivity"] = 'researching_material_productivity'] = "ResearchingMaterialProductivity";
        RefTypeEnum[RefTypeEnum["ResearchingTechnology"] = 'researching_technology'] = "ResearchingTechnology";
        RefTypeEnum[RefTypeEnum["ResearchingTimeProductivity"] = 'researching_time_productivity'] = "ResearchingTimeProductivity";
        RefTypeEnum[RefTypeEnum["ResourceWarsReward"] = 'resource_wars_reward'] = "ResourceWarsReward";
        RefTypeEnum[RefTypeEnum["ReverseEngineering"] = 'reverse_engineering'] = "ReverseEngineering";
        RefTypeEnum[RefTypeEnum["SecurityProcessingFee"] = 'security_processing_fee'] = "SecurityProcessingFee";
        RefTypeEnum[RefTypeEnum["Shares"] = 'shares'] = "Shares";
        RefTypeEnum[RefTypeEnum["SovereignityBill"] = 'sovereignity_bill'] = "SovereignityBill";
        RefTypeEnum[RefTypeEnum["StorePurchase"] = 'store_purchase'] = "StorePurchase";
        RefTypeEnum[RefTypeEnum["StorePurchaseRefund"] = 'store_purchase_refund'] = "StorePurchaseRefund";
        RefTypeEnum[RefTypeEnum["TransactionTax"] = 'transaction_tax'] = "TransactionTax";
        RefTypeEnum[RefTypeEnum["UpkeepAdjustmentFee"] = 'upkeep_adjustment_fee'] = "UpkeepAdjustmentFee";
        RefTypeEnum[RefTypeEnum["WarAllyContract"] = 'war_ally_contract'] = "WarAllyContract";
        RefTypeEnum[RefTypeEnum["WarFee"] = 'war_fee'] = "WarFee";
        RefTypeEnum[RefTypeEnum["WarFeeSurrender"] = 'war_fee_surrender'] = "WarFeeSurrender";
    })(RefTypeEnum = GetCharactersCharacterIdWalletJournal200Ok.RefTypeEnum || (GetCharactersCharacterIdWalletJournal200Ok.RefTypeEnum = {}));
    let FirstPartyTypeEnum;
    (function (FirstPartyTypeEnum) {
        FirstPartyTypeEnum[FirstPartyTypeEnum["Character"] = 'character'] = "Character";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Faction"] = 'faction'] = "Faction";
        FirstPartyTypeEnum[FirstPartyTypeEnum["System"] = 'system'] = "System";
    })(FirstPartyTypeEnum = GetCharactersCharacterIdWalletJournal200Ok.FirstPartyTypeEnum || (GetCharactersCharacterIdWalletJournal200Ok.FirstPartyTypeEnum = {}));
    let SecondPartyTypeEnum;
    (function (SecondPartyTypeEnum) {
        SecondPartyTypeEnum[SecondPartyTypeEnum["Character"] = 'character'] = "Character";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Faction"] = 'faction'] = "Faction";
        SecondPartyTypeEnum[SecondPartyTypeEnum["System"] = 'system'] = "System";
    })(SecondPartyTypeEnum = GetCharactersCharacterIdWalletJournal200Ok.SecondPartyTypeEnum || (GetCharactersCharacterIdWalletJournal200Ok.SecondPartyTypeEnum = {}));
})(GetCharactersCharacterIdWalletJournal200Ok = exports.GetCharactersCharacterIdWalletJournal200Ok || (exports.GetCharactersCharacterIdWalletJournal200Ok = {}));
/**
* Extra information for different type of transaction
*/
class GetCharactersCharacterIdWalletJournalExtraInfo {
}
exports.GetCharactersCharacterIdWalletJournalExtraInfo = GetCharactersCharacterIdWalletJournalExtraInfo;
/**
* wallet transaction
*/
class GetCharactersCharacterIdWalletTransactions200Ok {
}
exports.GetCharactersCharacterIdWalletTransactions200Ok = GetCharactersCharacterIdWalletTransactions200Ok;
/**
* 200 ok object
*/
class GetCharactersNames200Ok {
}
exports.GetCharactersNames200Ok = GetCharactersNames200Ok;
/**
* 200 ok object
*/
class GetCorporationCorporationIdMiningExtractions200Ok {
}
exports.GetCorporationCorporationIdMiningExtractions200Ok = GetCorporationCorporationIdMiningExtractions200Ok;
/**
* 200 ok object
*/
class GetCorporationCorporationIdMiningObservers200Ok {
}
exports.GetCorporationCorporationIdMiningObservers200Ok = GetCorporationCorporationIdMiningObservers200Ok;
(function (GetCorporationCorporationIdMiningObservers200Ok) {
    let ObserverTypeEnum;
    (function (ObserverTypeEnum) {
        ObserverTypeEnum[ObserverTypeEnum["Structure"] = 'structure'] = "Structure";
    })(ObserverTypeEnum = GetCorporationCorporationIdMiningObservers200Ok.ObserverTypeEnum || (GetCorporationCorporationIdMiningObservers200Ok.ObserverTypeEnum = {}));
})(GetCorporationCorporationIdMiningObservers200Ok = exports.GetCorporationCorporationIdMiningObservers200Ok || (exports.GetCorporationCorporationIdMiningObservers200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationCorporationIdMiningObserversObserverId200Ok {
}
exports.GetCorporationCorporationIdMiningObserversObserverId200Ok = GetCorporationCorporationIdMiningObserversObserverId200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdAlliancehistory200Ok {
}
exports.GetCorporationsCorporationIdAlliancehistory200Ok = GetCorporationsCorporationIdAlliancehistory200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdAssets200Ok {
}
exports.GetCorporationsCorporationIdAssets200Ok = GetCorporationsCorporationIdAssets200Ok;
(function (GetCorporationsCorporationIdAssets200Ok) {
    let LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["SolarSystem"] = 'solar_system'] = "SolarSystem";
        LocationTypeEnum[LocationTypeEnum["Other"] = 'other'] = "Other";
    })(LocationTypeEnum = GetCorporationsCorporationIdAssets200Ok.LocationTypeEnum || (GetCorporationsCorporationIdAssets200Ok.LocationTypeEnum = {}));
    let LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Bonus"] = 'Bonus'] = "Bonus";
        LocationFlagEnum[LocationFlagEnum["Booster"] = 'Booster'] = "Booster";
        LocationFlagEnum[LocationFlagEnum["BoosterBay"] = 'BoosterBay'] = "BoosterBay";
        LocationFlagEnum[LocationFlagEnum["Capsule"] = 'Capsule'] = "Capsule";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpDeliveries"] = 'CorpDeliveries'] = "CorpDeliveries";
        LocationFlagEnum[LocationFlagEnum["CorpSAG1"] = 'CorpSAG1'] = "CorpSAG1";
        LocationFlagEnum[LocationFlagEnum["CorpSAG2"] = 'CorpSAG2'] = "CorpSAG2";
        LocationFlagEnum[LocationFlagEnum["CorpSAG3"] = 'CorpSAG3'] = "CorpSAG3";
        LocationFlagEnum[LocationFlagEnum["CorpSAG4"] = 'CorpSAG4'] = "CorpSAG4";
        LocationFlagEnum[LocationFlagEnum["CorpSAG5"] = 'CorpSAG5'] = "CorpSAG5";
        LocationFlagEnum[LocationFlagEnum["CorpSAG6"] = 'CorpSAG6'] = "CorpSAG6";
        LocationFlagEnum[LocationFlagEnum["CorpSAG7"] = 'CorpSAG7'] = "CorpSAG7";
        LocationFlagEnum[LocationFlagEnum["CrateLoot"] = 'CrateLoot'] = "CrateLoot";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["DustBattle"] = 'DustBattle'] = "DustBattle";
        LocationFlagEnum[LocationFlagEnum["DustDatabank"] = 'DustDatabank'] = "DustDatabank";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["HiddenModifers"] = 'HiddenModifers'] = "HiddenModifers";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["Impounded"] = 'Impounded'] = "Impounded";
        LocationFlagEnum[LocationFlagEnum["JunkyardReprocessed"] = 'JunkyardReprocessed'] = "JunkyardReprocessed";
        LocationFlagEnum[LocationFlagEnum["JunkyardTrashed"] = 'JunkyardTrashed'] = "JunkyardTrashed";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["OfficeFolder"] = 'OfficeFolder'] = "OfficeFolder";
        LocationFlagEnum[LocationFlagEnum["Pilot"] = 'Pilot'] = "Pilot";
        LocationFlagEnum[LocationFlagEnum["PlanetSurface"] = 'PlanetSurface'] = "PlanetSurface";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["Reward"] = 'Reward'] = "Reward";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["SecondaryStorage"] = 'SecondaryStorage'] = "SecondaryStorage";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot0"] = 'ServiceSlot0'] = "ServiceSlot0";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot1"] = 'ServiceSlot1'] = "ServiceSlot1";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot2"] = 'ServiceSlot2'] = "ServiceSlot2";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot3"] = 'ServiceSlot3'] = "ServiceSlot3";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot4"] = 'ServiceSlot4'] = "ServiceSlot4";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot5"] = 'ServiceSlot5'] = "ServiceSlot5";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot6"] = 'ServiceSlot6'] = "ServiceSlot6";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot7"] = 'ServiceSlot7'] = "ServiceSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["ShipOffline"] = 'ShipOffline'] = "ShipOffline";
        LocationFlagEnum[LocationFlagEnum["Skill"] = 'Skill'] = "Skill";
        LocationFlagEnum[LocationFlagEnum["SkillInTraining"] = 'SkillInTraining'] = "SkillInTraining";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["StructureActive"] = 'StructureActive'] = "StructureActive";
        LocationFlagEnum[LocationFlagEnum["StructureFuel"] = 'StructureFuel'] = "StructureFuel";
        LocationFlagEnum[LocationFlagEnum["StructureInactive"] = 'StructureInactive'] = "StructureInactive";
        LocationFlagEnum[LocationFlagEnum["StructureOffline"] = 'StructureOffline'] = "StructureOffline";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["SubsystemBay"] = 'SubsystemBay'] = "SubsystemBay";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Wallet"] = 'Wallet'] = "Wallet";
        LocationFlagEnum[LocationFlagEnum["Wardrobe"] = 'Wardrobe'] = "Wardrobe";
    })(LocationFlagEnum = GetCorporationsCorporationIdAssets200Ok.LocationFlagEnum || (GetCorporationsCorporationIdAssets200Ok.LocationFlagEnum = {}));
})(GetCorporationsCorporationIdAssets200Ok = exports.GetCorporationsCorporationIdAssets200Ok || (exports.GetCorporationsCorporationIdAssets200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdBlueprints200Ok {
}
exports.GetCorporationsCorporationIdBlueprints200Ok = GetCorporationsCorporationIdBlueprints200Ok;
(function (GetCorporationsCorporationIdBlueprints200Ok) {
    let LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Bonus"] = 'Bonus'] = "Bonus";
        LocationFlagEnum[LocationFlagEnum["Booster"] = 'Booster'] = "Booster";
        LocationFlagEnum[LocationFlagEnum["BoosterBay"] = 'BoosterBay'] = "BoosterBay";
        LocationFlagEnum[LocationFlagEnum["Capsule"] = 'Capsule'] = "Capsule";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpDeliveries"] = 'CorpDeliveries'] = "CorpDeliveries";
        LocationFlagEnum[LocationFlagEnum["CorpSAG1"] = 'CorpSAG1'] = "CorpSAG1";
        LocationFlagEnum[LocationFlagEnum["CorpSAG2"] = 'CorpSAG2'] = "CorpSAG2";
        LocationFlagEnum[LocationFlagEnum["CorpSAG3"] = 'CorpSAG3'] = "CorpSAG3";
        LocationFlagEnum[LocationFlagEnum["CorpSAG4"] = 'CorpSAG4'] = "CorpSAG4";
        LocationFlagEnum[LocationFlagEnum["CorpSAG5"] = 'CorpSAG5'] = "CorpSAG5";
        LocationFlagEnum[LocationFlagEnum["CorpSAG6"] = 'CorpSAG6'] = "CorpSAG6";
        LocationFlagEnum[LocationFlagEnum["CorpSAG7"] = 'CorpSAG7'] = "CorpSAG7";
        LocationFlagEnum[LocationFlagEnum["CrateLoot"] = 'CrateLoot'] = "CrateLoot";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["DustBattle"] = 'DustBattle'] = "DustBattle";
        LocationFlagEnum[LocationFlagEnum["DustDatabank"] = 'DustDatabank'] = "DustDatabank";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["HiddenModifers"] = 'HiddenModifers'] = "HiddenModifers";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["Impounded"] = 'Impounded'] = "Impounded";
        LocationFlagEnum[LocationFlagEnum["JunkyardReprocessed"] = 'JunkyardReprocessed'] = "JunkyardReprocessed";
        LocationFlagEnum[LocationFlagEnum["JunkyardTrashed"] = 'JunkyardTrashed'] = "JunkyardTrashed";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["OfficeFolder"] = 'OfficeFolder'] = "OfficeFolder";
        LocationFlagEnum[LocationFlagEnum["Pilot"] = 'Pilot'] = "Pilot";
        LocationFlagEnum[LocationFlagEnum["PlanetSurface"] = 'PlanetSurface'] = "PlanetSurface";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["Reward"] = 'Reward'] = "Reward";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["SecondaryStorage"] = 'SecondaryStorage'] = "SecondaryStorage";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot0"] = 'ServiceSlot0'] = "ServiceSlot0";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot1"] = 'ServiceSlot1'] = "ServiceSlot1";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot2"] = 'ServiceSlot2'] = "ServiceSlot2";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot3"] = 'ServiceSlot3'] = "ServiceSlot3";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot4"] = 'ServiceSlot4'] = "ServiceSlot4";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot5"] = 'ServiceSlot5'] = "ServiceSlot5";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot6"] = 'ServiceSlot6'] = "ServiceSlot6";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot7"] = 'ServiceSlot7'] = "ServiceSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["ShipOffline"] = 'ShipOffline'] = "ShipOffline";
        LocationFlagEnum[LocationFlagEnum["Skill"] = 'Skill'] = "Skill";
        LocationFlagEnum[LocationFlagEnum["SkillInTraining"] = 'SkillInTraining'] = "SkillInTraining";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["StructureActive"] = 'StructureActive'] = "StructureActive";
        LocationFlagEnum[LocationFlagEnum["StructureFuel"] = 'StructureFuel'] = "StructureFuel";
        LocationFlagEnum[LocationFlagEnum["StructureInactive"] = 'StructureInactive'] = "StructureInactive";
        LocationFlagEnum[LocationFlagEnum["StructureOffline"] = 'StructureOffline'] = "StructureOffline";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["SubsystemBay"] = 'SubsystemBay'] = "SubsystemBay";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Wallet"] = 'Wallet'] = "Wallet";
        LocationFlagEnum[LocationFlagEnum["Wardrobe"] = 'Wardrobe'] = "Wardrobe";
    })(LocationFlagEnum = GetCorporationsCorporationIdBlueprints200Ok.LocationFlagEnum || (GetCorporationsCorporationIdBlueprints200Ok.LocationFlagEnum = {}));
})(GetCorporationsCorporationIdBlueprints200Ok = exports.GetCorporationsCorporationIdBlueprints200Ok || (exports.GetCorporationsCorporationIdBlueprints200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdBookmarks200Ok {
}
exports.GetCorporationsCorporationIdBookmarks200Ok = GetCorporationsCorporationIdBookmarks200Ok;
/**
* Optional object that is returned if a bookmark was made on a planet or a random location in space.
*/
class GetCorporationsCorporationIdBookmarksCoordinates {
}
exports.GetCorporationsCorporationIdBookmarksCoordinates = GetCorporationsCorporationIdBookmarksCoordinates;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdBookmarksFolders200Ok {
}
exports.GetCorporationsCorporationIdBookmarksFolders200Ok = GetCorporationsCorporationIdBookmarksFolders200Ok;
/**
* Optional object that is returned if a bookmark was made on a particular item.
*/
class GetCorporationsCorporationIdBookmarksItem {
}
exports.GetCorporationsCorporationIdBookmarksItem = GetCorporationsCorporationIdBookmarksItem;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdContacts200Ok {
}
exports.GetCorporationsCorporationIdContacts200Ok = GetCorporationsCorporationIdContacts200Ok;
(function (GetCorporationsCorporationIdContacts200Ok) {
    let ContactTypeEnum;
    (function (ContactTypeEnum) {
        ContactTypeEnum[ContactTypeEnum["Character"] = 'character'] = "Character";
        ContactTypeEnum[ContactTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        ContactTypeEnum[ContactTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        ContactTypeEnum[ContactTypeEnum["Faction"] = 'faction'] = "Faction";
    })(ContactTypeEnum = GetCorporationsCorporationIdContacts200Ok.ContactTypeEnum || (GetCorporationsCorporationIdContacts200Ok.ContactTypeEnum = {}));
})(GetCorporationsCorporationIdContacts200Ok = exports.GetCorporationsCorporationIdContacts200Ok || (exports.GetCorporationsCorporationIdContacts200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdContainersLogs200Ok {
}
exports.GetCorporationsCorporationIdContainersLogs200Ok = GetCorporationsCorporationIdContainersLogs200Ok;
(function (GetCorporationsCorporationIdContainersLogs200Ok) {
    let LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Bonus"] = 'Bonus'] = "Bonus";
        LocationFlagEnum[LocationFlagEnum["Booster"] = 'Booster'] = "Booster";
        LocationFlagEnum[LocationFlagEnum["BoosterBay"] = 'BoosterBay'] = "BoosterBay";
        LocationFlagEnum[LocationFlagEnum["Capsule"] = 'Capsule'] = "Capsule";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpDeliveries"] = 'CorpDeliveries'] = "CorpDeliveries";
        LocationFlagEnum[LocationFlagEnum["CorpSAG1"] = 'CorpSAG1'] = "CorpSAG1";
        LocationFlagEnum[LocationFlagEnum["CorpSAG2"] = 'CorpSAG2'] = "CorpSAG2";
        LocationFlagEnum[LocationFlagEnum["CorpSAG3"] = 'CorpSAG3'] = "CorpSAG3";
        LocationFlagEnum[LocationFlagEnum["CorpSAG4"] = 'CorpSAG4'] = "CorpSAG4";
        LocationFlagEnum[LocationFlagEnum["CorpSAG5"] = 'CorpSAG5'] = "CorpSAG5";
        LocationFlagEnum[LocationFlagEnum["CorpSAG6"] = 'CorpSAG6'] = "CorpSAG6";
        LocationFlagEnum[LocationFlagEnum["CorpSAG7"] = 'CorpSAG7'] = "CorpSAG7";
        LocationFlagEnum[LocationFlagEnum["CrateLoot"] = 'CrateLoot'] = "CrateLoot";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["DustBattle"] = 'DustBattle'] = "DustBattle";
        LocationFlagEnum[LocationFlagEnum["DustDatabank"] = 'DustDatabank'] = "DustDatabank";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["HiddenModifers"] = 'HiddenModifers'] = "HiddenModifers";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["Impounded"] = 'Impounded'] = "Impounded";
        LocationFlagEnum[LocationFlagEnum["JunkyardReprocessed"] = 'JunkyardReprocessed'] = "JunkyardReprocessed";
        LocationFlagEnum[LocationFlagEnum["JunkyardTrashed"] = 'JunkyardTrashed'] = "JunkyardTrashed";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["OfficeFolder"] = 'OfficeFolder'] = "OfficeFolder";
        LocationFlagEnum[LocationFlagEnum["Pilot"] = 'Pilot'] = "Pilot";
        LocationFlagEnum[LocationFlagEnum["PlanetSurface"] = 'PlanetSurface'] = "PlanetSurface";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["Reward"] = 'Reward'] = "Reward";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["SecondaryStorage"] = 'SecondaryStorage'] = "SecondaryStorage";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot0"] = 'ServiceSlot0'] = "ServiceSlot0";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot1"] = 'ServiceSlot1'] = "ServiceSlot1";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot2"] = 'ServiceSlot2'] = "ServiceSlot2";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot3"] = 'ServiceSlot3'] = "ServiceSlot3";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot4"] = 'ServiceSlot4'] = "ServiceSlot4";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot5"] = 'ServiceSlot5'] = "ServiceSlot5";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot6"] = 'ServiceSlot6'] = "ServiceSlot6";
        LocationFlagEnum[LocationFlagEnum["ServiceSlot7"] = 'ServiceSlot7'] = "ServiceSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["ShipOffline"] = 'ShipOffline'] = "ShipOffline";
        LocationFlagEnum[LocationFlagEnum["Skill"] = 'Skill'] = "Skill";
        LocationFlagEnum[LocationFlagEnum["SkillInTraining"] = 'SkillInTraining'] = "SkillInTraining";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["StructureActive"] = 'StructureActive'] = "StructureActive";
        LocationFlagEnum[LocationFlagEnum["StructureFuel"] = 'StructureFuel'] = "StructureFuel";
        LocationFlagEnum[LocationFlagEnum["StructureInactive"] = 'StructureInactive'] = "StructureInactive";
        LocationFlagEnum[LocationFlagEnum["StructureOffline"] = 'StructureOffline'] = "StructureOffline";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["SubsystemBay"] = 'SubsystemBay'] = "SubsystemBay";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Wallet"] = 'Wallet'] = "Wallet";
        LocationFlagEnum[LocationFlagEnum["Wardrobe"] = 'Wardrobe'] = "Wardrobe";
    })(LocationFlagEnum = GetCorporationsCorporationIdContainersLogs200Ok.LocationFlagEnum || (GetCorporationsCorporationIdContainersLogs200Ok.LocationFlagEnum = {}));
    let ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["Add"] = 'add'] = "Add";
        ActionEnum[ActionEnum["Assemble"] = 'assemble'] = "Assemble";
        ActionEnum[ActionEnum["Configure"] = 'configure'] = "Configure";
        ActionEnum[ActionEnum["EnterPassword"] = 'enter_password'] = "EnterPassword";
        ActionEnum[ActionEnum["Lock"] = 'lock'] = "Lock";
        ActionEnum[ActionEnum["Move"] = 'move'] = "Move";
        ActionEnum[ActionEnum["Repackage"] = 'repackage'] = "Repackage";
        ActionEnum[ActionEnum["SetName"] = 'set_name'] = "SetName";
        ActionEnum[ActionEnum["SetPassword"] = 'set_password'] = "SetPassword";
        ActionEnum[ActionEnum["Unlock"] = 'unlock'] = "Unlock";
    })(ActionEnum = GetCorporationsCorporationIdContainersLogs200Ok.ActionEnum || (GetCorporationsCorporationIdContainersLogs200Ok.ActionEnum = {}));
    let PasswordTypeEnum;
    (function (PasswordTypeEnum) {
        PasswordTypeEnum[PasswordTypeEnum["Config"] = 'config'] = "Config";
        PasswordTypeEnum[PasswordTypeEnum["General"] = 'general'] = "General";
    })(PasswordTypeEnum = GetCorporationsCorporationIdContainersLogs200Ok.PasswordTypeEnum || (GetCorporationsCorporationIdContainersLogs200Ok.PasswordTypeEnum = {}));
})(GetCorporationsCorporationIdContainersLogs200Ok = exports.GetCorporationsCorporationIdContainersLogs200Ok || (exports.GetCorporationsCorporationIdContainersLogs200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdContracts200Ok {
}
exports.GetCorporationsCorporationIdContracts200Ok = GetCorporationsCorporationIdContracts200Ok;
(function (GetCorporationsCorporationIdContracts200Ok) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Unknown"] = 'unknown'] = "Unknown";
        TypeEnum[TypeEnum["ItemExchange"] = 'item_exchange'] = "ItemExchange";
        TypeEnum[TypeEnum["Auction"] = 'auction'] = "Auction";
        TypeEnum[TypeEnum["Courier"] = 'courier'] = "Courier";
        TypeEnum[TypeEnum["Loan"] = 'loan'] = "Loan";
    })(TypeEnum = GetCorporationsCorporationIdContracts200Ok.TypeEnum || (GetCorporationsCorporationIdContracts200Ok.TypeEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Outstanding"] = 'outstanding'] = "Outstanding";
        StatusEnum[StatusEnum["InProgress"] = 'in_progress'] = "InProgress";
        StatusEnum[StatusEnum["FinishedIssuer"] = 'finished_issuer'] = "FinishedIssuer";
        StatusEnum[StatusEnum["FinishedContractor"] = 'finished_contractor'] = "FinishedContractor";
        StatusEnum[StatusEnum["Finished"] = 'finished'] = "Finished";
        StatusEnum[StatusEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StatusEnum[StatusEnum["Rejected"] = 'rejected'] = "Rejected";
        StatusEnum[StatusEnum["Failed"] = 'failed'] = "Failed";
        StatusEnum[StatusEnum["Deleted"] = 'deleted'] = "Deleted";
        StatusEnum[StatusEnum["Reversed"] = 'reversed'] = "Reversed";
    })(StatusEnum = GetCorporationsCorporationIdContracts200Ok.StatusEnum || (GetCorporationsCorporationIdContracts200Ok.StatusEnum = {}));
    let AvailabilityEnum;
    (function (AvailabilityEnum) {
        AvailabilityEnum[AvailabilityEnum["Public"] = 'public'] = "Public";
        AvailabilityEnum[AvailabilityEnum["Personal"] = 'personal'] = "Personal";
        AvailabilityEnum[AvailabilityEnum["Corporation"] = 'corporation'] = "Corporation";
        AvailabilityEnum[AvailabilityEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AvailabilityEnum = GetCorporationsCorporationIdContracts200Ok.AvailabilityEnum || (GetCorporationsCorporationIdContracts200Ok.AvailabilityEnum = {}));
})(GetCorporationsCorporationIdContracts200Ok = exports.GetCorporationsCorporationIdContracts200Ok || (exports.GetCorporationsCorporationIdContracts200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdContractsContractIdBids200Ok {
}
exports.GetCorporationsCorporationIdContractsContractIdBids200Ok = GetCorporationsCorporationIdContractsContractIdBids200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdContractsContractIdItems200Ok {
}
exports.GetCorporationsCorporationIdContractsContractIdItems200Ok = GetCorporationsCorporationIdContractsContractIdItems200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdCustomsOffices200Ok {
}
exports.GetCorporationsCorporationIdCustomsOffices200Ok = GetCorporationsCorporationIdCustomsOffices200Ok;
(function (GetCorporationsCorporationIdCustomsOffices200Ok) {
    let StandingLevelEnum;
    (function (StandingLevelEnum) {
        StandingLevelEnum[StandingLevelEnum["Bad"] = 'bad'] = "Bad";
        StandingLevelEnum[StandingLevelEnum["Excellent"] = 'excellent'] = "Excellent";
        StandingLevelEnum[StandingLevelEnum["Good"] = 'good'] = "Good";
        StandingLevelEnum[StandingLevelEnum["Neutral"] = 'neutral'] = "Neutral";
        StandingLevelEnum[StandingLevelEnum["Terrible"] = 'terrible'] = "Terrible";
    })(StandingLevelEnum = GetCorporationsCorporationIdCustomsOffices200Ok.StandingLevelEnum || (GetCorporationsCorporationIdCustomsOffices200Ok.StandingLevelEnum = {}));
})(GetCorporationsCorporationIdCustomsOffices200Ok = exports.GetCorporationsCorporationIdCustomsOffices200Ok || (exports.GetCorporationsCorporationIdCustomsOffices200Ok = {}));
/**
* hangar object
*/
class GetCorporationsCorporationIdDivisionsHangar {
}
exports.GetCorporationsCorporationIdDivisionsHangar = GetCorporationsCorporationIdDivisionsHangar;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdDivisionsOk {
}
exports.GetCorporationsCorporationIdDivisionsOk = GetCorporationsCorporationIdDivisionsOk;
/**
* wallet object
*/
class GetCorporationsCorporationIdDivisionsWallet {
}
exports.GetCorporationsCorporationIdDivisionsWallet = GetCorporationsCorporationIdDivisionsWallet;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdFacilities200Ok {
}
exports.GetCorporationsCorporationIdFacilities200Ok = GetCorporationsCorporationIdFacilities200Ok;
/**
* Summary of kills done by the given corporation against enemy factions
*/
class GetCorporationsCorporationIdFwStatsKills {
}
exports.GetCorporationsCorporationIdFwStatsKills = GetCorporationsCorporationIdFwStatsKills;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdFwStatsOk {
}
exports.GetCorporationsCorporationIdFwStatsOk = GetCorporationsCorporationIdFwStatsOk;
/**
* Summary of victory points gained by the given corporation for the enlisted faction
*/
class GetCorporationsCorporationIdFwStatsVictoryPoints {
}
exports.GetCorporationsCorporationIdFwStatsVictoryPoints = GetCorporationsCorporationIdFwStatsVictoryPoints;
/**
* No image server for this datasource
*/
class GetCorporationsCorporationIdIconsNotFound {
}
exports.GetCorporationsCorporationIdIconsNotFound = GetCorporationsCorporationIdIconsNotFound;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdIconsOk {
}
exports.GetCorporationsCorporationIdIconsOk = GetCorporationsCorporationIdIconsOk;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdIndustryJobs200Ok {
}
exports.GetCorporationsCorporationIdIndustryJobs200Ok = GetCorporationsCorporationIdIndustryJobs200Ok;
(function (GetCorporationsCorporationIdIndustryJobs200Ok) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StatusEnum[StatusEnum["Delivered"] = 'delivered'] = "Delivered";
        StatusEnum[StatusEnum["Paused"] = 'paused'] = "Paused";
        StatusEnum[StatusEnum["Ready"] = 'ready'] = "Ready";
        StatusEnum[StatusEnum["Reverted"] = 'reverted'] = "Reverted";
    })(StatusEnum = GetCorporationsCorporationIdIndustryJobs200Ok.StatusEnum || (GetCorporationsCorporationIdIndustryJobs200Ok.StatusEnum = {}));
})(GetCorporationsCorporationIdIndustryJobs200Ok = exports.GetCorporationsCorporationIdIndustryJobs200Ok || (exports.GetCorporationsCorporationIdIndustryJobs200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdKillmailsRecent200Ok {
}
exports.GetCorporationsCorporationIdKillmailsRecent200Ok = GetCorporationsCorporationIdKillmailsRecent200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdMedals200Ok {
}
exports.GetCorporationsCorporationIdMedals200Ok = GetCorporationsCorporationIdMedals200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdMedalsIssued200Ok {
}
exports.GetCorporationsCorporationIdMedalsIssued200Ok = GetCorporationsCorporationIdMedalsIssued200Ok;
(function (GetCorporationsCorporationIdMedalsIssued200Ok) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Private"] = 'private'] = "Private";
        StatusEnum[StatusEnum["Public"] = 'public'] = "Public";
    })(StatusEnum = GetCorporationsCorporationIdMedalsIssued200Ok.StatusEnum || (GetCorporationsCorporationIdMedalsIssued200Ok.StatusEnum = {}));
})(GetCorporationsCorporationIdMedalsIssued200Ok = exports.GetCorporationsCorporationIdMedalsIssued200Ok || (exports.GetCorporationsCorporationIdMedalsIssued200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdMembersTitles200Ok {
}
exports.GetCorporationsCorporationIdMembersTitles200Ok = GetCorporationsCorporationIdMembersTitles200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdMembertracking200Ok {
}
exports.GetCorporationsCorporationIdMembertracking200Ok = GetCorporationsCorporationIdMembertracking200Ok;
/**
* Not found
*/
class GetCorporationsCorporationIdNotFound {
}
exports.GetCorporationsCorporationIdNotFound = GetCorporationsCorporationIdNotFound;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdOk {
}
exports.GetCorporationsCorporationIdOk = GetCorporationsCorporationIdOk;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdOrders200Ok {
}
exports.GetCorporationsCorporationIdOrders200Ok = GetCorporationsCorporationIdOrders200Ok;
(function (GetCorporationsCorporationIdOrders200Ok) {
    let RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
    })(RangeEnum = GetCorporationsCorporationIdOrders200Ok.RangeEnum || (GetCorporationsCorporationIdOrders200Ok.RangeEnum = {}));
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Cancelled"] = 'cancelled'] = "Cancelled";
        StateEnum[StateEnum["CharacterDeleted"] = 'character_deleted'] = "CharacterDeleted";
        StateEnum[StateEnum["Closed"] = 'closed'] = "Closed";
        StateEnum[StateEnum["Expired"] = 'expired'] = "Expired";
        StateEnum[StateEnum["Open"] = 'open'] = "Open";
        StateEnum[StateEnum["Pending"] = 'pending'] = "Pending";
    })(StateEnum = GetCorporationsCorporationIdOrders200Ok.StateEnum || (GetCorporationsCorporationIdOrders200Ok.StateEnum = {}));
})(GetCorporationsCorporationIdOrders200Ok = exports.GetCorporationsCorporationIdOrders200Ok || (exports.GetCorporationsCorporationIdOrders200Ok = {}));
/**
* coordinates object
*/
class GetCorporationsCorporationIdOutpostsOutpostIdCoordinates {
}
exports.GetCorporationsCorporationIdOutpostsOutpostIdCoordinates = GetCorporationsCorporationIdOutpostsOutpostIdCoordinates;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdOutpostsOutpostIdOk {
}
exports.GetCorporationsCorporationIdOutpostsOutpostIdOk = GetCorporationsCorporationIdOutpostsOutpostIdOk;
/**
* service object
*/
class GetCorporationsCorporationIdOutpostsOutpostIdService {
}
exports.GetCorporationsCorporationIdOutpostsOutpostIdService = GetCorporationsCorporationIdOutpostsOutpostIdService;
(function (GetCorporationsCorporationIdOutpostsOutpostIdService) {
    let ServiceNameEnum;
    (function (ServiceNameEnum) {
        ServiceNameEnum[ServiceNameEnum["BountyMissions"] = 'Bounty Missions'] = "BountyMissions";
        ServiceNameEnum[ServiceNameEnum["AssassinationMissions"] = 'Assassination Missions'] = "AssassinationMissions";
        ServiceNameEnum[ServiceNameEnum["CourierMissions"] = 'Courier Missions'] = "CourierMissions";
        ServiceNameEnum[ServiceNameEnum["Interbus"] = 'Interbus'] = "Interbus";
        ServiceNameEnum[ServiceNameEnum["ReprocessingPlant"] = 'Reprocessing Plant'] = "ReprocessingPlant";
        ServiceNameEnum[ServiceNameEnum["Refinery"] = 'Refinery'] = "Refinery";
        ServiceNameEnum[ServiceNameEnum["Market"] = 'Market'] = "Market";
        ServiceNameEnum[ServiceNameEnum["BlackMarket"] = 'Black Market'] = "BlackMarket";
        ServiceNameEnum[ServiceNameEnum["StockExchange"] = 'Stock Exchange'] = "StockExchange";
        ServiceNameEnum[ServiceNameEnum["Cloning"] = 'Cloning'] = "Cloning";
        ServiceNameEnum[ServiceNameEnum["Surgery"] = 'Surgery'] = "Surgery";
        ServiceNameEnum[ServiceNameEnum["DNATherapy"] = 'DNA Therapy'] = "DNATherapy";
        ServiceNameEnum[ServiceNameEnum["RepairFacilities"] = 'Repair Facilities'] = "RepairFacilities";
        ServiceNameEnum[ServiceNameEnum["Factory"] = 'Factory'] = "Factory";
        ServiceNameEnum[ServiceNameEnum["Laboratory"] = 'Laboratory'] = "Laboratory";
        ServiceNameEnum[ServiceNameEnum["Gambling"] = 'Gambling'] = "Gambling";
        ServiceNameEnum[ServiceNameEnum["Fitting"] = 'Fitting'] = "Fitting";
        ServiceNameEnum[ServiceNameEnum["Paintshop"] = 'Paintshop'] = "Paintshop";
        ServiceNameEnum[ServiceNameEnum["News"] = 'News'] = "News";
        ServiceNameEnum[ServiceNameEnum["Storage"] = 'Storage'] = "Storage";
        ServiceNameEnum[ServiceNameEnum["Insurance"] = 'Insurance'] = "Insurance";
        ServiceNameEnum[ServiceNameEnum["Docking"] = 'Docking'] = "Docking";
        ServiceNameEnum[ServiceNameEnum["OfficeRental"] = 'Office Rental'] = "OfficeRental";
        ServiceNameEnum[ServiceNameEnum["JumpCloneFacility"] = 'Jump Clone Facility'] = "JumpCloneFacility";
        ServiceNameEnum[ServiceNameEnum["LoyaltyPointStore"] = 'Loyalty Point Store'] = "LoyaltyPointStore";
        ServiceNameEnum[ServiceNameEnum["NavyOffices"] = 'Navy Offices'] = "NavyOffices";
        ServiceNameEnum[ServiceNameEnum["SecurityOffice"] = 'Security Office'] = "SecurityOffice";
    })(ServiceNameEnum = GetCorporationsCorporationIdOutpostsOutpostIdService.ServiceNameEnum || (GetCorporationsCorporationIdOutpostsOutpostIdService.ServiceNameEnum = {}));
})(GetCorporationsCorporationIdOutpostsOutpostIdService = exports.GetCorporationsCorporationIdOutpostsOutpostIdService || (exports.GetCorporationsCorporationIdOutpostsOutpostIdService = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdRoles200Ok {
}
exports.GetCorporationsCorporationIdRoles200Ok = GetCorporationsCorporationIdRoles200Ok;
(function (GetCorporationsCorporationIdRoles200Ok) {
    let RolesEnum;
    (function (RolesEnum) {
        RolesEnum[RolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesEnum[RolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesEnum[RolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesEnum[RolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesEnum[RolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesEnum[RolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesEnum[RolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesEnum[RolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesEnum[RolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesEnum[RolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesEnum[RolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesEnum[RolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesEnum[RolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesEnum[RolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesEnum[RolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesEnum[RolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesEnum[RolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesEnum[RolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesEnum[RolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesEnum[RolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesEnum[RolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesEnum[RolesEnum["Director"] = 'Director'] = "Director";
        RolesEnum[RolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesEnum[RolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesEnum[RolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesEnum[RolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesEnum[RolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesEnum[RolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesEnum[RolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesEnum[RolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesEnum[RolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesEnum[RolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesEnum[RolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesEnum[RolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesEnum[RolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesEnum[RolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesEnum[RolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesEnum[RolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesEnum[RolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesEnum[RolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesEnum[RolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesEnum[RolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesEnum[RolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesEnum[RolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesEnum[RolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesEnum[RolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesEnum[RolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesEnum[RolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesEnum[RolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesEnum[RolesEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesEnum = GetCorporationsCorporationIdRoles200Ok.RolesEnum || (GetCorporationsCorporationIdRoles200Ok.RolesEnum = {}));
    let GrantableRolesEnum;
    (function (GrantableRolesEnum) {
        GrantableRolesEnum[GrantableRolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesEnum[GrantableRolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesEnum[GrantableRolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesEnum[GrantableRolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesEnum[GrantableRolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesEnum[GrantableRolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesEnum[GrantableRolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesEnum[GrantableRolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesEnum[GrantableRolesEnum["Director"] = 'Director'] = "Director";
        GrantableRolesEnum[GrantableRolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesEnum[GrantableRolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesEnum[GrantableRolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesEnum[GrantableRolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesEnum[GrantableRolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesEnum[GrantableRolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesEnum[GrantableRolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesEnum[GrantableRolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesEnum[GrantableRolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesEnum[GrantableRolesEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum = {}));
    let RolesAtHqEnum;
    (function (RolesAtHqEnum) {
        RolesAtHqEnum[RolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtHqEnum[RolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtHqEnum[RolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtHqEnum[RolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtHqEnum[RolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtHqEnum[RolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtHqEnum[RolesAtHqEnum["Director"] = 'Director'] = "Director";
        RolesAtHqEnum[RolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtHqEnum[RolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtHqEnum[RolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtHqEnum[RolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtHqEnum[RolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtHqEnum[RolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtHqEnum[RolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtHqEnum[RolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtHqEnum[RolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtHqEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum = {}));
    let GrantableRolesAtHqEnum;
    (function (GrantableRolesAtHqEnum) {
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtHqEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum = {}));
    let RolesAtBaseEnum;
    (function (RolesAtBaseEnum) {
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtBaseEnum[RolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtBaseEnum[RolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtBaseEnum[RolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtBaseEnum[RolesAtBaseEnum["Director"] = 'Director'] = "Director";
        RolesAtBaseEnum[RolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtBaseEnum[RolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtBaseEnum[RolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtBaseEnum[RolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtBaseEnum[RolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtBaseEnum[RolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtBaseEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum = {}));
    let GrantableRolesAtBaseEnum;
    (function (GrantableRolesAtBaseEnum) {
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtBaseEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum = {}));
    let RolesAtOtherEnum;
    (function (RolesAtOtherEnum) {
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtOtherEnum[RolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtOtherEnum[RolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtOtherEnum[RolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtOtherEnum[RolesAtOtherEnum["Director"] = 'Director'] = "Director";
        RolesAtOtherEnum[RolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtOtherEnum[RolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtOtherEnum[RolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtOtherEnum[RolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtOtherEnum[RolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtOtherEnum[RolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtOtherEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum = {}));
    let GrantableRolesAtOtherEnum;
    (function (GrantableRolesAtOtherEnum) {
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtOtherEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum = {}));
})(GetCorporationsCorporationIdRoles200Ok = exports.GetCorporationsCorporationIdRoles200Ok || (exports.GetCorporationsCorporationIdRoles200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdRolesHistory200Ok {
}
exports.GetCorporationsCorporationIdRolesHistory200Ok = GetCorporationsCorporationIdRolesHistory200Ok;
(function (GetCorporationsCorporationIdRolesHistory200Ok) {
    let RoleTypeEnum;
    (function (RoleTypeEnum) {
        RoleTypeEnum[RoleTypeEnum["GrantableRoles"] = 'grantable_roles'] = "GrantableRoles";
        RoleTypeEnum[RoleTypeEnum["GrantableRolesAtBase"] = 'grantable_roles_at_base'] = "GrantableRolesAtBase";
        RoleTypeEnum[RoleTypeEnum["GrantableRolesAtHq"] = 'grantable_roles_at_hq'] = "GrantableRolesAtHq";
        RoleTypeEnum[RoleTypeEnum["GrantableRolesAtOther"] = 'grantable_roles_at_other'] = "GrantableRolesAtOther";
        RoleTypeEnum[RoleTypeEnum["Roles"] = 'roles'] = "Roles";
        RoleTypeEnum[RoleTypeEnum["RolesAtBase"] = 'roles_at_base'] = "RolesAtBase";
        RoleTypeEnum[RoleTypeEnum["RolesAtHq"] = 'roles_at_hq'] = "RolesAtHq";
        RoleTypeEnum[RoleTypeEnum["RolesAtOther"] = 'roles_at_other'] = "RolesAtOther";
    })(RoleTypeEnum = GetCorporationsCorporationIdRolesHistory200Ok.RoleTypeEnum || (GetCorporationsCorporationIdRolesHistory200Ok.RoleTypeEnum = {}));
    let OldRolesEnum;
    (function (OldRolesEnum) {
        OldRolesEnum[OldRolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        OldRolesEnum[OldRolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        OldRolesEnum[OldRolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        OldRolesEnum[OldRolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        OldRolesEnum[OldRolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        OldRolesEnum[OldRolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        OldRolesEnum[OldRolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        OldRolesEnum[OldRolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        OldRolesEnum[OldRolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        OldRolesEnum[OldRolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        OldRolesEnum[OldRolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        OldRolesEnum[OldRolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        OldRolesEnum[OldRolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        OldRolesEnum[OldRolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        OldRolesEnum[OldRolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        OldRolesEnum[OldRolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        OldRolesEnum[OldRolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        OldRolesEnum[OldRolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        OldRolesEnum[OldRolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        OldRolesEnum[OldRolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        OldRolesEnum[OldRolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        OldRolesEnum[OldRolesEnum["Director"] = 'Director'] = "Director";
        OldRolesEnum[OldRolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        OldRolesEnum[OldRolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        OldRolesEnum[OldRolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        OldRolesEnum[OldRolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        OldRolesEnum[OldRolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        OldRolesEnum[OldRolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        OldRolesEnum[OldRolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        OldRolesEnum[OldRolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        OldRolesEnum[OldRolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        OldRolesEnum[OldRolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        OldRolesEnum[OldRolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        OldRolesEnum[OldRolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        OldRolesEnum[OldRolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        OldRolesEnum[OldRolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        OldRolesEnum[OldRolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        OldRolesEnum[OldRolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        OldRolesEnum[OldRolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        OldRolesEnum[OldRolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        OldRolesEnum[OldRolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        OldRolesEnum[OldRolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        OldRolesEnum[OldRolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        OldRolesEnum[OldRolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        OldRolesEnum[OldRolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        OldRolesEnum[OldRolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        OldRolesEnum[OldRolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        OldRolesEnum[OldRolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        OldRolesEnum[OldRolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        OldRolesEnum[OldRolesEnum["Trader"] = 'Trader'] = "Trader";
    })(OldRolesEnum = GetCorporationsCorporationIdRolesHistory200Ok.OldRolesEnum || (GetCorporationsCorporationIdRolesHistory200Ok.OldRolesEnum = {}));
    let NewRolesEnum;
    (function (NewRolesEnum) {
        NewRolesEnum[NewRolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        NewRolesEnum[NewRolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        NewRolesEnum[NewRolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        NewRolesEnum[NewRolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        NewRolesEnum[NewRolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        NewRolesEnum[NewRolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        NewRolesEnum[NewRolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        NewRolesEnum[NewRolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        NewRolesEnum[NewRolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        NewRolesEnum[NewRolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        NewRolesEnum[NewRolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        NewRolesEnum[NewRolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        NewRolesEnum[NewRolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        NewRolesEnum[NewRolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        NewRolesEnum[NewRolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        NewRolesEnum[NewRolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        NewRolesEnum[NewRolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        NewRolesEnum[NewRolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        NewRolesEnum[NewRolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        NewRolesEnum[NewRolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        NewRolesEnum[NewRolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        NewRolesEnum[NewRolesEnum["Director"] = 'Director'] = "Director";
        NewRolesEnum[NewRolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        NewRolesEnum[NewRolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        NewRolesEnum[NewRolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        NewRolesEnum[NewRolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        NewRolesEnum[NewRolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        NewRolesEnum[NewRolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        NewRolesEnum[NewRolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        NewRolesEnum[NewRolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        NewRolesEnum[NewRolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        NewRolesEnum[NewRolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        NewRolesEnum[NewRolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        NewRolesEnum[NewRolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        NewRolesEnum[NewRolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        NewRolesEnum[NewRolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        NewRolesEnum[NewRolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        NewRolesEnum[NewRolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        NewRolesEnum[NewRolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        NewRolesEnum[NewRolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        NewRolesEnum[NewRolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        NewRolesEnum[NewRolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        NewRolesEnum[NewRolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        NewRolesEnum[NewRolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        NewRolesEnum[NewRolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        NewRolesEnum[NewRolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        NewRolesEnum[NewRolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        NewRolesEnum[NewRolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        NewRolesEnum[NewRolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        NewRolesEnum[NewRolesEnum["Trader"] = 'Trader'] = "Trader";
    })(NewRolesEnum = GetCorporationsCorporationIdRolesHistory200Ok.NewRolesEnum || (GetCorporationsCorporationIdRolesHistory200Ok.NewRolesEnum = {}));
})(GetCorporationsCorporationIdRolesHistory200Ok = exports.GetCorporationsCorporationIdRolesHistory200Ok || (exports.GetCorporationsCorporationIdRolesHistory200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdShareholders200Ok {
}
exports.GetCorporationsCorporationIdShareholders200Ok = GetCorporationsCorporationIdShareholders200Ok;
(function (GetCorporationsCorporationIdShareholders200Ok) {
    let ShareholderTypeEnum;
    (function (ShareholderTypeEnum) {
        ShareholderTypeEnum[ShareholderTypeEnum["Character"] = 'character'] = "Character";
        ShareholderTypeEnum[ShareholderTypeEnum["Corporation"] = 'corporation'] = "Corporation";
    })(ShareholderTypeEnum = GetCorporationsCorporationIdShareholders200Ok.ShareholderTypeEnum || (GetCorporationsCorporationIdShareholders200Ok.ShareholderTypeEnum = {}));
})(GetCorporationsCorporationIdShareholders200Ok = exports.GetCorporationsCorporationIdShareholders200Ok || (exports.GetCorporationsCorporationIdShareholders200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdStandings200Ok {
}
exports.GetCorporationsCorporationIdStandings200Ok = GetCorporationsCorporationIdStandings200Ok;
(function (GetCorporationsCorporationIdStandings200Ok) {
    let FromTypeEnum;
    (function (FromTypeEnum) {
        FromTypeEnum[FromTypeEnum["Agent"] = 'agent'] = "Agent";
        FromTypeEnum[FromTypeEnum["NpcCorp"] = 'npc_corp'] = "NpcCorp";
        FromTypeEnum[FromTypeEnum["Faction"] = 'faction'] = "Faction";
    })(FromTypeEnum = GetCorporationsCorporationIdStandings200Ok.FromTypeEnum || (GetCorporationsCorporationIdStandings200Ok.FromTypeEnum = {}));
})(GetCorporationsCorporationIdStandings200Ok = exports.GetCorporationsCorporationIdStandings200Ok || (exports.GetCorporationsCorporationIdStandings200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdStarbases200Ok {
}
exports.GetCorporationsCorporationIdStarbases200Ok = GetCorporationsCorporationIdStarbases200Ok;
(function (GetCorporationsCorporationIdStarbases200Ok) {
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Offline"] = 'offline'] = "Offline";
        StateEnum[StateEnum["Online"] = 'online'] = "Online";
        StateEnum[StateEnum["Onlining"] = 'onlining'] = "Onlining";
        StateEnum[StateEnum["Reinforced"] = 'reinforced'] = "Reinforced";
        StateEnum[StateEnum["Unanchoring"] = 'unanchoring'] = "Unanchoring";
    })(StateEnum = GetCorporationsCorporationIdStarbases200Ok.StateEnum || (GetCorporationsCorporationIdStarbases200Ok.StateEnum = {}));
})(GetCorporationsCorporationIdStarbases200Ok = exports.GetCorporationsCorporationIdStarbases200Ok || (exports.GetCorporationsCorporationIdStarbases200Ok = {}));
/**
* fuel object
*/
class GetCorporationsCorporationIdStarbasesStarbaseIdFuel {
}
exports.GetCorporationsCorporationIdStarbasesStarbaseIdFuel = GetCorporationsCorporationIdStarbasesStarbaseIdFuel;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdStarbasesStarbaseIdOk {
}
exports.GetCorporationsCorporationIdStarbasesStarbaseIdOk = GetCorporationsCorporationIdStarbasesStarbaseIdOk;
(function (GetCorporationsCorporationIdStarbasesStarbaseIdOk) {
    let FuelBayViewEnum;
    (function (FuelBayViewEnum) {
        FuelBayViewEnum[FuelBayViewEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        FuelBayViewEnum[FuelBayViewEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        FuelBayViewEnum[FuelBayViewEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        FuelBayViewEnum[FuelBayViewEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(FuelBayViewEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayViewEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayViewEnum = {}));
    let FuelBayTakeEnum;
    (function (FuelBayTakeEnum) {
        FuelBayTakeEnum[FuelBayTakeEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        FuelBayTakeEnum[FuelBayTakeEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        FuelBayTakeEnum[FuelBayTakeEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        FuelBayTakeEnum[FuelBayTakeEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(FuelBayTakeEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayTakeEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.FuelBayTakeEnum = {}));
    let AnchorEnum;
    (function (AnchorEnum) {
        AnchorEnum[AnchorEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        AnchorEnum[AnchorEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        AnchorEnum[AnchorEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        AnchorEnum[AnchorEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(AnchorEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.AnchorEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.AnchorEnum = {}));
    let UnanchorEnum;
    (function (UnanchorEnum) {
        UnanchorEnum[UnanchorEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        UnanchorEnum[UnanchorEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        UnanchorEnum[UnanchorEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        UnanchorEnum[UnanchorEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(UnanchorEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.UnanchorEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.UnanchorEnum = {}));
    let OnlineEnum;
    (function (OnlineEnum) {
        OnlineEnum[OnlineEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        OnlineEnum[OnlineEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        OnlineEnum[OnlineEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        OnlineEnum[OnlineEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(OnlineEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.OnlineEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.OnlineEnum = {}));
    let OfflineEnum;
    (function (OfflineEnum) {
        OfflineEnum[OfflineEnum["AllianceMember"] = 'alliance_member'] = "AllianceMember";
        OfflineEnum[OfflineEnum["ConfigStarbaseEquipmentRole"] = 'config_starbase_equipment_role'] = "ConfigStarbaseEquipmentRole";
        OfflineEnum[OfflineEnum["CorporationMember"] = 'corporation_member'] = "CorporationMember";
        OfflineEnum[OfflineEnum["StarbaseFuelTechnicianRole"] = 'starbase_fuel_technician_role'] = "StarbaseFuelTechnicianRole";
    })(OfflineEnum = GetCorporationsCorporationIdStarbasesStarbaseIdOk.OfflineEnum || (GetCorporationsCorporationIdStarbasesStarbaseIdOk.OfflineEnum = {}));
})(GetCorporationsCorporationIdStarbasesStarbaseIdOk = exports.GetCorporationsCorporationIdStarbasesStarbaseIdOk || (exports.GetCorporationsCorporationIdStarbasesStarbaseIdOk = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdStructures200Ok {
}
exports.GetCorporationsCorporationIdStructures200Ok = GetCorporationsCorporationIdStructures200Ok;
/**
* current_vul object
*/
class GetCorporationsCorporationIdStructuresCurrentVul {
}
exports.GetCorporationsCorporationIdStructuresCurrentVul = GetCorporationsCorporationIdStructuresCurrentVul;
/**
* next_vul object
*/
class GetCorporationsCorporationIdStructuresNextVul {
}
exports.GetCorporationsCorporationIdStructuresNextVul = GetCorporationsCorporationIdStructuresNextVul;
/**
* service object
*/
class GetCorporationsCorporationIdStructuresService {
}
exports.GetCorporationsCorporationIdStructuresService = GetCorporationsCorporationIdStructuresService;
(function (GetCorporationsCorporationIdStructuresService) {
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Online"] = 'online'] = "Online";
        StateEnum[StateEnum["Offline"] = 'offline'] = "Offline";
        StateEnum[StateEnum["Cleanup"] = 'cleanup'] = "Cleanup";
    })(StateEnum = GetCorporationsCorporationIdStructuresService.StateEnum || (GetCorporationsCorporationIdStructuresService.StateEnum = {}));
})(GetCorporationsCorporationIdStructuresService = exports.GetCorporationsCorporationIdStructuresService || (exports.GetCorporationsCorporationIdStructuresService = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdTitles200Ok {
}
exports.GetCorporationsCorporationIdTitles200Ok = GetCorporationsCorporationIdTitles200Ok;
(function (GetCorporationsCorporationIdTitles200Ok) {
    let RolesEnum;
    (function (RolesEnum) {
        RolesEnum[RolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesEnum[RolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesEnum[RolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesEnum[RolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesEnum[RolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesEnum[RolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesEnum[RolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesEnum[RolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesEnum[RolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesEnum[RolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesEnum[RolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesEnum[RolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesEnum[RolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesEnum[RolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesEnum[RolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesEnum[RolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesEnum[RolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesEnum[RolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesEnum[RolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesEnum[RolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesEnum[RolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesEnum[RolesEnum["Director"] = 'Director'] = "Director";
        RolesEnum[RolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesEnum[RolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesEnum[RolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesEnum[RolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesEnum[RolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesEnum[RolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesEnum[RolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesEnum[RolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesEnum[RolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesEnum[RolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesEnum[RolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesEnum[RolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesEnum[RolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesEnum[RolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesEnum[RolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesEnum[RolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesEnum[RolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesEnum[RolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesEnum[RolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesEnum[RolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesEnum[RolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesEnum[RolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesEnum[RolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesEnum[RolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesEnum[RolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesEnum[RolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesEnum[RolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesEnum[RolesEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesEnum = GetCorporationsCorporationIdTitles200Ok.RolesEnum || (GetCorporationsCorporationIdTitles200Ok.RolesEnum = {}));
    let GrantableRolesEnum;
    (function (GrantableRolesEnum) {
        GrantableRolesEnum[GrantableRolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesEnum[GrantableRolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesEnum[GrantableRolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesEnum[GrantableRolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesEnum[GrantableRolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesEnum[GrantableRolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesEnum[GrantableRolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesEnum[GrantableRolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesEnum[GrantableRolesEnum["Director"] = 'Director'] = "Director";
        GrantableRolesEnum[GrantableRolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesEnum[GrantableRolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesEnum[GrantableRolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesEnum[GrantableRolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesEnum[GrantableRolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesEnum[GrantableRolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesEnum[GrantableRolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesEnum[GrantableRolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesEnum[GrantableRolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesEnum[GrantableRolesEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesEnum = GetCorporationsCorporationIdTitles200Ok.GrantableRolesEnum || (GetCorporationsCorporationIdTitles200Ok.GrantableRolesEnum = {}));
    let RolesAtHqEnum;
    (function (RolesAtHqEnum) {
        RolesAtHqEnum[RolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtHqEnum[RolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtHqEnum[RolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtHqEnum[RolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtHqEnum[RolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtHqEnum[RolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtHqEnum[RolesAtHqEnum["Director"] = 'Director'] = "Director";
        RolesAtHqEnum[RolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtHqEnum[RolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtHqEnum[RolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtHqEnum[RolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtHqEnum[RolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtHqEnum[RolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtHqEnum[RolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtHqEnum[RolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtHqEnum[RolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtHqEnum = GetCorporationsCorporationIdTitles200Ok.RolesAtHqEnum || (GetCorporationsCorporationIdTitles200Ok.RolesAtHqEnum = {}));
    let GrantableRolesAtHqEnum;
    (function (GrantableRolesAtHqEnum) {
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtHqEnum = GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtHqEnum || (GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtHqEnum = {}));
    let RolesAtBaseEnum;
    (function (RolesAtBaseEnum) {
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtBaseEnum[RolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtBaseEnum[RolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtBaseEnum[RolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtBaseEnum[RolesAtBaseEnum["Director"] = 'Director'] = "Director";
        RolesAtBaseEnum[RolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtBaseEnum[RolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtBaseEnum[RolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtBaseEnum[RolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtBaseEnum[RolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtBaseEnum[RolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtBaseEnum = GetCorporationsCorporationIdTitles200Ok.RolesAtBaseEnum || (GetCorporationsCorporationIdTitles200Ok.RolesAtBaseEnum = {}));
    let GrantableRolesAtBaseEnum;
    (function (GrantableRolesAtBaseEnum) {
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtBaseEnum = GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtBaseEnum || (GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtBaseEnum = {}));
    let RolesAtOtherEnum;
    (function (RolesAtOtherEnum) {
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtOtherEnum[RolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtOtherEnum[RolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtOtherEnum[RolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtOtherEnum[RolesAtOtherEnum["Director"] = 'Director'] = "Director";
        RolesAtOtherEnum[RolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtOtherEnum[RolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtOtherEnum[RolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtOtherEnum[RolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtOtherEnum[RolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtOtherEnum[RolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
    })(RolesAtOtherEnum = GetCorporationsCorporationIdTitles200Ok.RolesAtOtherEnum || (GetCorporationsCorporationIdTitles200Ok.RolesAtOtherEnum = {}));
    let GrantableRolesAtOtherEnum;
    (function (GrantableRolesAtOtherEnum) {
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
    })(GrantableRolesAtOtherEnum = GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtOtherEnum || (GetCorporationsCorporationIdTitles200Ok.GrantableRolesAtOtherEnum = {}));
})(GetCorporationsCorporationIdTitles200Ok = exports.GetCorporationsCorporationIdTitles200Ok || (exports.GetCorporationsCorporationIdTitles200Ok = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdWallets200Ok {
}
exports.GetCorporationsCorporationIdWallets200Ok = GetCorporationsCorporationIdWallets200Ok;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdWalletsDivisionJournal200Ok {
}
exports.GetCorporationsCorporationIdWalletsDivisionJournal200Ok = GetCorporationsCorporationIdWalletsDivisionJournal200Ok;
(function (GetCorporationsCorporationIdWalletsDivisionJournal200Ok) {
    let RefTypeEnum;
    (function (RefTypeEnum) {
        RefTypeEnum[RefTypeEnum["AccelerationGateFee"] = 'acceleration_gate_fee'] = "AccelerationGateFee";
        RefTypeEnum[RefTypeEnum["AdvertisementListingFee"] = 'advertisement_listing_fee'] = "AdvertisementListingFee";
        RefTypeEnum[RefTypeEnum["AgentDonation"] = 'agent_donation'] = "AgentDonation";
        RefTypeEnum[RefTypeEnum["AgentLocationServices"] = 'agent_location_services'] = "AgentLocationServices";
        RefTypeEnum[RefTypeEnum["AgentMiscellaneous"] = 'agent_miscellaneous'] = "AgentMiscellaneous";
        RefTypeEnum[RefTypeEnum["AgentMissionCollateralPaid"] = 'agent_mission_collateral_paid'] = "AgentMissionCollateralPaid";
        RefTypeEnum[RefTypeEnum["AgentMissionCollateralRefunded"] = 'agent_mission_collateral_refunded'] = "AgentMissionCollateralRefunded";
        RefTypeEnum[RefTypeEnum["AgentMissionReward"] = 'agent_mission_reward'] = "AgentMissionReward";
        RefTypeEnum[RefTypeEnum["AgentMissionRewardCorporationTax"] = 'agent_mission_reward_corporation_tax'] = "AgentMissionRewardCorporationTax";
        RefTypeEnum[RefTypeEnum["AgentMissionTimeBonusReward"] = 'agent_mission_time_bonus_reward'] = "AgentMissionTimeBonusReward";
        RefTypeEnum[RefTypeEnum["AgentMissionTimeBonusRewardCorporationTax"] = 'agent_mission_time_bonus_reward_corporation_tax'] = "AgentMissionTimeBonusRewardCorporationTax";
        RefTypeEnum[RefTypeEnum["AgentSecurityServices"] = 'agent_security_services'] = "AgentSecurityServices";
        RefTypeEnum[RefTypeEnum["AgentServicesRendered"] = 'agent_services_rendered'] = "AgentServicesRendered";
        RefTypeEnum[RefTypeEnum["AgentsPreward"] = 'agents_preward'] = "AgentsPreward";
        RefTypeEnum[RefTypeEnum["AllianceMaintainanceFee"] = 'alliance_maintainance_fee'] = "AllianceMaintainanceFee";
        RefTypeEnum[RefTypeEnum["AllianceRegistrationFee"] = 'alliance_registration_fee'] = "AllianceRegistrationFee";
        RefTypeEnum[RefTypeEnum["AssetSafetyRecoveryTax"] = 'asset_safety_recovery_tax'] = "AssetSafetyRecoveryTax";
        RefTypeEnum[RefTypeEnum["Bounty"] = 'bounty'] = "Bounty";
        RefTypeEnum[RefTypeEnum["BountyPrize"] = 'bounty_prize'] = "BountyPrize";
        RefTypeEnum[RefTypeEnum["BountyPrizeCorporationTax"] = 'bounty_prize_corporation_tax'] = "BountyPrizeCorporationTax";
        RefTypeEnum[RefTypeEnum["BountyPrizes"] = 'bounty_prizes'] = "BountyPrizes";
        RefTypeEnum[RefTypeEnum["BountyReimbursement"] = 'bounty_reimbursement'] = "BountyReimbursement";
        RefTypeEnum[RefTypeEnum["BountySurcharge"] = 'bounty_surcharge'] = "BountySurcharge";
        RefTypeEnum[RefTypeEnum["BrokersFee"] = 'brokers_fee'] = "BrokersFee";
        RefTypeEnum[RefTypeEnum["CloneActivation"] = 'clone_activation'] = "CloneActivation";
        RefTypeEnum[RefTypeEnum["CloneTransfer"] = 'clone_transfer'] = "CloneTransfer";
        RefTypeEnum[RefTypeEnum["ContrabandFine"] = 'contraband_fine'] = "ContrabandFine";
        RefTypeEnum[RefTypeEnum["ContractAuctionBid"] = 'contract_auction_bid'] = "ContractAuctionBid";
        RefTypeEnum[RefTypeEnum["ContractAuctionBidCorp"] = 'contract_auction_bid_corp'] = "ContractAuctionBidCorp";
        RefTypeEnum[RefTypeEnum["ContractAuctionBidRefund"] = 'contract_auction_bid_refund'] = "ContractAuctionBidRefund";
        RefTypeEnum[RefTypeEnum["ContractAuctionSold"] = 'contract_auction_sold'] = "ContractAuctionSold";
        RefTypeEnum[RefTypeEnum["ContractBrokersFee"] = 'contract_brokers_fee'] = "ContractBrokersFee";
        RefTypeEnum[RefTypeEnum["ContractBrokersFeeCorp"] = 'contract_brokers_fee_corp'] = "ContractBrokersFeeCorp";
        RefTypeEnum[RefTypeEnum["ContractCollateral"] = 'contract_collateral'] = "ContractCollateral";
        RefTypeEnum[RefTypeEnum["ContractCollateralDepositedCorp"] = 'contract_collateral_deposited_corp'] = "ContractCollateralDepositedCorp";
        RefTypeEnum[RefTypeEnum["ContractCollateralPayout"] = 'contract_collateral_payout'] = "ContractCollateralPayout";
        RefTypeEnum[RefTypeEnum["ContractCollateralRefund"] = 'contract_collateral_refund'] = "ContractCollateralRefund";
        RefTypeEnum[RefTypeEnum["ContractDeposit"] = 'contract_deposit'] = "ContractDeposit";
        RefTypeEnum[RefTypeEnum["ContractDepositCorp"] = 'contract_deposit_corp'] = "ContractDepositCorp";
        RefTypeEnum[RefTypeEnum["ContractDepositRefund"] = 'contract_deposit_refund'] = "ContractDepositRefund";
        RefTypeEnum[RefTypeEnum["ContractDepositSalesTax"] = 'contract_deposit_sales_tax'] = "ContractDepositSalesTax";
        RefTypeEnum[RefTypeEnum["ContractPrice"] = 'contract_price'] = "ContractPrice";
        RefTypeEnum[RefTypeEnum["ContractPricePaymentCorp"] = 'contract_price_payment_corp'] = "ContractPricePaymentCorp";
        RefTypeEnum[RefTypeEnum["ContractReversal"] = 'contract_reversal'] = "ContractReversal";
        RefTypeEnum[RefTypeEnum["ContractReward"] = 'contract_reward'] = "ContractReward";
        RefTypeEnum[RefTypeEnum["ContractRewardDeposited"] = 'contract_reward_deposited'] = "ContractRewardDeposited";
        RefTypeEnum[RefTypeEnum["ContractRewardDepositedCorp"] = 'contract_reward_deposited_corp'] = "ContractRewardDepositedCorp";
        RefTypeEnum[RefTypeEnum["ContractRewardRefund"] = 'contract_reward_refund'] = "ContractRewardRefund";
        RefTypeEnum[RefTypeEnum["ContractSalesTax"] = 'contract_sales_tax'] = "ContractSalesTax";
        RefTypeEnum[RefTypeEnum["Copying"] = 'copying'] = "Copying";
        RefTypeEnum[RefTypeEnum["CorporateRewardPayout"] = 'corporate_reward_payout'] = "CorporateRewardPayout";
        RefTypeEnum[RefTypeEnum["CorporateRewardTax"] = 'corporate_reward_tax'] = "CorporateRewardTax";
        RefTypeEnum[RefTypeEnum["CorporationAccountWithdrawal"] = 'corporation_account_withdrawal'] = "CorporationAccountWithdrawal";
        RefTypeEnum[RefTypeEnum["CorporationBulkPayment"] = 'corporation_bulk_payment'] = "CorporationBulkPayment";
        RefTypeEnum[RefTypeEnum["CorporationDividendPayment"] = 'corporation_dividend_payment'] = "CorporationDividendPayment";
        RefTypeEnum[RefTypeEnum["CorporationLiquidation"] = 'corporation_liquidation'] = "CorporationLiquidation";
        RefTypeEnum[RefTypeEnum["CorporationLogoChangeCost"] = 'corporation_logo_change_cost'] = "CorporationLogoChangeCost";
        RefTypeEnum[RefTypeEnum["CorporationPayment"] = 'corporation_payment'] = "CorporationPayment";
        RefTypeEnum[RefTypeEnum["CorporationRegistrationFee"] = 'corporation_registration_fee'] = "CorporationRegistrationFee";
        RefTypeEnum[RefTypeEnum["CourierMissionEscrow"] = 'courier_mission_escrow'] = "CourierMissionEscrow";
        RefTypeEnum[RefTypeEnum["Cspa"] = 'cspa'] = "Cspa";
        RefTypeEnum[RefTypeEnum["Cspaofflinerefund"] = 'cspaofflinerefund'] = "Cspaofflinerefund";
        RefTypeEnum[RefTypeEnum["DatacoreFee"] = 'datacore_fee'] = "DatacoreFee";
        RefTypeEnum[RefTypeEnum["DnaModificationFee"] = 'dna_modification_fee'] = "DnaModificationFee";
        RefTypeEnum[RefTypeEnum["DockingFee"] = 'docking_fee'] = "DockingFee";
        RefTypeEnum[RefTypeEnum["DuelWagerEscrow"] = 'duel_wager_escrow'] = "DuelWagerEscrow";
        RefTypeEnum[RefTypeEnum["DuelWagerPayment"] = 'duel_wager_payment'] = "DuelWagerPayment";
        RefTypeEnum[RefTypeEnum["DuelWagerRefund"] = 'duel_wager_refund'] = "DuelWagerRefund";
        RefTypeEnum[RefTypeEnum["FactorySlotRentalFee"] = 'factory_slot_rental_fee'] = "FactorySlotRentalFee";
        RefTypeEnum[RefTypeEnum["GmCashTransfer"] = 'gm_cash_transfer'] = "GmCashTransfer";
        RefTypeEnum[RefTypeEnum["IndustryJobTax"] = 'industry_job_tax'] = "IndustryJobTax";
        RefTypeEnum[RefTypeEnum["InfrastructureHubMaintenance"] = 'infrastructure_hub_maintenance'] = "InfrastructureHubMaintenance";
        RefTypeEnum[RefTypeEnum["Inheritance"] = 'inheritance'] = "Inheritance";
        RefTypeEnum[RefTypeEnum["Insurance"] = 'insurance'] = "Insurance";
        RefTypeEnum[RefTypeEnum["JumpCloneActivationFee"] = 'jump_clone_activation_fee'] = "JumpCloneActivationFee";
        RefTypeEnum[RefTypeEnum["JumpCloneInstallationFee"] = 'jump_clone_installation_fee'] = "JumpCloneInstallationFee";
        RefTypeEnum[RefTypeEnum["KillRightFee"] = 'kill_right_fee'] = "KillRightFee";
        RefTypeEnum[RefTypeEnum["LpStore"] = 'lp_store'] = "LpStore";
        RefTypeEnum[RefTypeEnum["Manufacturing"] = 'manufacturing'] = "Manufacturing";
        RefTypeEnum[RefTypeEnum["MarketEscrow"] = 'market_escrow'] = "MarketEscrow";
        RefTypeEnum[RefTypeEnum["MarketFinePaid"] = 'market_fine_paid'] = "MarketFinePaid";
        RefTypeEnum[RefTypeEnum["MarketTransaction"] = 'market_transaction'] = "MarketTransaction";
        RefTypeEnum[RefTypeEnum["MedalCreation"] = 'medal_creation'] = "MedalCreation";
        RefTypeEnum[RefTypeEnum["MedalIssued"] = 'medal_issued'] = "MedalIssued";
        RefTypeEnum[RefTypeEnum["MissionCompletion"] = 'mission_completion'] = "MissionCompletion";
        RefTypeEnum[RefTypeEnum["MissionCost"] = 'mission_cost'] = "MissionCost";
        RefTypeEnum[RefTypeEnum["MissionExpiration"] = 'mission_expiration'] = "MissionExpiration";
        RefTypeEnum[RefTypeEnum["MissionReward"] = 'mission_reward'] = "MissionReward";
        RefTypeEnum[RefTypeEnum["OfficeRentalFee"] = 'office_rental_fee'] = "OfficeRentalFee";
        RefTypeEnum[RefTypeEnum["OperationBonus"] = 'operation_bonus'] = "OperationBonus";
        RefTypeEnum[RefTypeEnum["OpportunityReward"] = 'opportunity_reward'] = "OpportunityReward";
        RefTypeEnum[RefTypeEnum["PlanetaryConstruction"] = 'planetary_construction'] = "PlanetaryConstruction";
        RefTypeEnum[RefTypeEnum["PlanetaryExportTax"] = 'planetary_export_tax'] = "PlanetaryExportTax";
        RefTypeEnum[RefTypeEnum["PlanetaryImportTax"] = 'planetary_import_tax'] = "PlanetaryImportTax";
        RefTypeEnum[RefTypeEnum["PlayerDonation"] = 'player_donation'] = "PlayerDonation";
        RefTypeEnum[RefTypeEnum["PlayerTrading"] = 'player_trading'] = "PlayerTrading";
        RefTypeEnum[RefTypeEnum["ProjectDiscoveryReward"] = 'project_discovery_reward'] = "ProjectDiscoveryReward";
        RefTypeEnum[RefTypeEnum["ProjectDiscoveryTax"] = 'project_discovery_tax'] = "ProjectDiscoveryTax";
        RefTypeEnum[RefTypeEnum["Reaction"] = 'reaction'] = "Reaction";
        RefTypeEnum[RefTypeEnum["ReleaseOfImpoundedProperty"] = 'release_of_impounded_property'] = "ReleaseOfImpoundedProperty";
        RefTypeEnum[RefTypeEnum["RepairBill"] = 'repair_bill'] = "RepairBill";
        RefTypeEnum[RefTypeEnum["ReprocessingTax"] = 'reprocessing_tax'] = "ReprocessingTax";
        RefTypeEnum[RefTypeEnum["ResearchingMaterialProductivity"] = 'researching_material_productivity'] = "ResearchingMaterialProductivity";
        RefTypeEnum[RefTypeEnum["ResearchingTechnology"] = 'researching_technology'] = "ResearchingTechnology";
        RefTypeEnum[RefTypeEnum["ResearchingTimeProductivity"] = 'researching_time_productivity'] = "ResearchingTimeProductivity";
        RefTypeEnum[RefTypeEnum["ResourceWarsReward"] = 'resource_wars_reward'] = "ResourceWarsReward";
        RefTypeEnum[RefTypeEnum["ReverseEngineering"] = 'reverse_engineering'] = "ReverseEngineering";
        RefTypeEnum[RefTypeEnum["SecurityProcessingFee"] = 'security_processing_fee'] = "SecurityProcessingFee";
        RefTypeEnum[RefTypeEnum["Shares"] = 'shares'] = "Shares";
        RefTypeEnum[RefTypeEnum["SovereignityBill"] = 'sovereignity_bill'] = "SovereignityBill";
        RefTypeEnum[RefTypeEnum["StorePurchase"] = 'store_purchase'] = "StorePurchase";
        RefTypeEnum[RefTypeEnum["StorePurchaseRefund"] = 'store_purchase_refund'] = "StorePurchaseRefund";
        RefTypeEnum[RefTypeEnum["TransactionTax"] = 'transaction_tax'] = "TransactionTax";
        RefTypeEnum[RefTypeEnum["UpkeepAdjustmentFee"] = 'upkeep_adjustment_fee'] = "UpkeepAdjustmentFee";
        RefTypeEnum[RefTypeEnum["WarAllyContract"] = 'war_ally_contract'] = "WarAllyContract";
        RefTypeEnum[RefTypeEnum["WarFee"] = 'war_fee'] = "WarFee";
        RefTypeEnum[RefTypeEnum["WarFeeSurrender"] = 'war_fee_surrender'] = "WarFeeSurrender";
    })(RefTypeEnum = GetCorporationsCorporationIdWalletsDivisionJournal200Ok.RefTypeEnum || (GetCorporationsCorporationIdWalletsDivisionJournal200Ok.RefTypeEnum = {}));
    let FirstPartyTypeEnum;
    (function (FirstPartyTypeEnum) {
        FirstPartyTypeEnum[FirstPartyTypeEnum["Character"] = 'character'] = "Character";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        FirstPartyTypeEnum[FirstPartyTypeEnum["Faction"] = 'faction'] = "Faction";
        FirstPartyTypeEnum[FirstPartyTypeEnum["System"] = 'system'] = "System";
    })(FirstPartyTypeEnum = GetCorporationsCorporationIdWalletsDivisionJournal200Ok.FirstPartyTypeEnum || (GetCorporationsCorporationIdWalletsDivisionJournal200Ok.FirstPartyTypeEnum = {}));
    let SecondPartyTypeEnum;
    (function (SecondPartyTypeEnum) {
        SecondPartyTypeEnum[SecondPartyTypeEnum["Character"] = 'character'] = "Character";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        SecondPartyTypeEnum[SecondPartyTypeEnum["Faction"] = 'faction'] = "Faction";
        SecondPartyTypeEnum[SecondPartyTypeEnum["System"] = 'system'] = "System";
    })(SecondPartyTypeEnum = GetCorporationsCorporationIdWalletsDivisionJournal200Ok.SecondPartyTypeEnum || (GetCorporationsCorporationIdWalletsDivisionJournal200Ok.SecondPartyTypeEnum = {}));
})(GetCorporationsCorporationIdWalletsDivisionJournal200Ok = exports.GetCorporationsCorporationIdWalletsDivisionJournal200Ok || (exports.GetCorporationsCorporationIdWalletsDivisionJournal200Ok = {}));
/**
* Extra information for different type of transaction
*/
class GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo {
}
exports.GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo = GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo;
/**
* wallet transaction
*/
class GetCorporationsCorporationIdWalletsDivisionTransactions200Ok {
}
exports.GetCorporationsCorporationIdWalletsDivisionTransactions200Ok = GetCorporationsCorporationIdWalletsDivisionTransactions200Ok;
/**
* 200 ok object
*/
class GetCorporationsNames200Ok {
}
exports.GetCorporationsNames200Ok = GetCorporationsNames200Ok;
/**
* Not found
*/
class GetDogmaAttributesAttributeIdNotFound {
}
exports.GetDogmaAttributesAttributeIdNotFound = GetDogmaAttributesAttributeIdNotFound;
/**
* 200 ok object
*/
class GetDogmaAttributesAttributeIdOk {
}
exports.GetDogmaAttributesAttributeIdOk = GetDogmaAttributesAttributeIdOk;
/**
* modifier object
*/
class GetDogmaEffectsEffectIdModifier {
}
exports.GetDogmaEffectsEffectIdModifier = GetDogmaEffectsEffectIdModifier;
/**
* Not found
*/
class GetDogmaEffectsEffectIdNotFound {
}
exports.GetDogmaEffectsEffectIdNotFound = GetDogmaEffectsEffectIdNotFound;
/**
* 200 ok object
*/
class GetDogmaEffectsEffectIdOk {
}
exports.GetDogmaEffectsEffectIdOk = GetDogmaEffectsEffectIdOk;
/**
* 200 ok object
*/
class GetFleetsFleetIdMembers200Ok {
}
exports.GetFleetsFleetIdMembers200Ok = GetFleetsFleetIdMembers200Ok;
(function (GetFleetsFleetIdMembers200Ok) {
    let RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = GetFleetsFleetIdMembers200Ok.RoleEnum || (GetFleetsFleetIdMembers200Ok.RoleEnum = {}));
})(GetFleetsFleetIdMembers200Ok = exports.GetFleetsFleetIdMembers200Ok || (exports.GetFleetsFleetIdMembers200Ok = {}));
/**
* Not found
*/
class GetFleetsFleetIdMembersNotFound {
}
exports.GetFleetsFleetIdMembersNotFound = GetFleetsFleetIdMembersNotFound;
/**
* Not found
*/
class GetFleetsFleetIdNotFound {
}
exports.GetFleetsFleetIdNotFound = GetFleetsFleetIdNotFound;
/**
* 200 ok object
*/
class GetFleetsFleetIdOk {
}
exports.GetFleetsFleetIdOk = GetFleetsFleetIdOk;
/**
* 200 ok object
*/
class GetFleetsFleetIdWings200Ok {
}
exports.GetFleetsFleetIdWings200Ok = GetFleetsFleetIdWings200Ok;
/**
* Not found
*/
class GetFleetsFleetIdWingsNotFound {
}
exports.GetFleetsFleetIdWingsNotFound = GetFleetsFleetIdWingsNotFound;
/**
* squad object
*/
class GetFleetsFleetIdWingsSquad {
}
exports.GetFleetsFleetIdWingsSquad = GetFleetsFleetIdWingsSquad;
/**
* active_total object
*/
class GetFwLeaderboardsActiveTotal {
}
exports.GetFwLeaderboardsActiveTotal = GetFwLeaderboardsActiveTotal;
/**
* active_total object
*/
class GetFwLeaderboardsActiveTotal1 {
}
exports.GetFwLeaderboardsActiveTotal1 = GetFwLeaderboardsActiveTotal1;
/**
* active_total object
*/
class GetFwLeaderboardsCharactersActiveTotal {
}
exports.GetFwLeaderboardsCharactersActiveTotal = GetFwLeaderboardsCharactersActiveTotal;
/**
* active_total object
*/
class GetFwLeaderboardsCharactersActiveTotal1 {
}
exports.GetFwLeaderboardsCharactersActiveTotal1 = GetFwLeaderboardsCharactersActiveTotal1;
/**
* Top 100 rankings of pilots by number of kills from yesterday, last week and in total.
*/
class GetFwLeaderboardsCharactersKills {
}
exports.GetFwLeaderboardsCharactersKills = GetFwLeaderboardsCharactersKills;
/**
* last_week object
*/
class GetFwLeaderboardsCharactersLastWeek {
}
exports.GetFwLeaderboardsCharactersLastWeek = GetFwLeaderboardsCharactersLastWeek;
/**
* last_week object
*/
class GetFwLeaderboardsCharactersLastWeek1 {
}
exports.GetFwLeaderboardsCharactersLastWeek1 = GetFwLeaderboardsCharactersLastWeek1;
/**
* 200 ok object
*/
class GetFwLeaderboardsCharactersOk {
}
exports.GetFwLeaderboardsCharactersOk = GetFwLeaderboardsCharactersOk;
/**
* Top 100 rankings of pilots by victory points from yesterday, last week and in total
*/
class GetFwLeaderboardsCharactersVictoryPoints {
}
exports.GetFwLeaderboardsCharactersVictoryPoints = GetFwLeaderboardsCharactersVictoryPoints;
/**
* yesterday object
*/
class GetFwLeaderboardsCharactersYesterday {
}
exports.GetFwLeaderboardsCharactersYesterday = GetFwLeaderboardsCharactersYesterday;
/**
* yesterday object
*/
class GetFwLeaderboardsCharactersYesterday1 {
}
exports.GetFwLeaderboardsCharactersYesterday1 = GetFwLeaderboardsCharactersYesterday1;
/**
* active_total object
*/
class GetFwLeaderboardsCorporationsActiveTotal {
}
exports.GetFwLeaderboardsCorporationsActiveTotal = GetFwLeaderboardsCorporationsActiveTotal;
/**
* active_total object
*/
class GetFwLeaderboardsCorporationsActiveTotal1 {
}
exports.GetFwLeaderboardsCorporationsActiveTotal1 = GetFwLeaderboardsCorporationsActiveTotal1;
/**
* Top 10 rankings of corporations by number of kills from yesterday, last week and in total.
*/
class GetFwLeaderboardsCorporationsKills {
}
exports.GetFwLeaderboardsCorporationsKills = GetFwLeaderboardsCorporationsKills;
/**
* last_week object
*/
class GetFwLeaderboardsCorporationsLastWeek {
}
exports.GetFwLeaderboardsCorporationsLastWeek = GetFwLeaderboardsCorporationsLastWeek;
/**
* last_week object
*/
class GetFwLeaderboardsCorporationsLastWeek1 {
}
exports.GetFwLeaderboardsCorporationsLastWeek1 = GetFwLeaderboardsCorporationsLastWeek1;
/**
* 200 ok object
*/
class GetFwLeaderboardsCorporationsOk {
}
exports.GetFwLeaderboardsCorporationsOk = GetFwLeaderboardsCorporationsOk;
/**
* Top 10 rankings of corporations by victory points from yesterday, last week and in total
*/
class GetFwLeaderboardsCorporationsVictoryPoints {
}
exports.GetFwLeaderboardsCorporationsVictoryPoints = GetFwLeaderboardsCorporationsVictoryPoints;
/**
* yesterday object
*/
class GetFwLeaderboardsCorporationsYesterday {
}
exports.GetFwLeaderboardsCorporationsYesterday = GetFwLeaderboardsCorporationsYesterday;
/**
* yesterday object
*/
class GetFwLeaderboardsCorporationsYesterday1 {
}
exports.GetFwLeaderboardsCorporationsYesterday1 = GetFwLeaderboardsCorporationsYesterday1;
/**
* Top 4 rankings of factions by number of kills from yesterday, last week and in total.
*/
class GetFwLeaderboardsKills {
}
exports.GetFwLeaderboardsKills = GetFwLeaderboardsKills;
/**
* last_week object
*/
class GetFwLeaderboardsLastWeek {
}
exports.GetFwLeaderboardsLastWeek = GetFwLeaderboardsLastWeek;
/**
* last_week object
*/
class GetFwLeaderboardsLastWeek1 {
}
exports.GetFwLeaderboardsLastWeek1 = GetFwLeaderboardsLastWeek1;
/**
* 200 ok object
*/
class GetFwLeaderboardsOk {
}
exports.GetFwLeaderboardsOk = GetFwLeaderboardsOk;
/**
* Top 4 rankings of factions by victory points from yesterday, last week and in total
*/
class GetFwLeaderboardsVictoryPoints {
}
exports.GetFwLeaderboardsVictoryPoints = GetFwLeaderboardsVictoryPoints;
/**
* yesterday object
*/
class GetFwLeaderboardsYesterday {
}
exports.GetFwLeaderboardsYesterday = GetFwLeaderboardsYesterday;
/**
* yesterday object
*/
class GetFwLeaderboardsYesterday1 {
}
exports.GetFwLeaderboardsYesterday1 = GetFwLeaderboardsYesterday1;
/**
* 200 ok object
*/
class GetFwStats200Ok {
}
exports.GetFwStats200Ok = GetFwStats200Ok;
/**
* Summary of kills against an enemy faction for the given faction
*/
class GetFwStatsKills {
}
exports.GetFwStatsKills = GetFwStatsKills;
/**
* Summary of victory points gained for the given faction
*/
class GetFwStatsVictoryPoints {
}
exports.GetFwStatsVictoryPoints = GetFwStatsVictoryPoints;
/**
* 200 ok object
*/
class GetFwSystems200Ok {
}
exports.GetFwSystems200Ok = GetFwSystems200Ok;
/**
* 200 ok object
*/
class GetFwWars200Ok {
}
exports.GetFwWars200Ok = GetFwWars200Ok;
/**
* 200 ok object
*/
class GetIncursions200Ok {
}
exports.GetIncursions200Ok = GetIncursions200Ok;
(function (GetIncursions200Ok) {
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Withdrawing"] = 'withdrawing'] = "Withdrawing";
        StateEnum[StateEnum["Mobilizing"] = 'mobilizing'] = "Mobilizing";
        StateEnum[StateEnum["Established"] = 'established'] = "Established";
    })(StateEnum = GetIncursions200Ok.StateEnum || (GetIncursions200Ok.StateEnum = {}));
})(GetIncursions200Ok = exports.GetIncursions200Ok || (exports.GetIncursions200Ok = {}));
/**
* 200 ok object
*/
class GetIndustryFacilities200Ok {
}
exports.GetIndustryFacilities200Ok = GetIndustryFacilities200Ok;
/**
* 200 ok object
*/
class GetIndustrySystems200Ok {
}
exports.GetIndustrySystems200Ok = GetIndustrySystems200Ok;
/**
* cost_indice object
*/
class GetIndustrySystemsCostIndice {
}
exports.GetIndustrySystemsCostIndice = GetIndustrySystemsCostIndice;
(function (GetIndustrySystemsCostIndice) {
    let ActivityEnum;
    (function (ActivityEnum) {
        ActivityEnum[ActivityEnum["Copying"] = 'copying'] = "Copying";
        ActivityEnum[ActivityEnum["Duplicating"] = 'duplicating'] = "Duplicating";
        ActivityEnum[ActivityEnum["Invention"] = 'invention'] = "Invention";
        ActivityEnum[ActivityEnum["Manufacturing"] = 'manufacturing'] = "Manufacturing";
        ActivityEnum[ActivityEnum["None"] = 'none'] = "None";
        ActivityEnum[ActivityEnum["Reaction"] = 'reaction'] = "Reaction";
        ActivityEnum[ActivityEnum["ResearchingMaterialEfficiency"] = 'researching_material_efficiency'] = "ResearchingMaterialEfficiency";
        ActivityEnum[ActivityEnum["ResearchingTechnology"] = 'researching_technology'] = "ResearchingTechnology";
        ActivityEnum[ActivityEnum["ResearchingTimeEfficiency"] = 'researching_time_efficiency'] = "ResearchingTimeEfficiency";
        ActivityEnum[ActivityEnum["ReverseEngineering"] = 'reverse_engineering'] = "ReverseEngineering";
    })(ActivityEnum = GetIndustrySystemsCostIndice.ActivityEnum || (GetIndustrySystemsCostIndice.ActivityEnum = {}));
})(GetIndustrySystemsCostIndice = exports.GetIndustrySystemsCostIndice || (exports.GetIndustrySystemsCostIndice = {}));
/**
* 200 ok object
*/
class GetInsurancePrices200Ok {
}
exports.GetInsurancePrices200Ok = GetInsurancePrices200Ok;
/**
* level object
*/
class GetInsurancePricesLevel {
}
exports.GetInsurancePricesLevel = GetInsurancePricesLevel;
/**
* attacker object
*/
class GetKillmailsKillmailIdKillmailHashAttacker {
}
exports.GetKillmailsKillmailIdKillmailHashAttacker = GetKillmailsKillmailIdKillmailHashAttacker;
/**
* item object
*/
class GetKillmailsKillmailIdKillmailHashItem {
}
exports.GetKillmailsKillmailIdKillmailHashItem = GetKillmailsKillmailIdKillmailHashItem;
/**
* item object
*/
class GetKillmailsKillmailIdKillmailHashItem1 {
}
exports.GetKillmailsKillmailIdKillmailHashItem1 = GetKillmailsKillmailIdKillmailHashItem1;
/**
* 200 ok object
*/
class GetKillmailsKillmailIdKillmailHashOk {
}
exports.GetKillmailsKillmailIdKillmailHashOk = GetKillmailsKillmailIdKillmailHashOk;
/**
* Coordinates of the victim in Cartesian space relative to the Sun
*/
class GetKillmailsKillmailIdKillmailHashPosition {
}
exports.GetKillmailsKillmailIdKillmailHashPosition = GetKillmailsKillmailIdKillmailHashPosition;
/**
* Unprocessable entity
*/
class GetKillmailsKillmailIdKillmailHashUnprocessableEntity {
}
exports.GetKillmailsKillmailIdKillmailHashUnprocessableEntity = GetKillmailsKillmailIdKillmailHashUnprocessableEntity;
/**
* victim object
*/
class GetKillmailsKillmailIdKillmailHashVictim {
}
exports.GetKillmailsKillmailIdKillmailHashVictim = GetKillmailsKillmailIdKillmailHashVictim;
/**
* 200 ok object
*/
class GetLoyaltyStoresCorporationIdOffers200Ok {
}
exports.GetLoyaltyStoresCorporationIdOffers200Ok = GetLoyaltyStoresCorporationIdOffers200Ok;
/**
* required_item object
*/
class GetLoyaltyStoresCorporationIdOffersRequiredItem {
}
exports.GetLoyaltyStoresCorporationIdOffersRequiredItem = GetLoyaltyStoresCorporationIdOffersRequiredItem;
/**
* Not found
*/
class GetMarketsGroupsMarketGroupIdNotFound {
}
exports.GetMarketsGroupsMarketGroupIdNotFound = GetMarketsGroupsMarketGroupIdNotFound;
/**
* 200 ok object
*/
class GetMarketsGroupsMarketGroupIdOk {
}
exports.GetMarketsGroupsMarketGroupIdOk = GetMarketsGroupsMarketGroupIdOk;
/**
* 200 ok object
*/
class GetMarketsPrices200Ok {
}
exports.GetMarketsPrices200Ok = GetMarketsPrices200Ok;
/**
* 200 ok object
*/
class GetMarketsRegionIdHistory200Ok {
}
exports.GetMarketsRegionIdHistory200Ok = GetMarketsRegionIdHistory200Ok;
/**
* Unprocessable entity
*/
class GetMarketsRegionIdHistoryUnprocessableEntity {
}
exports.GetMarketsRegionIdHistoryUnprocessableEntity = GetMarketsRegionIdHistoryUnprocessableEntity;
/**
* 200 ok object
*/
class GetMarketsRegionIdOrders200Ok {
}
exports.GetMarketsRegionIdOrders200Ok = GetMarketsRegionIdOrders200Ok;
(function (GetMarketsRegionIdOrders200Ok) {
    let RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
    })(RangeEnum = GetMarketsRegionIdOrders200Ok.RangeEnum || (GetMarketsRegionIdOrders200Ok.RangeEnum = {}));
})(GetMarketsRegionIdOrders200Ok = exports.GetMarketsRegionIdOrders200Ok || (exports.GetMarketsRegionIdOrders200Ok = {}));
/**
* Unprocessable entity
*/
class GetMarketsRegionIdOrdersUnprocessableEntity {
}
exports.GetMarketsRegionIdOrdersUnprocessableEntity = GetMarketsRegionIdOrdersUnprocessableEntity;
/**
* 200 ok object
*/
class GetMarketsStructuresStructureId200Ok {
}
exports.GetMarketsStructuresStructureId200Ok = GetMarketsStructuresStructureId200Ok;
(function (GetMarketsStructuresStructureId200Ok) {
    let RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
    })(RangeEnum = GetMarketsStructuresStructureId200Ok.RangeEnum || (GetMarketsStructuresStructureId200Ok.RangeEnum = {}));
})(GetMarketsStructuresStructureId200Ok = exports.GetMarketsStructuresStructureId200Ok || (exports.GetMarketsStructuresStructureId200Ok = {}));
/**
* 200 ok object
*/
class GetOpportunitiesGroupsGroupIdOk {
}
exports.GetOpportunitiesGroupsGroupIdOk = GetOpportunitiesGroupsGroupIdOk;
/**
* 200 ok object
*/
class GetOpportunitiesTasksTaskIdOk {
}
exports.GetOpportunitiesTasksTaskIdOk = GetOpportunitiesTasksTaskIdOk;
/**
* Not found
*/
class GetRouteOriginDestinationNotFound {
}
exports.GetRouteOriginDestinationNotFound = GetRouteOriginDestinationNotFound;
/**
* 200 ok object
*/
class GetSearchOk {
}
exports.GetSearchOk = GetSearchOk;
/**
* 200 ok object
*/
class GetSovereigntyCampaigns200Ok {
}
exports.GetSovereigntyCampaigns200Ok = GetSovereigntyCampaigns200Ok;
(function (GetSovereigntyCampaigns200Ok) {
    let EventTypeEnum;
    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["TcuDefense"] = 'tcu_defense'] = "TcuDefense";
        EventTypeEnum[EventTypeEnum["IhubDefense"] = 'ihub_defense'] = "IhubDefense";
        EventTypeEnum[EventTypeEnum["StationDefense"] = 'station_defense'] = "StationDefense";
        EventTypeEnum[EventTypeEnum["StationFreeport"] = 'station_freeport'] = "StationFreeport";
    })(EventTypeEnum = GetSovereigntyCampaigns200Ok.EventTypeEnum || (GetSovereigntyCampaigns200Ok.EventTypeEnum = {}));
})(GetSovereigntyCampaigns200Ok = exports.GetSovereigntyCampaigns200Ok || (exports.GetSovereigntyCampaigns200Ok = {}));
/**
* participant object
*/
class GetSovereigntyCampaignsParticipant {
}
exports.GetSovereigntyCampaignsParticipant = GetSovereigntyCampaignsParticipant;
/**
* 200 ok object
*/
class GetSovereigntyMap200Ok {
}
exports.GetSovereigntyMap200Ok = GetSovereigntyMap200Ok;
/**
* 200 ok object
*/
class GetSovereigntyStructures200Ok {
}
exports.GetSovereigntyStructures200Ok = GetSovereigntyStructures200Ok;
/**
* 200 ok object
*/
class GetStatusOk {
}
exports.GetStatusOk = GetStatusOk;
/**
* 200 ok object
*/
class GetUniverseBloodlines200Ok {
}
exports.GetUniverseBloodlines200Ok = GetUniverseBloodlines200Ok;
/**
* Not found
*/
class GetUniverseCategoriesCategoryIdNotFound {
}
exports.GetUniverseCategoriesCategoryIdNotFound = GetUniverseCategoriesCategoryIdNotFound;
/**
* 200 ok object
*/
class GetUniverseCategoriesCategoryIdOk {
}
exports.GetUniverseCategoriesCategoryIdOk = GetUniverseCategoriesCategoryIdOk;
/**
* Not found
*/
class GetUniverseConstellationsConstellationIdNotFound {
}
exports.GetUniverseConstellationsConstellationIdNotFound = GetUniverseConstellationsConstellationIdNotFound;
/**
* 200 ok object
*/
class GetUniverseConstellationsConstellationIdOk {
}
exports.GetUniverseConstellationsConstellationIdOk = GetUniverseConstellationsConstellationIdOk;
/**
* position object
*/
class GetUniverseConstellationsConstellationIdPosition {
}
exports.GetUniverseConstellationsConstellationIdPosition = GetUniverseConstellationsConstellationIdPosition;
/**
* 200 ok object
*/
class GetUniverseFactions200Ok {
}
exports.GetUniverseFactions200Ok = GetUniverseFactions200Ok;
/**
* Not found
*/
class GetUniverseGraphicsGraphicIdNotFound {
}
exports.GetUniverseGraphicsGraphicIdNotFound = GetUniverseGraphicsGraphicIdNotFound;
/**
* 200 ok object
*/
class GetUniverseGraphicsGraphicIdOk {
}
exports.GetUniverseGraphicsGraphicIdOk = GetUniverseGraphicsGraphicIdOk;
/**
* Not found
*/
class GetUniverseGroupsGroupIdNotFound {
}
exports.GetUniverseGroupsGroupIdNotFound = GetUniverseGroupsGroupIdNotFound;
/**
* 200 ok object
*/
class GetUniverseGroupsGroupIdOk {
}
exports.GetUniverseGroupsGroupIdOk = GetUniverseGroupsGroupIdOk;
/**
* Not found
*/
class GetUniverseMoonsMoonIdNotFound {
}
exports.GetUniverseMoonsMoonIdNotFound = GetUniverseMoonsMoonIdNotFound;
/**
* 200 ok object
*/
class GetUniverseMoonsMoonIdOk {
}
exports.GetUniverseMoonsMoonIdOk = GetUniverseMoonsMoonIdOk;
/**
* position object
*/
class GetUniverseMoonsMoonIdPosition {
}
exports.GetUniverseMoonsMoonIdPosition = GetUniverseMoonsMoonIdPosition;
/**
* Not found
*/
class GetUniversePlanetsPlanetIdNotFound {
}
exports.GetUniversePlanetsPlanetIdNotFound = GetUniversePlanetsPlanetIdNotFound;
/**
* 200 ok object
*/
class GetUniversePlanetsPlanetIdOk {
}
exports.GetUniversePlanetsPlanetIdOk = GetUniversePlanetsPlanetIdOk;
/**
* position object
*/
class GetUniversePlanetsPlanetIdPosition {
}
exports.GetUniversePlanetsPlanetIdPosition = GetUniversePlanetsPlanetIdPosition;
/**
* 200 ok object
*/
class GetUniverseRaces200Ok {
}
exports.GetUniverseRaces200Ok = GetUniverseRaces200Ok;
/**
* Not found
*/
class GetUniverseRegionsRegionIdNotFound {
}
exports.GetUniverseRegionsRegionIdNotFound = GetUniverseRegionsRegionIdNotFound;
/**
* 200 ok object
*/
class GetUniverseRegionsRegionIdOk {
}
exports.GetUniverseRegionsRegionIdOk = GetUniverseRegionsRegionIdOk;
/**
* Schematic not found
*/
class GetUniverseSchematicsSchematicIdNotFound {
}
exports.GetUniverseSchematicsSchematicIdNotFound = GetUniverseSchematicsSchematicIdNotFound;
/**
* 200 ok object
*/
class GetUniverseSchematicsSchematicIdOk {
}
exports.GetUniverseSchematicsSchematicIdOk = GetUniverseSchematicsSchematicIdOk;
/**
* destination object
*/
class GetUniverseStargatesStargateIdDestination {
}
exports.GetUniverseStargatesStargateIdDestination = GetUniverseStargatesStargateIdDestination;
/**
* Not found
*/
class GetUniverseStargatesStargateIdNotFound {
}
exports.GetUniverseStargatesStargateIdNotFound = GetUniverseStargatesStargateIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStargatesStargateIdOk {
}
exports.GetUniverseStargatesStargateIdOk = GetUniverseStargatesStargateIdOk;
/**
* position object
*/
class GetUniverseStargatesStargateIdPosition {
}
exports.GetUniverseStargatesStargateIdPosition = GetUniverseStargatesStargateIdPosition;
/**
* 200 ok object
*/
class GetUniverseStarsStarIdOk {
}
exports.GetUniverseStarsStarIdOk = GetUniverseStarsStarIdOk;
(function (GetUniverseStarsStarIdOk) {
    let SpectralClassEnum;
    (function (SpectralClassEnum) {
        SpectralClassEnum[SpectralClassEnum["K2V"] = 'K2 V'] = "K2V";
        SpectralClassEnum[SpectralClassEnum["K4V"] = 'K4 V'] = "K4V";
        SpectralClassEnum[SpectralClassEnum["G2V"] = 'G2 V'] = "G2V";
        SpectralClassEnum[SpectralClassEnum["G8V"] = 'G8 V'] = "G8V";
        SpectralClassEnum[SpectralClassEnum["M7V"] = 'M7 V'] = "M7V";
        SpectralClassEnum[SpectralClassEnum["K7V"] = 'K7 V'] = "K7V";
        SpectralClassEnum[SpectralClassEnum["M2V"] = 'M2 V'] = "M2V";
        SpectralClassEnum[SpectralClassEnum["K5V"] = 'K5 V'] = "K5V";
        SpectralClassEnum[SpectralClassEnum["M3V"] = 'M3 V'] = "M3V";
        SpectralClassEnum[SpectralClassEnum["G0V"] = 'G0 V'] = "G0V";
        SpectralClassEnum[SpectralClassEnum["G7V"] = 'G7 V'] = "G7V";
        SpectralClassEnum[SpectralClassEnum["G3V"] = 'G3 V'] = "G3V";
        SpectralClassEnum[SpectralClassEnum["F9V"] = 'F9 V'] = "F9V";
        SpectralClassEnum[SpectralClassEnum["G5V"] = 'G5 V'] = "G5V";
        SpectralClassEnum[SpectralClassEnum["F6V"] = 'F6 V'] = "F6V";
        SpectralClassEnum[SpectralClassEnum["K8V"] = 'K8 V'] = "K8V";
        SpectralClassEnum[SpectralClassEnum["K9V"] = 'K9 V'] = "K9V";
        SpectralClassEnum[SpectralClassEnum["K6V"] = 'K6 V'] = "K6V";
        SpectralClassEnum[SpectralClassEnum["G9V"] = 'G9 V'] = "G9V";
        SpectralClassEnum[SpectralClassEnum["G6V"] = 'G6 V'] = "G6V";
        SpectralClassEnum[SpectralClassEnum["G4VI"] = 'G4 VI'] = "G4VI";
        SpectralClassEnum[SpectralClassEnum["G4V"] = 'G4 V'] = "G4V";
        SpectralClassEnum[SpectralClassEnum["F8V"] = 'F8 V'] = "F8V";
        SpectralClassEnum[SpectralClassEnum["F2V"] = 'F2 V'] = "F2V";
        SpectralClassEnum[SpectralClassEnum["F1V"] = 'F1 V'] = "F1V";
        SpectralClassEnum[SpectralClassEnum["K3V"] = 'K3 V'] = "K3V";
        SpectralClassEnum[SpectralClassEnum["F0VI"] = 'F0 VI'] = "F0VI";
        SpectralClassEnum[SpectralClassEnum["G1VI"] = 'G1 VI'] = "G1VI";
        SpectralClassEnum[SpectralClassEnum["G0VI"] = 'G0 VI'] = "G0VI";
        SpectralClassEnum[SpectralClassEnum["K1V"] = 'K1 V'] = "K1V";
        SpectralClassEnum[SpectralClassEnum["M4V"] = 'M4 V'] = "M4V";
        SpectralClassEnum[SpectralClassEnum["M1V"] = 'M1 V'] = "M1V";
        SpectralClassEnum[SpectralClassEnum["M6V"] = 'M6 V'] = "M6V";
        SpectralClassEnum[SpectralClassEnum["M0V"] = 'M0 V'] = "M0V";
        SpectralClassEnum[SpectralClassEnum["K2IV"] = 'K2 IV'] = "K2IV";
        SpectralClassEnum[SpectralClassEnum["G2VI"] = 'G2 VI'] = "G2VI";
        SpectralClassEnum[SpectralClassEnum["K0V"] = 'K0 V'] = "K0V";
        SpectralClassEnum[SpectralClassEnum["K5IV"] = 'K5 IV'] = "K5IV";
        SpectralClassEnum[SpectralClassEnum["F5VI"] = 'F5 VI'] = "F5VI";
        SpectralClassEnum[SpectralClassEnum["G6VI"] = 'G6 VI'] = "G6VI";
        SpectralClassEnum[SpectralClassEnum["F6VI"] = 'F6 VI'] = "F6VI";
        SpectralClassEnum[SpectralClassEnum["F2IV"] = 'F2 IV'] = "F2IV";
        SpectralClassEnum[SpectralClassEnum["G3VI"] = 'G3 VI'] = "G3VI";
        SpectralClassEnum[SpectralClassEnum["M8V"] = 'M8 V'] = "M8V";
        SpectralClassEnum[SpectralClassEnum["F1VI"] = 'F1 VI'] = "F1VI";
        SpectralClassEnum[SpectralClassEnum["K1IV"] = 'K1 IV'] = "K1IV";
        SpectralClassEnum[SpectralClassEnum["F7V"] = 'F7 V'] = "F7V";
        SpectralClassEnum[SpectralClassEnum["G5VI"] = 'G5 VI'] = "G5VI";
        SpectralClassEnum[SpectralClassEnum["M5V"] = 'M5 V'] = "M5V";
        SpectralClassEnum[SpectralClassEnum["G7VI"] = 'G7 VI'] = "G7VI";
        SpectralClassEnum[SpectralClassEnum["F5V"] = 'F5 V'] = "F5V";
        SpectralClassEnum[SpectralClassEnum["F4VI"] = 'F4 VI'] = "F4VI";
        SpectralClassEnum[SpectralClassEnum["F8VI"] = 'F8 VI'] = "F8VI";
        SpectralClassEnum[SpectralClassEnum["K3IV"] = 'K3 IV'] = "K3IV";
        SpectralClassEnum[SpectralClassEnum["F4IV"] = 'F4 IV'] = "F4IV";
        SpectralClassEnum[SpectralClassEnum["F0V"] = 'F0 V'] = "F0V";
        SpectralClassEnum[SpectralClassEnum["G7IV"] = 'G7 IV'] = "G7IV";
        SpectralClassEnum[SpectralClassEnum["G8VI"] = 'G8 VI'] = "G8VI";
        SpectralClassEnum[SpectralClassEnum["F2VI"] = 'F2 VI'] = "F2VI";
        SpectralClassEnum[SpectralClassEnum["F4V"] = 'F4 V'] = "F4V";
        SpectralClassEnum[SpectralClassEnum["F7VI"] = 'F7 VI'] = "F7VI";
        SpectralClassEnum[SpectralClassEnum["F3V"] = 'F3 V'] = "F3V";
        SpectralClassEnum[SpectralClassEnum["G1V"] = 'G1 V'] = "G1V";
        SpectralClassEnum[SpectralClassEnum["G9VI"] = 'G9 VI'] = "G9VI";
        SpectralClassEnum[SpectralClassEnum["F3IV"] = 'F3 IV'] = "F3IV";
        SpectralClassEnum[SpectralClassEnum["F9VI"] = 'F9 VI'] = "F9VI";
        SpectralClassEnum[SpectralClassEnum["M9V"] = 'M9 V'] = "M9V";
        SpectralClassEnum[SpectralClassEnum["K0IV"] = 'K0 IV'] = "K0IV";
        SpectralClassEnum[SpectralClassEnum["F1IV"] = 'F1 IV'] = "F1IV";
        SpectralClassEnum[SpectralClassEnum["G4IV"] = 'G4 IV'] = "G4IV";
        SpectralClassEnum[SpectralClassEnum["F3VI"] = 'F3 VI'] = "F3VI";
        SpectralClassEnum[SpectralClassEnum["K4IV"] = 'K4 IV'] = "K4IV";
        SpectralClassEnum[SpectralClassEnum["G5IV"] = 'G5 IV'] = "G5IV";
        SpectralClassEnum[SpectralClassEnum["G3IV"] = 'G3 IV'] = "G3IV";
        SpectralClassEnum[SpectralClassEnum["G1IV"] = 'G1 IV'] = "G1IV";
        SpectralClassEnum[SpectralClassEnum["K7IV"] = 'K7 IV'] = "K7IV";
        SpectralClassEnum[SpectralClassEnum["G0IV"] = 'G0 IV'] = "G0IV";
        SpectralClassEnum[SpectralClassEnum["K6IV"] = 'K6 IV'] = "K6IV";
        SpectralClassEnum[SpectralClassEnum["K9IV"] = 'K9 IV'] = "K9IV";
        SpectralClassEnum[SpectralClassEnum["G2IV"] = 'G2 IV'] = "G2IV";
        SpectralClassEnum[SpectralClassEnum["F9IV"] = 'F9 IV'] = "F9IV";
        SpectralClassEnum[SpectralClassEnum["F0IV"] = 'F0 IV'] = "F0IV";
        SpectralClassEnum[SpectralClassEnum["K8IV"] = 'K8 IV'] = "K8IV";
        SpectralClassEnum[SpectralClassEnum["G8IV"] = 'G8 IV'] = "G8IV";
        SpectralClassEnum[SpectralClassEnum["F6IV"] = 'F6 IV'] = "F6IV";
        SpectralClassEnum[SpectralClassEnum["F5IV"] = 'F5 IV'] = "F5IV";
        SpectralClassEnum[SpectralClassEnum["A0"] = 'A0'] = "A0";
        SpectralClassEnum[SpectralClassEnum["A0IV"] = 'A0IV'] = "A0IV";
        SpectralClassEnum[SpectralClassEnum["A0IV2"] = 'A0IV2'] = "A0IV2";
    })(SpectralClassEnum = GetUniverseStarsStarIdOk.SpectralClassEnum || (GetUniverseStarsStarIdOk.SpectralClassEnum = {}));
})(GetUniverseStarsStarIdOk = exports.GetUniverseStarsStarIdOk || (exports.GetUniverseStarsStarIdOk = {}));
/**
* Not found
*/
class GetUniverseStationsStationIdNotFound {
}
exports.GetUniverseStationsStationIdNotFound = GetUniverseStationsStationIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStationsStationIdOk {
}
exports.GetUniverseStationsStationIdOk = GetUniverseStationsStationIdOk;
(function (GetUniverseStationsStationIdOk) {
    let ServicesEnum;
    (function (ServicesEnum) {
        ServicesEnum[ServicesEnum["BountyMissions"] = 'bounty-missions'] = "BountyMissions";
        ServicesEnum[ServicesEnum["AssasinationMissions"] = 'assasination-missions'] = "AssasinationMissions";
        ServicesEnum[ServicesEnum["CourierMissions"] = 'courier-missions'] = "CourierMissions";
        ServicesEnum[ServicesEnum["Interbus"] = 'interbus'] = "Interbus";
        ServicesEnum[ServicesEnum["ReprocessingPlant"] = 'reprocessing-plant'] = "ReprocessingPlant";
        ServicesEnum[ServicesEnum["Refinery"] = 'refinery'] = "Refinery";
        ServicesEnum[ServicesEnum["Market"] = 'market'] = "Market";
        ServicesEnum[ServicesEnum["BlackMarket"] = 'black-market'] = "BlackMarket";
        ServicesEnum[ServicesEnum["StockExchange"] = 'stock-exchange'] = "StockExchange";
        ServicesEnum[ServicesEnum["Cloning"] = 'cloning'] = "Cloning";
        ServicesEnum[ServicesEnum["Surgery"] = 'surgery'] = "Surgery";
        ServicesEnum[ServicesEnum["DnaTherapy"] = 'dna-therapy'] = "DnaTherapy";
        ServicesEnum[ServicesEnum["RepairFacilities"] = 'repair-facilities'] = "RepairFacilities";
        ServicesEnum[ServicesEnum["Factory"] = 'factory'] = "Factory";
        ServicesEnum[ServicesEnum["Labratory"] = 'labratory'] = "Labratory";
        ServicesEnum[ServicesEnum["Gambling"] = 'gambling'] = "Gambling";
        ServicesEnum[ServicesEnum["Fitting"] = 'fitting'] = "Fitting";
        ServicesEnum[ServicesEnum["Paintshop"] = 'paintshop'] = "Paintshop";
        ServicesEnum[ServicesEnum["News"] = 'news'] = "News";
        ServicesEnum[ServicesEnum["Storage"] = 'storage'] = "Storage";
        ServicesEnum[ServicesEnum["Insurance"] = 'insurance'] = "Insurance";
        ServicesEnum[ServicesEnum["Docking"] = 'docking'] = "Docking";
        ServicesEnum[ServicesEnum["OfficeRental"] = 'office-rental'] = "OfficeRental";
        ServicesEnum[ServicesEnum["JumpCloneFacility"] = 'jump-clone-facility'] = "JumpCloneFacility";
        ServicesEnum[ServicesEnum["LoyaltyPointStore"] = 'loyalty-point-store'] = "LoyaltyPointStore";
        ServicesEnum[ServicesEnum["NavyOffices"] = 'navy-offices'] = "NavyOffices";
        ServicesEnum[ServicesEnum["SecurityOffices"] = 'security-offices'] = "SecurityOffices";
    })(ServicesEnum = GetUniverseStationsStationIdOk.ServicesEnum || (GetUniverseStationsStationIdOk.ServicesEnum = {}));
})(GetUniverseStationsStationIdOk = exports.GetUniverseStationsStationIdOk || (exports.GetUniverseStationsStationIdOk = {}));
/**
* position object
*/
class GetUniverseStationsStationIdPosition {
}
exports.GetUniverseStationsStationIdPosition = GetUniverseStationsStationIdPosition;
/**
* Not found
*/
class GetUniverseStructuresStructureIdNotFound {
}
exports.GetUniverseStructuresStructureIdNotFound = GetUniverseStructuresStructureIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStructuresStructureIdOk {
}
exports.GetUniverseStructuresStructureIdOk = GetUniverseStructuresStructureIdOk;
/**
* Coordinates of the structure in Cartesian space relative to the Sun, in metres.
*/
class GetUniverseStructuresStructureIdPosition {
}
exports.GetUniverseStructuresStructureIdPosition = GetUniverseStructuresStructureIdPosition;
/**
* 200 ok object
*/
class GetUniverseSystemJumps200Ok {
}
exports.GetUniverseSystemJumps200Ok = GetUniverseSystemJumps200Ok;
/**
* 200 ok object
*/
class GetUniverseSystemKills200Ok {
}
exports.GetUniverseSystemKills200Ok = GetUniverseSystemKills200Ok;
/**
* Not found
*/
class GetUniverseSystemsSystemIdNotFound {
}
exports.GetUniverseSystemsSystemIdNotFound = GetUniverseSystemsSystemIdNotFound;
/**
* 200 ok object
*/
class GetUniverseSystemsSystemIdOk {
}
exports.GetUniverseSystemsSystemIdOk = GetUniverseSystemsSystemIdOk;
/**
* planet object
*/
class GetUniverseSystemsSystemIdPlanet {
}
exports.GetUniverseSystemsSystemIdPlanet = GetUniverseSystemsSystemIdPlanet;
/**
* position object
*/
class GetUniverseSystemsSystemIdPosition {
}
exports.GetUniverseSystemsSystemIdPosition = GetUniverseSystemsSystemIdPosition;
/**
* dogma_attribute object
*/
class GetUniverseTypesTypeIdDogmaAttribute {
}
exports.GetUniverseTypesTypeIdDogmaAttribute = GetUniverseTypesTypeIdDogmaAttribute;
/**
* dogma_effect object
*/
class GetUniverseTypesTypeIdDogmaEffect {
}
exports.GetUniverseTypesTypeIdDogmaEffect = GetUniverseTypesTypeIdDogmaEffect;
/**
* Not found
*/
class GetUniverseTypesTypeIdNotFound {
}
exports.GetUniverseTypesTypeIdNotFound = GetUniverseTypesTypeIdNotFound;
/**
* 200 ok object
*/
class GetUniverseTypesTypeIdOk {
}
exports.GetUniverseTypesTypeIdOk = GetUniverseTypesTypeIdOk;
/**
* The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
class GetWarsWarIdAggressor {
}
exports.GetWarsWarIdAggressor = GetWarsWarIdAggressor;
/**
* ally object
*/
class GetWarsWarIdAlly {
}
exports.GetWarsWarIdAlly = GetWarsWarIdAlly;
/**
* The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
class GetWarsWarIdDefender {
}
exports.GetWarsWarIdDefender = GetWarsWarIdDefender;
/**
* 200 ok object
*/
class GetWarsWarIdKillmails200Ok {
}
exports.GetWarsWarIdKillmails200Ok = GetWarsWarIdKillmails200Ok;
/**
* Unprocessable entity
*/
class GetWarsWarIdKillmailsUnprocessableEntity {
}
exports.GetWarsWarIdKillmailsUnprocessableEntity = GetWarsWarIdKillmailsUnprocessableEntity;
/**
* 200 ok object
*/
class GetWarsWarIdOk {
}
exports.GetWarsWarIdOk = GetWarsWarIdOk;
/**
* Unprocessable entity
*/
class GetWarsWarIdUnprocessableEntity {
}
exports.GetWarsWarIdUnprocessableEntity = GetWarsWarIdUnprocessableEntity;
/**
* Internal server error model
*/
class InternalServerError {
}
exports.InternalServerError = InternalServerError;
/**
* 200 ok object
*/
class PostCharactersAffiliation200Ok {
}
exports.PostCharactersAffiliation200Ok = PostCharactersAffiliation200Ok;
/**
* Not found
*/
class PostCharactersAffiliationNotFound {
}
exports.PostCharactersAffiliationNotFound = PostCharactersAffiliationNotFound;
/**
* 200 ok object
*/
class PostCharactersCharacterIdAssetsLocations200Ok {
}
exports.PostCharactersCharacterIdAssetsLocations200Ok = PostCharactersCharacterIdAssetsLocations200Ok;
/**
* position object
*/
class PostCharactersCharacterIdAssetsLocationsPosition {
}
exports.PostCharactersCharacterIdAssetsLocationsPosition = PostCharactersCharacterIdAssetsLocationsPosition;
/**
* 200 ok object
*/
class PostCharactersCharacterIdAssetsNames200Ok {
}
exports.PostCharactersCharacterIdAssetsNames200Ok = PostCharactersCharacterIdAssetsNames200Ok;
/**
* 201 created object
*/
class PostCharactersCharacterIdFittingsCreated {
}
exports.PostCharactersCharacterIdFittingsCreated = PostCharactersCharacterIdFittingsCreated;
/**
* fitting object
*/
class PostCharactersCharacterIdFittingsFitting {
}
exports.PostCharactersCharacterIdFittingsFitting = PostCharactersCharacterIdFittingsFitting;
/**
* item object
*/
class PostCharactersCharacterIdFittingsItem {
}
exports.PostCharactersCharacterIdFittingsItem = PostCharactersCharacterIdFittingsItem;
/**
* Bad request
*/
class PostCharactersCharacterIdMailBadRequest {
}
exports.PostCharactersCharacterIdMailBadRequest = PostCharactersCharacterIdMailBadRequest;
/**
* label object
*/
class PostCharactersCharacterIdMailLabelsLabel {
}
exports.PostCharactersCharacterIdMailLabelsLabel = PostCharactersCharacterIdMailLabelsLabel;
(function (PostCharactersCharacterIdMailLabelsLabel) {
    let ColorEnum;
    (function (ColorEnum) {
        ColorEnum[ColorEnum["_0000fe"] = '#0000fe'] = "_0000fe";
        ColorEnum[ColorEnum["_006634"] = '#006634'] = "_006634";
        ColorEnum[ColorEnum["_0099ff"] = '#0099ff'] = "_0099ff";
        ColorEnum[ColorEnum["_00ff33"] = '#00ff33'] = "_00ff33";
        ColorEnum[ColorEnum["_01ffff"] = '#01ffff'] = "_01ffff";
        ColorEnum[ColorEnum["_349800"] = '#349800'] = "_349800";
        ColorEnum[ColorEnum["_660066"] = '#660066'] = "_660066";
        ColorEnum[ColorEnum["_666666"] = '#666666'] = "_666666";
        ColorEnum[ColorEnum["_999999"] = '#999999'] = "_999999";
        ColorEnum[ColorEnum["_99ffff"] = '#99ffff'] = "_99ffff";
        ColorEnum[ColorEnum["_9a0000"] = '#9a0000'] = "_9a0000";
        ColorEnum[ColorEnum["Ccff9a"] = '#ccff9a'] = "Ccff9a";
        ColorEnum[ColorEnum["E6e6e6"] = '#e6e6e6'] = "E6e6e6";
        ColorEnum[ColorEnum["Fe0000"] = '#fe0000'] = "Fe0000";
        ColorEnum[ColorEnum["Ff6600"] = '#ff6600'] = "Ff6600";
        ColorEnum[ColorEnum["Ffff01"] = '#ffff01'] = "Ffff01";
        ColorEnum[ColorEnum["Ffffcd"] = '#ffffcd'] = "Ffffcd";
        ColorEnum[ColorEnum["Ffffff"] = '#ffffff'] = "Ffffff";
    })(ColorEnum = PostCharactersCharacterIdMailLabelsLabel.ColorEnum || (PostCharactersCharacterIdMailLabelsLabel.ColorEnum = {}));
})(PostCharactersCharacterIdMailLabelsLabel = exports.PostCharactersCharacterIdMailLabelsLabel || (exports.PostCharactersCharacterIdMailLabelsLabel = {}));
/**
* mail object
*/
class PostCharactersCharacterIdMailMail {
}
exports.PostCharactersCharacterIdMailMail = PostCharactersCharacterIdMailMail;
/**
* recipient object
*/
class PostCharactersCharacterIdMailRecipient {
}
exports.PostCharactersCharacterIdMailRecipient = PostCharactersCharacterIdMailRecipient;
(function (PostCharactersCharacterIdMailRecipient) {
    let RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = PostCharactersCharacterIdMailRecipient.RecipientTypeEnum || (PostCharactersCharacterIdMailRecipient.RecipientTypeEnum = {}));
})(PostCharactersCharacterIdMailRecipient = exports.PostCharactersCharacterIdMailRecipient || (exports.PostCharactersCharacterIdMailRecipient = {}));
/**
* 200 ok object
*/
class PostCorporationsCorporationIdAssetsLocations200Ok {
}
exports.PostCorporationsCorporationIdAssetsLocations200Ok = PostCorporationsCorporationIdAssetsLocations200Ok;
/**
* position object
*/
class PostCorporationsCorporationIdAssetsLocationsPosition {
}
exports.PostCorporationsCorporationIdAssetsLocationsPosition = PostCorporationsCorporationIdAssetsLocationsPosition;
/**
* 200 ok object
*/
class PostCorporationsCorporationIdAssetsNames200Ok {
}
exports.PostCorporationsCorporationIdAssetsNames200Ok = PostCorporationsCorporationIdAssetsNames200Ok;
/**
* invitation object
*/
class PostFleetsFleetIdMembersInvitation {
}
exports.PostFleetsFleetIdMembersInvitation = PostFleetsFleetIdMembersInvitation;
(function (PostFleetsFleetIdMembersInvitation) {
    let RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = PostFleetsFleetIdMembersInvitation.RoleEnum || (PostFleetsFleetIdMembersInvitation.RoleEnum = {}));
})(PostFleetsFleetIdMembersInvitation = exports.PostFleetsFleetIdMembersInvitation || (exports.PostFleetsFleetIdMembersInvitation = {}));
/**
* Not found
*/
class PostFleetsFleetIdMembersNotFound {
}
exports.PostFleetsFleetIdMembersNotFound = PostFleetsFleetIdMembersNotFound;
/**
* 422 unprocessable entity object
*/
class PostFleetsFleetIdMembersUnprocessableEntity {
}
exports.PostFleetsFleetIdMembersUnprocessableEntity = PostFleetsFleetIdMembersUnprocessableEntity;
/**
* 201 created object
*/
class PostFleetsFleetIdWingsCreated {
}
exports.PostFleetsFleetIdWingsCreated = PostFleetsFleetIdWingsCreated;
/**
* Not found
*/
class PostFleetsFleetIdWingsNotFound {
}
exports.PostFleetsFleetIdWingsNotFound = PostFleetsFleetIdWingsNotFound;
/**
* 201 created object
*/
class PostFleetsFleetIdWingsWingIdSquadsCreated {
}
exports.PostFleetsFleetIdWingsWingIdSquadsCreated = PostFleetsFleetIdWingsWingIdSquadsCreated;
/**
* Not found
*/
class PostFleetsFleetIdWingsWingIdSquadsNotFound {
}
exports.PostFleetsFleetIdWingsWingIdSquadsNotFound = PostFleetsFleetIdWingsWingIdSquadsNotFound;
/**
* new_mail object
*/
class PostUiOpenwindowNewmailNewMail {
}
exports.PostUiOpenwindowNewmailNewMail = PostUiOpenwindowNewmailNewMail;
/**
* Unprocessable entity
*/
class PostUiOpenwindowNewmailUnprocessableEntity {
}
exports.PostUiOpenwindowNewmailUnprocessableEntity = PostUiOpenwindowNewmailUnprocessableEntity;
/**
* agent object
*/
class PostUniverseIdsAgent {
}
exports.PostUniverseIdsAgent = PostUniverseIdsAgent;
/**
* alliance object
*/
class PostUniverseIdsAlliance {
}
exports.PostUniverseIdsAlliance = PostUniverseIdsAlliance;
/**
* character object
*/
class PostUniverseIdsCharacter {
}
exports.PostUniverseIdsCharacter = PostUniverseIdsCharacter;
/**
* constellation object
*/
class PostUniverseIdsConstellation {
}
exports.PostUniverseIdsConstellation = PostUniverseIdsConstellation;
/**
* corporation object
*/
class PostUniverseIdsCorporation {
}
exports.PostUniverseIdsCorporation = PostUniverseIdsCorporation;
/**
* faction object
*/
class PostUniverseIdsFaction {
}
exports.PostUniverseIdsFaction = PostUniverseIdsFaction;
/**
* inventory_type object
*/
class PostUniverseIdsInventoryType {
}
exports.PostUniverseIdsInventoryType = PostUniverseIdsInventoryType;
/**
* 200 ok object
*/
class PostUniverseIdsOk {
}
exports.PostUniverseIdsOk = PostUniverseIdsOk;
/**
* region object
*/
class PostUniverseIdsRegion {
}
exports.PostUniverseIdsRegion = PostUniverseIdsRegion;
/**
* Service unavailable
*/
class PostUniverseIdsServiceUnavailable {
}
exports.PostUniverseIdsServiceUnavailable = PostUniverseIdsServiceUnavailable;
/**
* station object
*/
class PostUniverseIdsStation {
}
exports.PostUniverseIdsStation = PostUniverseIdsStation;
/**
* system object
*/
class PostUniverseIdsSystem {
}
exports.PostUniverseIdsSystem = PostUniverseIdsSystem;
/**
* 200 ok object
*/
class PostUniverseNames200Ok {
}
exports.PostUniverseNames200Ok = PostUniverseNames200Ok;
(function (PostUniverseNames200Ok) {
    let CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum[CategoryEnum["Alliance"] = 'alliance'] = "Alliance";
        CategoryEnum[CategoryEnum["Character"] = 'character'] = "Character";
        CategoryEnum[CategoryEnum["Constellation"] = 'constellation'] = "Constellation";
        CategoryEnum[CategoryEnum["Corporation"] = 'corporation'] = "Corporation";
        CategoryEnum[CategoryEnum["InventoryType"] = 'inventory_type'] = "InventoryType";
        CategoryEnum[CategoryEnum["Region"] = 'region'] = "Region";
        CategoryEnum[CategoryEnum["SolarSystem"] = 'solar_system'] = "SolarSystem";
        CategoryEnum[CategoryEnum["Station"] = 'station'] = "Station";
    })(CategoryEnum = PostUniverseNames200Ok.CategoryEnum || (PostUniverseNames200Ok.CategoryEnum = {}));
})(PostUniverseNames200Ok = exports.PostUniverseNames200Ok || (exports.PostUniverseNames200Ok = {}));
/**
* Not found
*/
class PostUniverseNamesNotFound {
}
exports.PostUniverseNamesNotFound = PostUniverseNamesNotFound;
/**
* response object
*/
class PutCharactersCharacterIdCalendarEventIdResponse {
}
exports.PutCharactersCharacterIdCalendarEventIdResponse = PutCharactersCharacterIdCalendarEventIdResponse;
(function (PutCharactersCharacterIdCalendarEventIdResponse) {
    let ResponseEnum;
    (function (ResponseEnum) {
        ResponseEnum[ResponseEnum["Accepted"] = 'accepted'] = "Accepted";
        ResponseEnum[ResponseEnum["Declined"] = 'declined'] = "Declined";
        ResponseEnum[ResponseEnum["Tentative"] = 'tentative'] = "Tentative";
    })(ResponseEnum = PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum || (PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum = {}));
})(PutCharactersCharacterIdCalendarEventIdResponse = exports.PutCharactersCharacterIdCalendarEventIdResponse || (exports.PutCharactersCharacterIdCalendarEventIdResponse = {}));
/**
* Bad request
*/
class PutCharactersCharacterIdMailMailIdBadRequest {
}
exports.PutCharactersCharacterIdMailMailIdBadRequest = PutCharactersCharacterIdMailMailIdBadRequest;
/**
* contents object
*/
class PutCharactersCharacterIdMailMailIdContents {
}
exports.PutCharactersCharacterIdMailMailIdContents = PutCharactersCharacterIdMailMailIdContents;
/**
* new_schedule object
*/
class PutCorporationsCorporationIdStructuresStructureIdNewSchedule {
}
exports.PutCorporationsCorporationIdStructuresStructureIdNewSchedule = PutCorporationsCorporationIdStructuresStructureIdNewSchedule;
/**
* Bad request
*/
class PutFleetsFleetIdBadRequest {
}
exports.PutFleetsFleetIdBadRequest = PutFleetsFleetIdBadRequest;
/**
* movement object
*/
class PutFleetsFleetIdMembersMemberIdMovement {
}
exports.PutFleetsFleetIdMembersMemberIdMovement = PutFleetsFleetIdMembersMemberIdMovement;
(function (PutFleetsFleetIdMembersMemberIdMovement) {
    let RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = PutFleetsFleetIdMembersMemberIdMovement.RoleEnum || (PutFleetsFleetIdMembersMemberIdMovement.RoleEnum = {}));
})(PutFleetsFleetIdMembersMemberIdMovement = exports.PutFleetsFleetIdMembersMemberIdMovement || (exports.PutFleetsFleetIdMembersMemberIdMovement = {}));
/**
* Not found
*/
class PutFleetsFleetIdMembersMemberIdNotFound {
}
exports.PutFleetsFleetIdMembersMemberIdNotFound = PutFleetsFleetIdMembersMemberIdNotFound;
/**
* 422 unprocessable entity object
*/
class PutFleetsFleetIdMembersMemberIdUnprocessableEntity {
}
exports.PutFleetsFleetIdMembersMemberIdUnprocessableEntity = PutFleetsFleetIdMembersMemberIdUnprocessableEntity;
/**
* new_settings object
*/
class PutFleetsFleetIdNewSettings {
}
exports.PutFleetsFleetIdNewSettings = PutFleetsFleetIdNewSettings;
/**
* Not found
*/
class PutFleetsFleetIdNotFound {
}
exports.PutFleetsFleetIdNotFound = PutFleetsFleetIdNotFound;
/**
* naming object
*/
class PutFleetsFleetIdSquadsSquadIdNaming {
}
exports.PutFleetsFleetIdSquadsSquadIdNaming = PutFleetsFleetIdSquadsSquadIdNaming;
/**
* Not found
*/
class PutFleetsFleetIdSquadsSquadIdNotFound {
}
exports.PutFleetsFleetIdSquadsSquadIdNotFound = PutFleetsFleetIdSquadsSquadIdNotFound;
/**
* naming object
*/
class PutFleetsFleetIdWingsWingIdNaming {
}
exports.PutFleetsFleetIdWingsWingIdNaming = PutFleetsFleetIdWingsWingIdNaming;
/**
* Not found
*/
class PutFleetsFleetIdWingsWingIdNotFound {
}
exports.PutFleetsFleetIdWingsWingIdNotFound = PutFleetsFleetIdWingsWingIdNotFound;
class HttpBasicAuth {
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
var AllianceApiApiKeys;
(function (AllianceApiApiKeys) {
})(AllianceApiApiKeys = exports.AllianceApiApiKeys || (exports.AllianceApiApiKeys = {}));
class AllianceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[AllianceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List all alliances
     * List all active player alliances  --- Alternate route: &#x60;/dev/alliances/&#x60;  Alternate route: &#x60;/legacy/alliances/&#x60;  Alternate route: &#x60;/v1/alliances/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliances(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance information
     * Public information about an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/&#x60;  Alternate route: &#x60;/v3/alliances/{alliance_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceId(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List alliance&#39;s corporations
     * List all current member corporations of an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/corporations/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdCorporations(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/corporations/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdCorporations.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance icon
     * Get the icon urls for a alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdIcons(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/icons/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdIcons.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance names
     * Resolve a set of alliance IDs to alliance names  --- Alternate route: &#x60;/dev/alliances/names/&#x60;  Alternate route: &#x60;/v2/alliances/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param allianceIds A comma separated list of alliance IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesNames(allianceIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceIds' is not null or undefined
        if (allianceIds === null || allianceIds === undefined) {
            throw new Error('Required parameter allianceIds was null or undefined when calling getAlliancesNames.');
        }
        if (allianceIds !== undefined) {
            queryParameters['alliance_ids'] = allianceIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.AllianceApi = AllianceApi;
var AssetsApiApiKeys;
(function (AssetsApiApiKeys) {
})(AssetsApiApiKeys = exports.AssetsApiApiKeys || (exports.AssetsApiApiKeys = {}));
class AssetsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[AssetsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character assets
     * Return a list of the characters assets  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/assets/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAssets(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/assets/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdAssets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation assets
     * Return a list of the corporation assets  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/assets/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAssets(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/assets/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdAssets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character asset locations
     * Return locations for a set of item ids, which you can get from character assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/locations/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/assets/locations/&#x60;
     * @param characterId An EVE character ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdAssetsLocations(characterId, itemIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/assets/locations/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdAssetsLocations.');
        }
        // verify required parameter 'itemIds' is not null or undefined
        if (itemIds === null || itemIds === undefined) {
            throw new Error('Required parameter itemIds was null or undefined when calling postCharactersCharacterIdAssetsLocations.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: itemIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character asset names
     * Return names for a set of item ids, which you can get from character assets endpoint. Typically used for items that can customize names, like containers or ships.  --- Alternate route: &#x60;/dev/characters/{character_id}/assets/names/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/assets/names/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/assets/names/&#x60;
     * @param characterId An EVE character ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdAssetsNames(characterId, itemIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/assets/names/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdAssetsNames.');
        }
        // verify required parameter 'itemIds' is not null or undefined
        if (itemIds === null || itemIds === undefined) {
            throw new Error('Required parameter itemIds was null or undefined when calling postCharactersCharacterIdAssetsNames.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: itemIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation asset locations
     * Return locations for a set of item ids, which you can get from corporation assets endpoint. Coordinates for items in hangars or stations are set to (0,0,0)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/locations/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/assets/locations/&#x60;   --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCorporationsCorporationIdAssetsLocations(corporationId, itemIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/assets/locations/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling postCorporationsCorporationIdAssetsLocations.');
        }
        // verify required parameter 'itemIds' is not null or undefined
        if (itemIds === null || itemIds === undefined) {
            throw new Error('Required parameter itemIds was null or undefined when calling postCorporationsCorporationIdAssetsLocations.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: itemIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get coporation asset names
     * Return names for a set of item ids, which you can get from corporation assets endpoint. Only valid for items that can customize names, like containers or ships.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/assets/names/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/assets/names/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/assets/names/&#x60;   --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param itemIds A list of item ids
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCorporationsCorporationIdAssetsNames(corporationId, itemIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/assets/names/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling postCorporationsCorporationIdAssetsNames.');
        }
        // verify required parameter 'itemIds' is not null or undefined
        if (itemIds === null || itemIds === undefined) {
            throw new Error('Required parameter itemIds was null or undefined when calling postCorporationsCorporationIdAssetsNames.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: itemIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.AssetsApi = AssetsApi;
var BookmarksApiApiKeys;
(function (BookmarksApiApiKeys) {
})(BookmarksApiApiKeys = exports.BookmarksApiApiKeys || (exports.BookmarksApiApiKeys = {}));
class BookmarksApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[BookmarksApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List bookmarks
     * A list of your character&#39;s personal bookmarks  --- Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/bookmarks/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarks(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/bookmarks/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdBookmarks.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List bookmark folders
     * A list of your character&#39;s personal bookmark folders  --- Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/bookmarks/folders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarksFolders(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/bookmarks/folders/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdBookmarksFolders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List corporation bookmarks
     * A list of your corporation&#39;s bookmarks  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/bookmarks/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/bookmarks/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/bookmarks/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBookmarks(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/bookmarks/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdBookmarks.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List corporation bookmark folders
     * A list of your corporation&#39;s bookmark folders  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/bookmarks/folders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBookmarksFolders(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/bookmarks/folders/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdBookmarksFolders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.BookmarksApi = BookmarksApi;
var CalendarApiApiKeys;
(function (CalendarApiApiKeys) {
})(CalendarApiApiKeys = exports.CalendarApiApiKeys || (exports.CalendarApiApiKeys = {}));
class CalendarApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CalendarApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List calendar event summaries
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event.  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromEvent The event ID to retrieve events from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendar(characterId, datasource, fromEvent, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCalendar.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromEvent !== undefined) {
            queryParameters['from_event'] = fromEvent;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get an event
     * Get all the information for a specific event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventId(characterId, eventId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/{event_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'event_id' + '}', String(eventId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get attendees
     * Get all invited attendees for a given event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/calendar/{event_id}/attendees/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventIdAttendees(characterId, eventId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/{event_id}/attendees/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'event_id' + '}', String(eventId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCalendarEventIdAttendees.');
        }
        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getCharactersCharacterIdCalendarEventIdAttendees.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Respond to an event
     * Set your response status to an event  --- Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;
     * @param characterId An EVE character ID
     * @param eventId The ID of the event requested
     * @param response The response value to set, overriding current value.
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdCalendarEventId(characterId, eventId, response, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/{event_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'event_id' + '}', String(eventId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'response' is not null or undefined
        if (response === null || response === undefined) {
            throw new Error('Required parameter response was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: response,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CalendarApi = CalendarApi;
var CharacterApiApiKeys;
(function (CharacterApiApiKeys) {
})(CharacterApiApiKeys = exports.CharacterApiApiKeys || (exports.CharacterApiApiKeys = {}));
class CharacterApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CharacterApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character&#39;s public information
     * Public information about a character  --- Alternate route: &#x60;/dev/characters/{character_id}/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterId(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get agents research
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints &#x3D; remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: &#x60;/dev/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/agents_research/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAgentsResearch(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/agents_research/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdAgentsResearch.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get blueprints
     * Return a list of blueprints the character owns  --- Alternate route: &#x60;/dev/characters/{character_id}/blueprints/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/blueprints/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBlueprints(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/blueprints/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdBlueprints.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get chat channels
     * Return chat channels that a character is the owner or operator of  --- Alternate route: &#x60;/dev/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/chat_channels/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdChatChannels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/chat_channels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdChatChannels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  --- Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCorporationhistory(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/corporationhistory/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCorporationhistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get jump fatigue
     * Return a character&#39;s jump activation and fatigue information  --- Alternate route: &#x60;/dev/characters/{character_id}/fatigue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fatigue/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fatigue/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFatigue(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fatigue/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFatigue.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get medals
     * Return a list of medals the character has  --- Alternate route: &#x60;/dev/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/medals/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMedals(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/medals/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMedals.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character notifications
     * Return character notifications  --- Alternate route: &#x60;/dev/characters/{character_id}/notifications/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/notifications/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/notifications/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdNotifications(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/notifications/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdNotifications.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get new contact notifications
     * Return notifications about having been added to someone&#39;s contact list  --- Alternate route: &#x60;/dev/characters/{character_id}/notifications/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/notifications/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/notifications/contacts/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdNotificationsContacts(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/notifications/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdNotificationsContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character portraits
     * Get portrait urls for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPortrait(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/portrait/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPortrait.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character corporation roles
     * Returns a character&#39;s corporation roles  --- Alternate route: &#x60;/dev/characters/{character_id}/roles/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/roles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdRoles(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/roles/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdRoles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get standings
     * Return character standings from agents, NPC corporations, and factions  --- Alternate route: &#x60;/dev/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/standings/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStandings(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/standings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdStandings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Yearly aggregate stats
     * Returns aggregate yearly stats for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/stats/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/stats/&#x60;  --- This route is cached for up to 86400 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStats(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/stats/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdStats.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character corporation titles
     * Returns a character&#39;s titles  --- Alternate route: &#x60;/dev/characters/{character_id}/titles/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/titles/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/titles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdTitles(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/titles/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdTitles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character names
     * Resolve a set of character IDs to character names  --- Alternate route: &#x60;/dev/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/v1/characters/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterIds A comma separated list of character IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersNames(characterIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterIds' is not null or undefined
        if (characterIds === null || characterIds === undefined) {
            throw new Error('Required parameter characterIds was null or undefined when calling getCharactersNames.');
        }
        if (characterIds !== undefined) {
            queryParameters['character_ids'] = characterIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Character affiliation
     * Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: &#x60;/dev/characters/affiliation/&#x60;  Alternate route: &#x60;/legacy/characters/affiliation/&#x60;  Alternate route: &#x60;/v1/characters/affiliation/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characters The character IDs to fetch affiliations for. All characters must exist, or none will be returned.
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersAffiliation(characters, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/affiliation/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characters' is not null or undefined
        if (characters === null || characters === undefined) {
            throw new Error('Required parameter characters was null or undefined when calling postCharactersAffiliation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: characters,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  --- Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/cspa/&#x60;
     * @param characterId An EVE character ID
     * @param characters The target characters to calculate the charge for
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdCspa(characterId, characters, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/cspa/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdCspa.');
        }
        // verify required parameter 'characters' is not null or undefined
        if (characters === null || characters === undefined) {
            throw new Error('Required parameter characters was null or undefined when calling postCharactersCharacterIdCspa.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: characters,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CharacterApi = CharacterApi;
var ClonesApiApiKeys;
(function (ClonesApiApiKeys) {
})(ClonesApiApiKeys = exports.ClonesApiApiKeys || (exports.ClonesApiApiKeys = {}));
class ClonesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[ClonesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get clones
     * A list of the character&#39;s clones  --- Alternate route: &#x60;/dev/characters/{character_id}/clones/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/clones/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdClones(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/clones/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdClones.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get active implants
     * Return implants on the active clone of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/implants/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/implants/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/implants/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdImplants(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/implants/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdImplants.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ClonesApi = ClonesApi;
var ContactsApiApiKeys;
(function (ContactsApiApiKeys) {
})(ContactsApiApiKeys = exports.ContactsApiApiKeys || (exports.ContactsApiApiKeys = {}));
class ContactsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[ContactsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete contacts
     * Bulk delete contacts  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdContacts(characterId, contactIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }
        if (contactIds !== undefined) {
            queryParameters['contact_ids'] = contactIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance contacts
     * Return contacts of an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdContacts(allianceId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/contacts/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contacts
     * Return contacts of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContacts(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contact labels
     * Return custom labels for contacts the character defined  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContactsLabels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContactsLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation contacts
     * Return contacts of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContacts(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/contacts/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Add contacts
     * Bulk add contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to add
     * @param standing Standing for the new contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the new contact
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the new contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelId, token, userAgent, watched, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        // verify required parameter 'standing' is not null or undefined
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labelId !== undefined) {
            queryParameters['label_id'] = labelId;
        }
        if (standing !== undefined) {
            queryParameters['standing'] = standing;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        if (watched !== undefined) {
            queryParameters['watched'] = watched;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contactIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Edit contacts
     * Bulk edit contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to edit
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the contact, use 0 for clearing label
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelId, token, userAgent, watched, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        // verify required parameter 'standing' is not null or undefined
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labelId !== undefined) {
            queryParameters['label_id'] = labelId;
        }
        if (standing !== undefined) {
            queryParameters['standing'] = standing;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        if (watched !== undefined) {
            queryParameters['watched'] = watched;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contactIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ContactsApi = ContactsApi;
var ContractsApiApiKeys;
(function (ContractsApiApiKeys) {
})(ContractsApiApiKeys = exports.ContractsApiApiKeys || (exports.ContractsApiApiKeys = {}));
class ContractsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[ContractsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get contracts
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContracts(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contracts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContracts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contract bids
     * Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param contractId ID of a contract
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContractsContractIdBids(characterId, contractId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contracts/{contract_id}/bids/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'contract_id' + '}', String(contractId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContractsContractIdBids.');
        }
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getCharactersCharacterIdContractsContractIdBids.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contract items
     * Lists items of a particular contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param contractId ID of a contract
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContractsContractIdItems(characterId, contractId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contracts/{contract_id}/items/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'contract_id' + '}', String(contractId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContractsContractIdItems.');
        }
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getCharactersCharacterIdContractsContractIdItems.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get coporation contracts
     * Returns contracts available to a coporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContracts(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/contracts/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContracts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation contract bids
     * Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 3600 seconds
     * @param contractId ID of a contract
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContractsContractIdBids(contractId, corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/contracts/{contract_id}/bids/'
            .replace('{' + 'contract_id' + '}', String(contractId))
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getCorporationsCorporationIdContractsContractIdBids.');
        }
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContractsContractIdBids.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation contract items
     * Lists items of a particular contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
     * @param contractId ID of a contract
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContractsContractIdItems(contractId, corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/contracts/{contract_id}/items/'
            .replace('{' + 'contract_id' + '}', String(contractId))
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getCorporationsCorporationIdContractsContractIdItems.');
        }
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContractsContractIdItems.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ContractsApi = ContractsApi;
var CorporationApiApiKeys;
(function (CorporationApiApiKeys) {
})(CorporationApiApiKeys = exports.CorporationApiApiKeys || (exports.CorporationApiApiKeys = {}));
class CorporationApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CorporationApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get corporation information
     * Public information about a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/v4/corporations/{corporation_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationId(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance history
     * Get a list of all the alliances a corporation has been a member of  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/alliancehistory/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAlliancehistory(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/alliancehistory/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdAlliancehistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation blueprints
     * Returns a list of blueprints the corporation owns  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/blueprints/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/blueprints/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/blueprints/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdBlueprints(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/blueprints/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdBlueprints.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get all corporation ALSC logs
     * Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/containers/logs/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/containers/logs/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/containers/logs/&#x60;  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdContainersLogs(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/containers/logs/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContainersLogs.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation divisions
     * Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/divisions/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/divisions/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/divisions/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdDivisions(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/divisions/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdDivisions.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation facilities
     * Return a corporation&#39;s facilities  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/facilities/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/facilities/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/facilities/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdFacilities(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/facilities/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdFacilities.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation icon
     * Get the icon urls for a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIcons(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/icons/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdIcons.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation medals
     * Returns a corporation&#39;s medals  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/medals/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/medals/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/medals/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMedals(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/medals/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMedals.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation issued medals
     * Returns medals issued by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/medals/issued/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/medals/issued/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/medals/issued/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMedalsIssued(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/medals/issued/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMedalsIssued.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation members
     * Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/v3/corporations/{corporation_id}/members/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembers(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/members/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation member limit
     * Return a corporation&#39;s member limit, not including CEO himself  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/limit/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/limit/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/members/limit/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembersLimit(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/members/limit/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMembersLimit.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation&#39;s members&#39; titles
     * Returns a corporation&#39;s members&#39; titles  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/members/titles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/titles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/members/titles/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembersTitles(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/members/titles/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMembersTitles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Track corporation members
     * Returns additional information about a corporation&#39;s members which helps tracking their activities  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/membertracking/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembertracking(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/membertracking/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMembertracking.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation outposts
     * Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/outposts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/outposts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/outposts/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOutposts(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/outposts/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdOutposts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation outpost details
     * Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/outposts/{outpost_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param outpostId A station (outpost) ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOutpostsOutpostId(corporationId, outpostId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/outposts/{outpost_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'outpost_id' + '}', String(outpostId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdOutpostsOutpostId.');
        }
        // verify required parameter 'outpostId' is not null or undefined
        if (outpostId === null || outpostId === undefined) {
            throw new Error('Required parameter outpostId was null or undefined when calling getCorporationsCorporationIdOutpostsOutpostId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation member roles
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRoles(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/roles/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdRoles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation member roles history
     * Return how roles have changed for a coporation&#39;s members, up to a month  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/history/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/history/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/history/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRolesHistory(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/roles/history/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdRolesHistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation members
     * Return the current member list of a corporation, the token&#39;s character need to be a member of the corporation.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/shareholders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/shareholders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/shareholders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdShareholders(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/shareholders/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdShareholders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation standings
     * Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/standings/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/standings/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/standings/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStandings(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/standings/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdStandings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation starbases (POSes)
     * Returns list of corporation starbases (POSes)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/starbases/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/starbases/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/starbases/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStarbases(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/starbases/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdStarbases.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get starbase (POS) detail
     * Returns various settings and fuels of a starbase (POS)  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/starbases/{starbase_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param starbaseId An EVE starbase (POS) ID
     * @param systemId The solar system this starbase (POS) is located in,
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStarbasesStarbaseId(corporationId, starbaseId, systemId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/starbases/{starbase_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'starbase_id' + '}', String(starbaseId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }
        // verify required parameter 'starbaseId' is not null or undefined
        if (starbaseId === null || starbaseId === undefined) {
            throw new Error('Required parameter starbaseId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }
        // verify required parameter 'systemId' is not null or undefined
        if (systemId === null || systemId === undefined) {
            throw new Error('Required parameter systemId was null or undefined when calling getCorporationsCorporationIdStarbasesStarbaseId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (systemId !== undefined) {
            queryParameters['system_id'] = systemId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation structures
     * Get a list of corporation structures  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): StationManager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStructures(corporationId, datasource, language, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/structures/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdStructures.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation titles
     * Returns a corporation&#39;s titles  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/titles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/titles/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/titles/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdTitles(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/titles/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdTitles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation names
     * Resolve a set of corporation IDs to corporation names  --- Alternate route: &#x60;/dev/corporations/names/&#x60;  Alternate route: &#x60;/v2/corporations/names/&#x60;  --- This route is cached for up to 3600 seconds
     * @param corporationIds A comma separated list of corporation IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNames(corporationIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationIds' is not null or undefined
        if (corporationIds === null || corporationIds === undefined) {
            throw new Error('Required parameter corporationIds was null or undefined when calling getCorporationsNames.');
        }
        if (corporationIds !== undefined) {
            queryParameters['corporation_ids'] = corporationIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get npc corporations
     * Get a list of npc corporations  --- Alternate route: &#x60;/dev/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNpccorps(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/npccorps/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update structure vulnerability schedule
     * Update the vulnerability window schedule of a corporation structure  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;
     * @param corporationId An EVE corporation ID
     * @param newSchedule New vulnerability window schedule for the structure
     * @param structureId A structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCorporationsCorporationIdStructuresStructureId(corporationId, newSchedule, structureId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/structures/{structure_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        // verify required parameter 'newSchedule' is not null or undefined
        if (newSchedule === null || newSchedule === undefined) {
            throw new Error('Required parameter newSchedule was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newSchedule,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CorporationApi = CorporationApi;
var DogmaApiApiKeys;
(function (DogmaApiApiKeys) {
})(DogmaApiApiKeys = exports.DogmaApiApiKeys || (exports.DogmaApiApiKeys = {}));
class DogmaApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[DogmaApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get attributes
     * Get a list of dogma attribute ids  --- Alternate route: &#x60;/dev/dogma/attributes/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/&#x60;  Alternate route: &#x60;/v1/dogma/attributes/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributes(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/attributes/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get attribute information
     * Get information on a dogma attribute  --- Alternate route: &#x60;/dev/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/v1/dogma/attributes/{attribute_id}/&#x60;  --- This route expires daily at 11:05
     * @param attributeId A dogma attribute ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributesAttributeId(attributeId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/attributes/{attribute_id}/'
            .replace('{' + 'attribute_id' + '}', String(attributeId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'attributeId' is not null or undefined
        if (attributeId === null || attributeId === undefined) {
            throw new Error('Required parameter attributeId was null or undefined when calling getDogmaAttributesAttributeId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get effects
     * Get a list of dogma effect ids  --- Alternate route: &#x60;/dev/dogma/effects/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/&#x60;  Alternate route: &#x60;/v1/dogma/effects/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffects(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/effects/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get effect information
     * Get information on a dogma effect  --- Alternate route: &#x60;/dev/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/v2/dogma/effects/{effect_id}/&#x60;  --- This route expires daily at 11:05
     * @param effectId A dogma effect ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffectsEffectId(effectId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/effects/{effect_id}/'
            .replace('{' + 'effect_id' + '}', String(effectId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'effectId' is not null or undefined
        if (effectId === null || effectId === undefined) {
            throw new Error('Required parameter effectId was null or undefined when calling getDogmaEffectsEffectId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DogmaApi = DogmaApi;
var FactionWarfareApiApiKeys;
(function (FactionWarfareApiApiKeys) {
})(FactionWarfareApiApiKeys = exports.FactionWarfareApiApiKeys || (exports.FactionWarfareApiApiKeys = {}));
class FactionWarfareApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[FactionWarfareApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Overview of a character involved in faction warfare
     * Statistical overview of a character involved in faction warfare  --- Alternate route: &#x60;/dev/characters/{character_id}/fw/stats/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fw/stats/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFwStats(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fw/stats/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFwStats.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Overview of a corporation involved in faction warfare
     * Statistics about a corporation involved in faction warfare  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/fw/stats/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/fw/stats/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdFwStats(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/fw/stats/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdFwStats.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List of the top factions in faction warfare
     * Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboards(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/leaderboards/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List of the top pilots in faction warfare
     * Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/characters/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/characters/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/characters/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboardsCharacters(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/leaderboards/characters/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List of the top corporations in faction warfare
     * Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday.  --- Alternate route: &#x60;/dev/fw/leaderboards/corporations/&#x60;  Alternate route: &#x60;/legacy/fw/leaderboards/corporations/&#x60;  Alternate route: &#x60;/v1/fw/leaderboards/corporations/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwLeaderboardsCorporations(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/leaderboards/corporations/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * An overview of statistics about factions involved in faction warfare
     * Statistical overviews of factions involved in faction warfare  --- Alternate route: &#x60;/dev/fw/stats/&#x60;  Alternate route: &#x60;/legacy/fw/stats/&#x60;  Alternate route: &#x60;/v1/fw/stats/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwStats(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/stats/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Ownership of faction warfare systems
     * An overview of the current ownership of faction warfare solar systems  --- Alternate route: &#x60;/dev/fw/systems/&#x60;  Alternate route: &#x60;/legacy/fw/systems/&#x60;  Alternate route: &#x60;/v1/fw/systems/&#x60;  --- This route is cached for up to 1800 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwSystems(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/systems/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Data about which NPC factions are at war
     * Data about which NPC factions are at war  --- Alternate route: &#x60;/dev/fw/wars/&#x60;  Alternate route: &#x60;/legacy/fw/wars/&#x60;  Alternate route: &#x60;/v1/fw/wars/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFwWars(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fw/wars/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.FactionWarfareApi = FactionWarfareApi;
var FittingsApiApiKeys;
(function (FittingsApiApiKeys) {
})(FittingsApiApiKeys = exports.FittingsApiApiKeys || (exports.FittingsApiApiKeys = {}));
class FittingsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[FittingsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete fitting
     * Delete a fitting from a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/{fitting_id}/&#x60;
     * @param characterId An EVE character ID
     * @param fittingId ID for a fitting of this character
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdFittingsFittingId(characterId, fittingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/{fitting_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'fitting_id' + '}', String(fittingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }
        // verify required parameter 'fittingId' is not null or undefined
        if (fittingId === null || fittingId === undefined) {
            throw new Error('Required parameter fittingId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fittings
     * Return fittings of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFittings(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFittings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fitting
     * Save a new fitting for a character  --- Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fitting Details about the new fitting
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdFittings(characterId, datasource, fitting, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdFittings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: fitting,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.FittingsApi = FittingsApi;
var FleetsApiApiKeys;
(function (FleetsApiApiKeys) {
})(FleetsApiApiKeys = exports.FleetsApiApiKeys || (exports.FleetsApiApiKeys = {}));
class FleetsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[FleetsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Kick fleet member
     * Kick a fleet member  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdMembersMemberId(fleetId, memberId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/{member_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'member_id' + '}', String(memberId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'memberId' is not null or undefined
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param squadId The squad to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdSquadsSquadId(fleetId, squadId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/squads/{squad_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'squad_id' + '}', String(squadId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'squadId' is not null or undefined
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdWingsWingId(fleetId, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character fleet info
     * Return the fleet ID the character is in, if any.  --- Alternate route: &#x60;/dev/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fleet/&#x60;  --- This route is cached for up to 60 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFleet(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fleet/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFleet.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet information
     * Return details about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetId(fleetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet members
     * Return information about fleet members  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdMembers(fleetId, datasource, language, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet wings
     * Return information about wings in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdWings(fleetId, datasource, language, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdWings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet invitation
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;
     * @param fleetId ID for a fleet
     * @param invitation Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdMembers(fleetId, invitation, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdMembers.');
        }
        // verify required parameter 'invitation' is not null or undefined
        if (invitation === null || invitation === undefined) {
            throw new Error('Required parameter invitation was null or undefined when calling postFleetsFleetIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: invitation,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet wing
     * Create a new wing in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWings(fleetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet squad
     * Create a new squad in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing_id to create squad in
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWingsWingIdSquads(fleetId, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/squads/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update fleet
     * Update settings about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param newSettings What to update for this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetId(fleetId, newSettings, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetId.');
        }
        // verify required parameter 'newSettings' is not null or undefined
        if (newSettings === null || newSettings === undefined) {
            throw new Error('Required parameter newSettings was null or undefined when calling putFleetsFleetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newSettings,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Move fleet member
     * Move a fleet member around  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param movement Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdMembersMemberId(fleetId, memberId, movement, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/{member_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'member_id' + '}', String(memberId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'memberId' is not null or undefined
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'movement' is not null or undefined
        if (movement === null || movement === undefined) {
            throw new Error('Required parameter movement was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: movement,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Rename fleet squad
     * Rename a fleet squad  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the squad
     * @param squadId The squad to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdSquadsSquadId(fleetId, naming, squadId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/squads/{squad_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'squad_id' + '}', String(squadId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'naming' is not null or undefined
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'squadId' is not null or undefined
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: naming,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Rename fleet wing
     * Rename a fleet wing  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the wing
     * @param wingId The wing to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdWingsWingId(fleetId, naming, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'naming' is not null or undefined
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: naming,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.FleetsApi = FleetsApi;
var IncursionsApiApiKeys;
(function (IncursionsApiApiKeys) {
})(IncursionsApiApiKeys = exports.IncursionsApiApiKeys || (exports.IncursionsApiApiKeys = {}));
class IncursionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[IncursionsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List incursions
     * Return a list of current incursions  --- Alternate route: &#x60;/dev/incursions/&#x60;  Alternate route: &#x60;/legacy/incursions/&#x60;  Alternate route: &#x60;/v1/incursions/&#x60;  --- This route is cached for up to 300 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIncursions(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/incursions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.IncursionsApi = IncursionsApi;
var IndustryApiApiKeys;
(function (IndustryApiApiKeys) {
})(IndustryApiApiKeys = exports.IndustryApiApiKeys || (exports.IndustryApiApiKeys = {}));
class IndustryApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[IndustryApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List character industry jobs
     * List industry jobs placed by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/industry/jobs/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/industry/jobs/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/industry/jobs/&#x60;  --- This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param includeCompleted Whether retrieve completed character industry jobs as well
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdIndustryJobs(characterId, datasource, includeCompleted, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/industry/jobs/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdIndustryJobs.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (includeCompleted !== undefined) {
            queryParameters['include_completed'] = includeCompleted;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Character mining ledger
     * Paginated record of all mining done by a character for the past 30 days   --- Alternate route: &#x60;/dev/characters/{character_id}/mining/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mining/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mining/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMining(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mining/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMining.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Moon extraction timers
     * Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/extractions/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/extractions/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/extractions/&#x60;  --- This route is cached for up to 1800 seconds  --- Requires one of the following EVE corporation role(s): Structure_manager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningExtractions(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporation/{corporation_id}/mining/extractions/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationCorporationIdMiningExtractions.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Corporation mining observers
     * Paginated list of all entities capable of observing and recording mining for a corporation   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/observers/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/observers/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/observers/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningObservers(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporation/{corporation_id}/mining/observers/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationCorporationIdMiningObservers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Observed corporation mining
     * Paginated record of all mining seen by an observer   --- Alternate route: &#x60;/dev/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  Alternate route: &#x60;/legacy/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  Alternate route: &#x60;/v1/corporation/{corporation_id}/mining/observers/{observer_id}/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant
     * @param corporationId An EVE corporation ID
     * @param observerId A mining observer id
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationCorporationIdMiningObserversObserverId(corporationId, observerId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporation/{corporation_id}/mining/observers/{observer_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'observer_id' + '}', String(observerId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationCorporationIdMiningObserversObserverId.');
        }
        // verify required parameter 'observerId' is not null or undefined
        if (observerId === null || observerId === undefined) {
            throw new Error('Required parameter observerId was null or undefined when calling getCorporationCorporationIdMiningObserversObserverId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List corporation industry jobs
     * List industry jobs run by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/industry/jobs/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/industry/jobs/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/industry/jobs/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): FactoryManager
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param includeCompleted Whether retrieve completed industry jobs as well
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIndustryJobs(corporationId, datasource, includeCompleted, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/industry/jobs/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdIndustryJobs.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (includeCompleted !== undefined) {
            queryParameters['include_completed'] = includeCompleted;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List industry facilities
     * Return a list of industry facilities  --- Alternate route: &#x60;/dev/industry/facilities/&#x60;  Alternate route: &#x60;/legacy/industry/facilities/&#x60;  Alternate route: &#x60;/v1/industry/facilities/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustryFacilities(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/industry/facilities/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List solar system cost indices
     * Return cost indices for solar systems  --- Alternate route: &#x60;/dev/industry/systems/&#x60;  Alternate route: &#x60;/legacy/industry/systems/&#x60;  Alternate route: &#x60;/v1/industry/systems/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustrySystems(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/industry/systems/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.IndustryApi = IndustryApi;
var InsuranceApiApiKeys;
(function (InsuranceApiApiKeys) {
})(InsuranceApiApiKeys = exports.InsuranceApiApiKeys || (exports.InsuranceApiApiKeys = {}));
class InsuranceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[InsuranceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List insurance levels
     * Return available insurance levels for all ship types  --- Alternate route: &#x60;/dev/insurance/prices/&#x60;  Alternate route: &#x60;/legacy/insurance/prices/&#x60;  Alternate route: &#x60;/v1/insurance/prices/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getInsurancePrices(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/insurance/prices/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InsuranceApi = InsuranceApi;
var KillmailsApiApiKeys;
(function (KillmailsApiApiKeys) {
})(KillmailsApiApiKeys = exports.KillmailsApiApiKeys || (exports.KillmailsApiApiKeys = {}));
class KillmailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[KillmailsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character kills and losses
     * Return a list of character&#39;s recent kills and losses  --- Alternate route: &#x60;/dev/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/killmails/recent/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param maxCount How many killmails to return at maximum
     * @param maxKillId Only return killmails with ID smaller than this.
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdKillmailsRecent(characterId, datasource, maxCount, maxKillId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/killmails/recent/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdKillmailsRecent.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (maxCount !== undefined) {
            queryParameters['max_count'] = maxCount;
        }
        if (maxKillId !== undefined) {
            queryParameters['max_kill_id'] = maxKillId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation kills and losses
     * Get a list of corporation&#39;s recent kills and losses  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/killmails/recent/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/killmails/recent/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param maxKillId Only return killmails with ID smaller than this
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdKillmailsRecent(corporationId, datasource, maxKillId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/killmails/recent/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdKillmailsRecent.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (maxKillId !== undefined) {
            queryParameters['max_kill_id'] = maxKillId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a single killmail
     * Return a single killmail from its ID and hash  --- Alternate route: &#x60;/dev/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/legacy/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/v1/killmails/{killmail_id}/{killmail_hash}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param killmailHash The killmail hash for verification
     * @param killmailId The killmail ID to be queried
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getKillmailsKillmailIdKillmailHash(killmailHash, killmailId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/killmails/{killmail_id}/{killmail_hash}/'
            .replace('{' + 'killmail_hash' + '}', String(killmailHash))
            .replace('{' + 'killmail_id' + '}', String(killmailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'killmailHash' is not null or undefined
        if (killmailHash === null || killmailHash === undefined) {
            throw new Error('Required parameter killmailHash was null or undefined when calling getKillmailsKillmailIdKillmailHash.');
        }
        // verify required parameter 'killmailId' is not null or undefined
        if (killmailId === null || killmailId === undefined) {
            throw new Error('Required parameter killmailId was null or undefined when calling getKillmailsKillmailIdKillmailHash.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.KillmailsApi = KillmailsApi;
var LocationApiApiKeys;
(function (LocationApiApiKeys) {
})(LocationApiApiKeys = exports.LocationApiApiKeys || (exports.LocationApiApiKeys = {}));
class LocationApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[LocationApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character location
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.  --- Alternate route: &#x60;/dev/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/location/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLocation(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/location/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdLocation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character online
     * Checks if the character is currently online  --- Alternate route: &#x60;/dev/characters/{character_id}/online/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/online/&#x60;  --- This route is cached for up to 60 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOnline(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/online/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdOnline.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get current ship
     * Get the current ship type, name and id  --- Alternate route: &#x60;/dev/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/ship/&#x60;  --- This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdShip(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/ship/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdShip.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.LocationApi = LocationApi;
var LoyaltyApiApiKeys;
(function (LoyaltyApiApiKeys) {
})(LoyaltyApiApiKeys = exports.LoyaltyApiApiKeys || (exports.LoyaltyApiApiKeys = {}));
class LoyaltyApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[LoyaltyApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get loyalty points
     * Return a list of loyalty points for all corporations the character has worked for  --- Alternate route: &#x60;/dev/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/loyalty/points/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLoyaltyPoints(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/loyalty/points/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdLoyaltyPoints.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List loyalty store offers
     * Return a list of offers from a specific corporation&#39;s loyalty store  --- Alternate route: &#x60;/dev/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/legacy/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/v1/loyalty/stores/{corporation_id}/offers/&#x60;  --- This route expires daily at 11:05
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getLoyaltyStoresCorporationIdOffers(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/loyalty/stores/{corporation_id}/offers/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getLoyaltyStoresCorporationIdOffers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.LoyaltyApi = LoyaltyApi;
var MailApiApiKeys;
(function (MailApiApiKeys) {
})(MailApiApiKeys = exports.MailApiApiKeys || (exports.MailApiApiKeys = {}));
class MailApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[MailApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete a mail label
     * Delete a mail label  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60;
     * @param characterId An EVE character ID
     * @param labelId An EVE label id
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/{label_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'label_id' + '}', String(labelId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdMailLabelsLabelId.');
        }
        // verify required parameter 'labelId' is not null or undefined
        if (labelId === null || labelId === undefined) {
            throw new Error('Required parameter labelId was null or undefined when calling deleteCharactersCharacterIdMailLabelsLabelId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a mail
     * Delete a mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailMailId(characterId, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling deleteCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return mail headers
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param labels Fetch only mails that match one or more of the given labels
     * @param lastMailId List only mail with an ID lower than the given ID, if present
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMail(characterId, datasource, labels, lastMailId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labels !== undefined) {
            queryParameters['labels'] = labels;
        }
        if (lastMailId !== undefined) {
            queryParameters['last_mail_id'] = lastMailId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get mail labels and unread counts
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/mail/labels/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLabels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return mailing list subscriptions
     * Return all mailing lists that the character is subscribed to  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/lists/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLists(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/lists/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailLists.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return a mail
     * Return the contents of an EVE mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  --- This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailMailId(characterId, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling getCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Send a new mail
     * Create and send a new mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;
     * @param characterId An EVE character ID
     * @param mail The mail to send
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMail(characterId, mail, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdMail.');
        }
        // verify required parameter 'mail' is not null or undefined
        if (mail === null || mail === undefined) {
            throw new Error('Required parameter mail was null or undefined when calling postCharactersCharacterIdMail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: mail,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a mail label
     * Create a mail label  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param label Label to create
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMailLabels(characterId, datasource, label, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdMailLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: label,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update metadata about a mail
     * Update metadata about a mail  --- Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param contents Data used to update the mail
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdMailMailId(characterId, contents, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'contents' is not null or undefined
        if (contents === null || contents === undefined) {
            throw new Error('Required parameter contents was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contents,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MailApi = MailApi;
var MarketApiApiKeys;
(function (MarketApiApiKeys) {
})(MarketApiApiKeys = exports.MarketApiApiKeys || (exports.MarketApiApiKeys = {}));
class MarketApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[MarketApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List orders from a character
     * List market orders placed by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/orders/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOrders(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/orders/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdOrders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List orders from a corporation
     * List market orders placed on behalf of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/orders/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/orders/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/orders/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Trader
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdOrders(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/orders/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdOrders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item groups
     * Get a list of item groups  --- Alternate route: &#x60;/dev/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/v1/markets/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroups(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item group information
     * Get information on an item group  --- Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  --- This route expires daily at 11:05
     * @param marketGroupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroupsMarketGroupId(marketGroupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/groups/{market_group_id}/'
            .replace('{' + 'market_group_id' + '}', String(marketGroupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'marketGroupId' is not null or undefined
        if (marketGroupId === null || marketGroupId === undefined) {
            throw new Error('Required parameter marketGroupId was null or undefined when calling getMarketsGroupsMarketGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List market prices
     * Return a list of prices  --- Alternate route: &#x60;/dev/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/v1/markets/prices/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsPrices(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/prices/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List historical market statistics in a region
     * Return a list of historical market statistics for the specified type in a region  --- Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  --- This route is cached for up to 3600 seconds
     * @param regionId Return statistics in this region
     * @param typeId Return statistics for this type
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdHistory(regionId, typeId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/{region_id}/history/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getMarketsRegionIdHistory.');
        }
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling getMarketsRegionIdHistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List orders in a region
     * Return a list of orders in a region  --- Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  --- This route is cached for up to 300 seconds
     * @param orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.
     * @param regionId Return orders in this region
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param typeId Return orders only for this type
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdOrders(orderType, regionId, datasource, page, typeId, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/{region_id}/orders/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'orderType' is not null or undefined
        if (orderType === null || orderType === undefined) {
            throw new Error('Required parameter orderType was null or undefined when calling getMarketsRegionIdOrders.');
        }
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getMarketsRegionIdOrders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (orderType !== undefined) {
            queryParameters['order_type'] = orderType;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List type IDs relevant to a market
     * Return a list of type IDs that have active orders in the region, for efficient market indexing.  --- Alternate route: &#x60;/dev/markets/{region_id}/types/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/types/&#x60;  Alternate route: &#x60;/v1/markets/{region_id}/types/&#x60;  --- This route is cached for up to 600 seconds
     * @param regionId Return statistics in this region
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdTypes(regionId, datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/{region_id}/types/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getMarketsRegionIdTypes.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List orders in a structure
     * Return all orders in a structure  --- Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  --- This route is cached for up to 300 seconds
     * @param structureId Return orders in this structure
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsStructuresStructureId(structureId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/structures/{structure_id}/'
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling getMarketsStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MarketApi = MarketApi;
var OpportunitiesApiApiKeys;
(function (OpportunitiesApiApiKeys) {
})(OpportunitiesApiApiKeys = exports.OpportunitiesApiApiKeys || (exports.OpportunitiesApiApiKeys = {}));
class OpportunitiesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[OpportunitiesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get a character&#39;s completed tasks
     * Return a list of tasks finished by a character  --- Alternate route: &#x60;/dev/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/opportunities/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOpportunities(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/opportunities/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdOpportunities.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities groups
     * Return a list of opportunities groups  --- Alternate route: &#x60;/dev/opportunities/groups/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/&#x60;  Alternate route: &#x60;/v1/opportunities/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroups(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities group
     * Return information of an opportunities group  --- Alternate route: &#x60;/dev/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/v1/opportunities/groups/{group_id}/&#x60;  --- This route expires daily at 11:05
     * @param groupId ID of an opportunities group
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroupsGroupId(groupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/groups/{group_id}/'
            .replace('{' + 'group_id' + '}', String(groupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getOpportunitiesGroupsGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities tasks
     * Return a list of opportunities tasks  --- Alternate route: &#x60;/dev/opportunities/tasks/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/&#x60;  Alternate route: &#x60;/v1/opportunities/tasks/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasks(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/tasks/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities task
     * Return information of an opportunities task  --- Alternate route: &#x60;/dev/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/v1/opportunities/tasks/{task_id}/&#x60;  --- This route expires daily at 11:05
     * @param taskId ID of an opportunities task
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasksTaskId(taskId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/tasks/{task_id}/'
            .replace('{' + 'task_id' + '}', String(taskId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getOpportunitiesTasksTaskId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.OpportunitiesApi = OpportunitiesApi;
var PlanetaryInteractionApiApiKeys;
(function (PlanetaryInteractionApiApiKeys) {
})(PlanetaryInteractionApiApiKeys = exports.PlanetaryInteractionApiApiKeys || (exports.PlanetaryInteractionApiApiKeys = {}));
class PlanetaryInteractionApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[PlanetaryInteractionApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get colonies
     * Returns a list of all planetary colonies owned by a character.  --- Alternate route: &#x60;/dev/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/planets/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanets(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/planets/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPlanets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get colony layout
     * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.  --- Alternate route: &#x60;/dev/characters/{character_id}/planets/{planet_id}/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/planets/{planet_id}/&#x60;  --- This route is cached for up to 600 seconds
     * @param characterId An EVE character ID
     * @param planetId Planet id of the target planet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanetsPlanetId(characterId, planetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/planets/{planet_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'planet_id' + '}', String(planetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPlanetsPlanetId.');
        }
        // verify required parameter 'planetId' is not null or undefined
        if (planetId === null || planetId === undefined) {
            throw new Error('Required parameter planetId was null or undefined when calling getCharactersCharacterIdPlanetsPlanetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List corporation customs offices
     * List customs offices owned by a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/customs_offices/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/customs_offices/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/customs_offices/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdCustomsOffices(corporationId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/customs_offices/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdCustomsOffices.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get schematic information
     * Get information on a planetary factory schematic  --- Alternate route: &#x60;/dev/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/v1/universe/schematics/{schematic_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param schematicId A PI schematic ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSchematicsSchematicId(schematicId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/schematics/{schematic_id}/'
            .replace('{' + 'schematic_id' + '}', String(schematicId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'schematicId' is not null or undefined
        if (schematicId === null || schematicId === undefined) {
            throw new Error('Required parameter schematicId was null or undefined when calling getUniverseSchematicsSchematicId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PlanetaryInteractionApi = PlanetaryInteractionApi;
var RoutesApiApiKeys;
(function (RoutesApiApiKeys) {
})(RoutesApiApiKeys = exports.RoutesApiApiKeys || (exports.RoutesApiApiKeys = {}));
class RoutesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[RoutesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get route
     * Get the systems between origin and destination  --- Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;  --- This route is cached for up to 86400 seconds
     * @param destination destination solar system ID
     * @param origin origin solar system ID
     * @param avoid avoid solar system ID(s)
     * @param connections connected solar system pairs
     * @param datasource The server name you would like data from
     * @param flag route security preference
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getRouteOriginDestination(destination, origin, avoid, connections, datasource, flag, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/route/{origin}/{destination}/'
            .replace('{' + 'destination' + '}', String(destination))
            .replace('{' + 'origin' + '}', String(origin));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'destination' is not null or undefined
        if (destination === null || destination === undefined) {
            throw new Error('Required parameter destination was null or undefined when calling getRouteOriginDestination.');
        }
        // verify required parameter 'origin' is not null or undefined
        if (origin === null || origin === undefined) {
            throw new Error('Required parameter origin was null or undefined when calling getRouteOriginDestination.');
        }
        if (avoid !== undefined) {
            queryParameters['avoid'] = avoid;
        }
        if (connections !== undefined) {
            queryParameters['connections'] = connections;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (flag !== undefined) {
            queryParameters['flag'] = flag;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.RoutesApi = RoutesApi;
var SearchApiApiKeys;
(function (SearchApiApiKeys) {
})(SearchApiApiKeys = exports.SearchApiApiKeys || (exports.SearchApiApiKeys = {}));
class SearchApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SearchApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/characters/{character_id}/search/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param characterId An EVE character ID
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param strict Whether the search should be a strict match
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSearch(categories, characterId, search, datasource, language, strict, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/search/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categories' is not null or undefined
        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        if (categories !== undefined) {
            queryParameters['categories'] = categories;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (search !== undefined) {
            queryParameters['search'] = search;
        }
        if (strict !== undefined) {
            queryParameters['strict'] = strict;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/search/&#x60;  Alternate route: &#x60;/v2/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param strict Whether the search should be a strict match
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSearch(categories, search, datasource, language, strict, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/search/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categories' is not null or undefined
        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getSearch.');
        }
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getSearch.');
        }
        if (categories !== undefined) {
            queryParameters['categories'] = categories;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (search !== undefined) {
            queryParameters['search'] = search;
        }
        if (strict !== undefined) {
            queryParameters['strict'] = strict;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SearchApi = SearchApi;
var SkillsApiApiKeys;
(function (SkillsApiApiKeys) {
})(SkillsApiApiKeys = exports.SkillsApiApiKeys || (exports.SkillsApiApiKeys = {}));
class SkillsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SkillsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character attributes
     * Return attributes of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/attributes/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/attributes/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/attributes/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAttributes(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/attributes/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdAttributes.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character&#39;s skill queue
     * List the configured skill queue for the given character  --- Alternate route: &#x60;/dev/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/skillqueue/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkillqueue(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/skillqueue/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSkillqueue.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character skills
     * List all trained skills for the given character  --- Alternate route: &#x60;/dev/characters/{character_id}/skills/&#x60;  Alternate route: &#x60;/v4/characters/{character_id}/skills/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkills(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/skills/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSkills.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SkillsApi = SkillsApi;
var SovereigntyApiApiKeys;
(function (SovereigntyApiApiKeys) {
})(SovereigntyApiApiKeys = exports.SovereigntyApiApiKeys || (exports.SovereigntyApiApiKeys = {}));
class SovereigntyApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SovereigntyApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List sovereignty campaigns
     * Shows sovereignty data for campaigns.  --- Alternate route: &#x60;/dev/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/legacy/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/v1/sovereignty/campaigns/&#x60;  --- This route is cached for up to 5 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyCampaigns(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/campaigns/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List sovereignty of systems
     * Shows sovereignty information for solar systems  --- Alternate route: &#x60;/dev/sovereignty/map/&#x60;  Alternate route: &#x60;/legacy/sovereignty/map/&#x60;  Alternate route: &#x60;/v1/sovereignty/map/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyMap(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/map/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List sovereignty structures
     * Shows sovereignty data for structures.  --- Alternate route: &#x60;/dev/sovereignty/structures/&#x60;  Alternate route: &#x60;/legacy/sovereignty/structures/&#x60;  Alternate route: &#x60;/v1/sovereignty/structures/&#x60;  --- This route is cached for up to 120 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyStructures(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/structures/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SovereigntyApi = SovereigntyApi;
var StatusApiApiKeys;
(function (StatusApiApiKeys) {
})(StatusApiApiKeys = exports.StatusApiApiKeys || (exports.StatusApiApiKeys = {}));
class StatusApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[StatusApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Retrieve the uptime and player counts
     * EVE Server status  --- Alternate route: &#x60;/dev/status/&#x60;  Alternate route: &#x60;/legacy/status/&#x60;  Alternate route: &#x60;/v1/status/&#x60;  --- This route is cached for up to 30 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getStatus(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/status/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.StatusApi = StatusApi;
var UniverseApiApiKeys;
(function (UniverseApiApiKeys) {
})(UniverseApiApiKeys = exports.UniverseApiApiKeys || (exports.UniverseApiApiKeys = {}));
class UniverseApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[UniverseApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get bloodlines
     * Get a list of bloodlines  --- Alternate route: &#x60;/dev/universe/bloodlines/&#x60;  Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseBloodlines(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/bloodlines/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item categories
     * Get a list of item categories  --- Alternate route: &#x60;/dev/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/v1/universe/categories/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategories(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/categories/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item category information
     * Get information of an item category  --- Alternate route: &#x60;/dev/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  --- This route expires daily at 11:05
     * @param categoryId An Eve item category ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategoriesCategoryId(categoryId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/categories/{category_id}/'
            .replace('{' + 'category_id' + '}', String(categoryId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling getUniverseCategoriesCategoryId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get constellations
     * Get a list of constellations  --- Alternate route: &#x60;/dev/universe/constellations/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/v1/universe/constellations/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellations(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/constellations/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get constellation information
     * Get information on a constellation  --- Alternate route: &#x60;/dev/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  --- This route expires daily at 11:05
     * @param constellationId constellation_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellationsConstellationId(constellationId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/constellations/{constellation_id}/'
            .replace('{' + 'constellation_id' + '}', String(constellationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'constellationId' is not null or undefined
        if (constellationId === null || constellationId === undefined) {
            throw new Error('Required parameter constellationId was null or undefined when calling getUniverseConstellationsConstellationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get factions
     * Get a list of factions  --- Alternate route: &#x60;/dev/universe/factions/&#x60;  Alternate route: &#x60;/v2/universe/factions/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseFactions(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/factions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get graphics
     * Get a list of graphics  --- Alternate route: &#x60;/dev/universe/graphics/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/v1/universe/graphics/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphics(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/graphics/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get graphic information
     * Get information on a graphic  --- Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  --- This route expires daily at 11:05
     * @param graphicId graphic_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphicsGraphicId(graphicId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/graphics/{graphic_id}/'
            .replace('{' + 'graphic_id' + '}', String(graphicId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'graphicId' is not null or undefined
        if (graphicId === null || graphicId === undefined) {
            throw new Error('Required parameter graphicId was null or undefined when calling getUniverseGraphicsGraphicId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item groups
     * Get a list of item groups  --- Alternate route: &#x60;/dev/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/v1/universe/groups/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroups(datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item group information
     * Get information on an item group  --- Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  --- This route expires daily at 11:05
     * @param groupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroupsGroupId(groupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/groups/{group_id}/'
            .replace('{' + 'group_id' + '}', String(groupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getUniverseGroupsGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get moon information
     * Get information on a moon  --- Alternate route: &#x60;/dev/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  --- This route expires daily at 11:05
     * @param moonId moon_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseMoonsMoonId(moonId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/moons/{moon_id}/'
            .replace('{' + 'moon_id' + '}', String(moonId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'moonId' is not null or undefined
        if (moonId === null || moonId === undefined) {
            throw new Error('Required parameter moonId was null or undefined when calling getUniverseMoonsMoonId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get planet information
     * Get information on a planet  --- Alternate route: &#x60;/dev/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  --- This route expires daily at 11:05
     * @param planetId planet_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniversePlanetsPlanetId(planetId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/planets/{planet_id}/'
            .replace('{' + 'planet_id' + '}', String(planetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'planetId' is not null or undefined
        if (planetId === null || planetId === undefined) {
            throw new Error('Required parameter planetId was null or undefined when calling getUniversePlanetsPlanetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character races
     * Get a list of character races  --- Alternate route: &#x60;/dev/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/v1/universe/races/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRaces(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/races/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get regions
     * Get a list of regions  --- Alternate route: &#x60;/dev/universe/regions/&#x60;  Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/v1/universe/regions/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegions(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/regions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get region information
     * Get information on a region  --- Alternate route: &#x60;/dev/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  --- This route expires daily at 11:05
     * @param regionId region_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegionsRegionId(regionId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/regions/{region_id}/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getUniverseRegionsRegionId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get stargate information
     * Get information on a stargate  --- Alternate route: &#x60;/dev/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  --- This route expires daily at 11:05
     * @param stargateId stargate_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStargatesStargateId(stargateId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/stargates/{stargate_id}/'
            .replace('{' + 'stargate_id' + '}', String(stargateId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'stargateId' is not null or undefined
        if (stargateId === null || stargateId === undefined) {
            throw new Error('Required parameter stargateId was null or undefined when calling getUniverseStargatesStargateId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get star information
     * Get information on a star  --- Alternate route: &#x60;/dev/universe/stars/{star_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stars/{star_id}/&#x60;  Alternate route: &#x60;/v1/universe/stars/{star_id}/&#x60;  --- This route expires daily at 11:05
     * @param starId star_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStarsStarId(starId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/stars/{star_id}/'
            .replace('{' + 'star_id' + '}', String(starId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'starId' is not null or undefined
        if (starId === null || starId === undefined) {
            throw new Error('Required parameter starId was null or undefined when calling getUniverseStarsStarId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get station information
     * Get information on a station  --- Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  --- This route is cached for up to 300 seconds
     * @param stationId station_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStationsStationId(stationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/stations/{station_id}/'
            .replace('{' + 'station_id' + '}', String(stationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'stationId' is not null or undefined
        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling getUniverseStationsStationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List all public structures
     * List all public structures  --- Alternate route: &#x60;/dev/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/v1/universe/structures/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructures(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/structures/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get structure information
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  --- Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param structureId An Eve structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructuresStructureId(structureId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/structures/{structure_id}/'
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling getUniverseStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get system jumps
     * Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: &#x60;/dev/universe/system_jumps/&#x60;  Alternate route: &#x60;/legacy/universe/system_jumps/&#x60;  Alternate route: &#x60;/v1/universe/system_jumps/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemJumps(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/system_jumps/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get system kills
     * Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: &#x60;/dev/universe/system_kills/&#x60;  Alternate route: &#x60;/v2/universe/system_kills/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemKills(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/system_kills/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get solar systems
     * Get a list of solar systems  --- Alternate route: &#x60;/dev/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/v1/universe/systems/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystems(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/systems/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get solar system information
     * Get information on a solar system  --- Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/v3/universe/systems/{system_id}/&#x60;  --- This route expires daily at 11:05
     * @param systemId system_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemsSystemId(systemId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/systems/{system_id}/'
            .replace('{' + 'system_id' + '}', String(systemId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'systemId' is not null or undefined
        if (systemId === null || systemId === undefined) {
            throw new Error('Required parameter systemId was null or undefined when calling getUniverseSystemsSystemId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get types
     * Get a list of type ids  --- Alternate route: &#x60;/dev/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/v1/universe/types/&#x60;  --- This route expires daily at 11:05
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypes(datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/types/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get type information
     * Get information on a type  --- Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/v3/universe/types/{type_id}/&#x60;  --- This route expires daily at 11:05
     * @param typeId An Eve item type ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypesTypeId(typeId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/types/{type_id}/'
            .replace('{' + 'type_id' + '}', String(typeId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling getUniverseTypesTypeId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Bulk names to IDs
     * Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.  --- Alternate route: &#x60;/dev/universe/ids/&#x60;  Alternate route: &#x60;/legacy/universe/ids/&#x60;  Alternate route: &#x60;/v1/universe/ids/&#x60;
     * @param names The names to resolve
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseIds(names, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/ids/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'names' is not null or undefined
        if (names === null || names === undefined) {
            throw new Error('Required parameter names was null or undefined when calling postUniverseIds.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: names,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get names and categories for a set of ID&#39;s
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  --- Alternate route: &#x60;/dev/universe/names/&#x60;  Alternate route: &#x60;/v2/universe/names/&#x60;
     * @param ids The ids to resolve
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseNames(ids, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling postUniverseNames.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ids,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UniverseApi = UniverseApi;
var UserInterfaceApiApiKeys;
(function (UserInterfaceApiApiKeys) {
})(UserInterfaceApiApiKeys = exports.UserInterfaceApiApiKeys || (exports.UserInterfaceApiApiKeys = {}));
class UserInterfaceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[UserInterfaceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  --- Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60;
     * @param addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param destinationId The destination to travel to, can be solar system, station or structure&#39;s id
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiAutopilotWaypoint(addToBeginning, clearOtherWaypoints, destinationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/autopilot/waypoint/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'addToBeginning' is not null or undefined
        if (addToBeginning === null || addToBeginning === undefined) {
            throw new Error('Required parameter addToBeginning was null or undefined when calling postUiAutopilotWaypoint.');
        }
        // verify required parameter 'clearOtherWaypoints' is not null or undefined
        if (clearOtherWaypoints === null || clearOtherWaypoints === undefined) {
            throw new Error('Required parameter clearOtherWaypoints was null or undefined when calling postUiAutopilotWaypoint.');
        }
        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error('Required parameter destinationId was null or undefined when calling postUiAutopilotWaypoint.');
        }
        if (addToBeginning !== undefined) {
            queryParameters['add_to_beginning'] = addToBeginning;
        }
        if (clearOtherWaypoints !== undefined) {
            queryParameters['clear_other_waypoints'] = clearOtherWaypoints;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (destinationId !== undefined) {
            queryParameters['destination_id'] = destinationId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Contract Window
     * Open the contract window inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60;
     * @param contractId The contract to open
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowContract(contractId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/contract/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postUiOpenwindowContract.');
        }
        if (contractId !== undefined) {
            queryParameters['contract_id'] = contractId;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60;
     * @param targetId The target to open
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowInformation(targetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/information/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'targetId' is not null or undefined
        if (targetId === null || targetId === undefined) {
            throw new Error('Required parameter targetId was null or undefined when calling postUiOpenwindowInformation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (targetId !== undefined) {
            queryParameters['target_id'] = targetId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60;
     * @param typeId The item type to open in market window
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowMarketdetails(typeId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/marketdetails/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling postUiOpenwindowMarketdetails.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  --- Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60;
     * @param newMail The details of mail to create
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowNewmail(newMail, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/newmail/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'newMail' is not null or undefined
        if (newMail === null || newMail === undefined) {
            throw new Error('Required parameter newMail was null or undefined when calling postUiOpenwindowNewmail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newMail,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UserInterfaceApi = UserInterfaceApi;
var WalletApiApiKeys;
(function (WalletApiApiKeys) {
})(WalletApiApiKeys = exports.WalletApiApiKeys || (exports.WalletApiApiKeys = {}));
class WalletApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[WalletApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get a character&#39;s wallet balance
     * Returns a character&#39;s wallet balance  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/wallet/&#x60;  --- This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWallet(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/wallet/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdWallet.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character wallet journal
     * Retrieve character wallet journal  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/journal/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/wallet/journal/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWalletJournal(characterId, datasource, fromId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/wallet/journal/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdWalletJournal.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromId !== undefined) {
            queryParameters['from_id'] = fromId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get wallet transactions
     * Get wallet transactions of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/wallet/transactions/&#x60;  --- This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param fromId Only show transactions happened before the one referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWalletTransactions(characterId, datasource, fromId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/wallet/transactions/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdWalletTransactions.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromId !== undefined) {
            queryParameters['from_id'] = fromId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a corporation&#39;s wallet balance
     * Get a corporation&#39;s wallets  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/&#x60;  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWallets(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/wallets/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdWallets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation wallet journal
     * Retrieve corporation wallet journal  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/wallets/{division}/journal/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param division Wallet key of the division to fetch journals from
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWalletsDivisionJournal(corporationId, division, datasource, fromId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/wallets/{division}/journal/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'division' + '}', String(division));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdWalletsDivisionJournal.');
        }
        // verify required parameter 'division' is not null or undefined
        if (division === null || division === undefined) {
            throw new Error('Required parameter division was null or undefined when calling getCorporationsCorporationIdWalletsDivisionJournal.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromId !== undefined) {
            queryParameters['from_id'] = fromId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation wallet transactions
     * Get wallet transactions of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/{division}/transactions/&#x60;  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant
     * @param corporationId An EVE corporation ID
     * @param division Wallet key of the division to fetch journals from
     * @param datasource The server name you would like data from
     * @param fromId Only show journal entries happened before the transaction referenced by this id
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdWalletsDivisionTransactions(corporationId, division, datasource, fromId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/wallets/{division}/transactions/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'division' + '}', String(division));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdWalletsDivisionTransactions.');
        }
        // verify required parameter 'division' is not null or undefined
        if (division === null || division === undefined) {
            throw new Error('Required parameter division was null or undefined when calling getCorporationsCorporationIdWalletsDivisionTransactions.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromId !== undefined) {
            queryParameters['from_id'] = fromId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.WalletApi = WalletApi;
var WarsApiApiKeys;
(function (WarsApiApiKeys) {
})(WarsApiApiKeys = exports.WarsApiApiKeys || (exports.WarsApiApiKeys = {}));
class WarsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[WarsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List wars
     * Return a list of wars  --- Alternate route: &#x60;/dev/wars/&#x60;  Alternate route: &#x60;/legacy/wars/&#x60;  Alternate route: &#x60;/v1/wars/&#x60;  --- This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param maxWarId Only return wars with ID smaller than this.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWars(datasource, maxWarId, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (maxWarId !== undefined) {
            queryParameters['max_war_id'] = maxWarId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get war information
     * Return details about a war  --- Alternate route: &#x60;/dev/wars/{war_id}/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/&#x60;  Alternate route: &#x60;/v1/wars/{war_id}/&#x60;  --- This route is cached for up to 3600 seconds
     * @param warId ID for a war
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarId(warId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/{war_id}/'
            .replace('{' + 'war_id' + '}', String(warId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'warId' is not null or undefined
        if (warId === null || warId === undefined) {
            throw new Error('Required parameter warId was null or undefined when calling getWarsWarId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List kills for a war
     * Return a list of kills related to a war  --- Alternate route: &#x60;/dev/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/v1/wars/{war_id}/killmails/&#x60;  --- This route is cached for up to 3600 seconds
     * @param warId A valid war ID
     * @param datasource The server name you would like data from
     * @param page Which page of results to return
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarIdKillmails(warId, datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/{war_id}/killmails/'
            .replace('{' + 'war_id' + '}', String(warId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'warId' is not null or undefined
        if (warId === null || warId === undefined) {
            throw new Error('Required parameter warId was null or undefined when calling getWarsWarIdKillmails.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.WarsApi = WarsApi;
//# sourceMappingURL=api.js.map